<apex:component controller="sma.MAComponentCon">
	
	<!-- CSS -->
	<style type='text/css'>
	
		/* Territory popup */
		#CreateTerritoryPopup {
			height: 600px !important;
			max-height: 600px
		}
		
		/* Tabs */
		#CreateTerritoryPopup .tabs {
			border-bottom: 1px solid silver;
			padding-left: 15px;
			list-style: none;
		}
		
		#CreateTerritoryPopup .ui-widget {
			font-size: 1em;
		}
		
		#CreateTerritoryPopup .ui-tabs {
			padding: 0px;
			zoom: 0px;
		}
		
		#CreateTerritoryPopup ul.tabs {
			background: none;
			border-top: none;
			border-left: none;
			border-right: none;
			border-bottom-left-radius: 0px;
			border-bottom-right-radius: 0px;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab.ui-state-default, #CustomShapePopup .tabs .territory-tab.ui-state-default {
			display: inline-block;
			width:75px;
			background: #3684c5;
            text-align: center;
            border-radius: 0 0 0 0;
            margin: 0 0 0 0;
            padding: 5px 8px;
            color:white;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab a, #CustomShapePopup .tabs .territory-tab a {
			color:white;
			float: none;
			padding: 0;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab.ui-tabs-active, #CustomShapePopup .tabs .territory-tab.ui-tabs-active {
			background: white;
			border-bottom: 0 !important;
			position: relative;
			top: 1px;
			border: 1px solid silver;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab.ui-tabs-active a, #CustomShapePopup .tabs .territory-tab.ui-tabs-active a {
			color: #3684c5;
		}
		
		#CreateTerritoryPopup .tab-geometry {
			position: relative;
			height: 450px;
			overflow: hidden;
		}
		
		#CreateTerritoryPopup .graybox {
			border: 1px solid #C7C7C7;
			padding: 5px;
			margin: 5px 0 10px 0;
			background: #efefef;
			border-radius: 5px;
		}
		
		#CreateTerritoryPopup .search-loading {
			position: absolute;
			right: 40px;
			top: 7px;
			height: 17px;
			border-top-right-radius: 3px;
			border-bottom-right-radius: 3px;
		}
		
		/*Boundary Color Options*/
		#tab-color-geometry .boundary-color-header .boundary-style {
			text-align: center;
			border: 1px solid silver;
			height: 20px;
			border-radius: 4px;
		}
		
		/*******	FIX ABOVE ********/
	
		/* Tabs */
		#CreateTerritoryPopup,#CustomShapePopup {
			height: 600px !important;
			max-height: 600px
		}
		#CreateTerritoryPopup .tabs,#CustomShapePopup .tabs {
			border-bottom: 1px solid silver;
			padding-left: 15px;
			list-style: none;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab,#CustomShapePopup .tabs .territory-tab {
			width:75px;
			background: #3684c5;
            text-align: center;
            border-radius: 0 0 0 0;
            border: 1px solid #19508C;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset, 0 0 4px rgba(255, 255, 255, 0.2) inset;
            margin: 0 0 0 0;
            padding: 5px 8px;
            color:white;
            cursor: pointer;
		}
		
		#CreateTerritoryPopup .tabs .territory-tab.active,#CustomShapePopup .tabs .territory-tab.active {
			background: white;
			color: #3684c5;
			border-bottom: 0 !important;
			position: relative;
			top: 1px;
			border: 1px solid silver;
		}
		
		#CreateTerritoryPopup .tab-geometry,#CustomShapePopup .tab-folders {
			position: relative;
			height: 450px;
			overflow: hidden;
		}
		
		#CreateTerritoryPopup #tab-geometry > table,#CustomShapePopup #tab-geometry > table {
			width: 100%;
			left: 0px;
			position: absolute;
			top: 0px;
		}
		
		#CreateTerritoryPopup .search-table *, #CreateTerritoryPopup .search-table-selection *,#CustomShapePopup .search-table *, #CustomShapePopup .search-table-selection * {
			-webkit-touch-callout: none;
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;
		}
		
		#CreateTerritoryPopup .graybox, #CustomShapePopup .graybox {
			border: 1px solid #C7C7C7;
			padding: 5px;
			margin: 5px 0 10px 0;
			background: #efefef;
			border-radius: 5px;
		}
		
		#CreateTerritoryPopup .search-table-selection, #CustomShapePopup .search-table-selection {
			border: 1px solid silver;
			width: 100%;
			max-height: 375px;
			overflow: auto;
			display: table;
			border-radius: 5px;
			overflow: hidden;
		}
		
		/* Search Boxes */
		#CreateTerritoryPopup .search-button {
			position: absolute;
			right: 0px;
			top: 0px;
			height: 100%;
			width: 40px;
			border-top-right-radius: 3px;
			border-bottom-right-radius: 3px;
		}
		
		/* Tree Icons */
		#SQTree li[rel="SavedTerritory"] > a > .jstree-icon {
			background: url("{!URLFOR($Resource.MapAnything, 'images/ui-icons/boundry_tree_icon.png')}") !important;
		}
		
		/* Search Types */
		.search-type-wrapper {
			margin-bottom: 10px;
		}
		.search-type-wrapper .search-type {
			position: relative;
			display: inline-block;
			cursor: pointer;
			padding: 0px 10px;
			color: #4998DA; font-weight: bold;
			opacity: .6;
		}
		.search-type-wrapper .search-type.selected {
			text-decoration: underline;
			opacity: 1;
		}
		.search-type-wrapper .search-type .territory-selector-img {
			vertical-align: middle;
			opacity: 0.2;	
		}
		.search-type-wrapper .search-type.selected .territory-selector-img {
			opacity: 1;
		}
		
		/* Administrative Boundary Search */
		.search-wrapper {
			border: 1px solid silver;
			border-radius: 4px;
			margin-bottom: 10px;
			padding-right: 50px;
			position: relative;
		}
		.search-wrapper .search-menu {
			border:1px solid silver;
			box-shadow: 0px 0px 10px silver;
			border-radius: 5px;
			padding: 5px;
			position: absolute;
			z-index: 1;
			background: white;
			width: 100%;
			box-sizing: border-box;
		}
		.search-wrapper .autocomplete-row {
			cursor:pointer;
			padding: 3px 5px;
			font-size: 12px;
		}
		.search-wrapper .autocomplete-row:hover {
			background: rgba(34, 101, 187, 0.2);
			border-radius: 3px;
		}
		.search-wrapper .search-input {
			border: none;
			width: 213px;
			border-bottom: 1px solid rgb(240, 240, 240);
			height: 27px;
			padding-left: 5px;
			outline: none;
		}
		.search-wrapper .autocomplete-selection {
			display: inline-block;
			position: relative;
			margin: 3px;
			border: 1px solid silver;
			border-radius: 3px;
			padding: 3px 5px;
			background: #f2f2f2;
		}
		.search-wrapper .autocomplete-selection .result-remove {
			cursor:pointer;
			font-size: 12px;
			font-weight: bold;
			color: rgb(153, 153, 153);
			position: relative;
			bottom: 1px;
		}
		.search-wrapper .autocomplete-selection .result-text {
			position: relative;
			margin-right: 5px;
		}
		
		/* Search Table */
		.new-geometry-content .search-table {
			height: 300px;
			box-shadow: 0px 0px 8px #000;
			background-color: rgba(0, 0, 0, 0.02);
			overflow: auto;
		}
		.new-geometry-content .search-table-watermark {
			font-size: 20px;
			text-shadow: #FFF 0px 2px 0, #D5D5D5 0 -1px 0;
			font-weight: bold;
			color: rgba(172, 172, 172, 0.75);
			position: absolute;
			top: 140px;
			left: 100px;
		}
		
		/* Search All/None */
		.search-allnone {
			font-size: 10px;
			color: #4998DA;
			position: absolute;
			top: 0px;
			right: 15px;
		}
		.search-allnone span {
			cursor: pointer;
		}
		
		/* Search/Selection Aggregates */
		.search-aggregates {
			margin-bottom: 2px;
		}
		.selection-aggregates {
			margin-top: 2px;
		}
		.search-aggregates, .selection-aggregates span {
			font-size: 10px;
			font-weight: bold;
			margin-right: 10px;
			color: #757575;
			cursor: pointer;
		}
		.search-aggregates.active, .selection-aggregates span.active {
			color: #000000;
		}
		#CustomShapePopup .tabs {
		    border: none;
		    border-bottom: 1px solid silver;
		    
		}
		
		/* Boundary Cells */
		.boundary-cell {
			position: relative;
			height: 30px;
			line-height: 30px;
			border-bottom: 1px solid silver;
			padding: 5px 5px 5px 15px;
			cursor: pointer;
		}
		.boundary-cell:hover {
			background: rgba(147, 199, 255, 0.4);
		}
		.boundary-cell .icon {
			position: absolute;
			top: 10px;
			left: 5px;
		}
		.boundary-cell .icon img {
			height: 25px;
		}
		.boundary-cell .info {
		}
		.boundary-cell .info .title {
			font-size: 12px;
		}
		.boundary-cell .info .subtitle {
			font-size: 10px;
			color: #757575;
		}
		.boundary-cell .checkbox {
			display:inline-block;
			vertical-align: middle;
			margin-right: 5px;
			width:12px;
			height:12px;
			background: -webkit-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
			background: -moz-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
			background: -o-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
			background: -ms-linear-gradient(top, #FFF 0%, #DDDDDD 100%);
			border: 1px solid rgba(185, 184, 184, 1);
			border-radius: 3px;
			position: absolute;
			right: 0px;
			top: 12px;
		}
		.boundary-cell:hover .checkbox, .boundary-cell.checked .checkbox {
			background: #A6ADBB url('{!URLFOR($Resource.MapAnything, 'images/ui-icons/ui-ckeck-mark.png')}') no-repeat -11px 1px;
			background-size: 22px;
		}
		.boundary-cell.checked .checkbox {
			background-color: #4998DA;
		}
		#SaveCustomShapePopup .warningMessage {
            color:red;
        }
        #SaveShapeTree {
            background: white !important;
            max-height: 325px;
            overflow: auto;
        }
        #SaveShapeTree .selected {
            background : #e8e8e8;
        }
        #SaveShapeTree .selected > ul {
            background : white;
        }
        #SaveShapeTree .disabled {
            display : none;
        }
		
		#CreateTerritoryPopup .modal-footer .buttons {
            min-width: 241px;
        }

        .modal-footer {
            width:100%;
            box-sizing:border-box;
        }
        
        /* System Info */
        #CreateTerritoryPopup .systeminfo {
        	color: #757575; font-size: 10px;
        }
        
        #CreateTerritoryPopup .ui-tabs-panel
        {
            padding: 15px;
            margin-bottom: 10px;
            height: 350px;
            overflow-x: hidden;
            overflow-y: auto;
            border-bottom: 1px solid silver;
        }
		
	</style>
	
	<!-- JS -->
	<script type='text/javascript'>

		
		
		var selectedGeometry = {};
		var $lastCheckedCell;
		var searchIndex = 0;
		var ShapeLayerPreviewMap;
		var CustomShapeMap;
		var ShapeLayerBuilderPreviewShapeManager;
		var CustomShapeLayerBuilderPreviewShapeManager;
		var ShapeLayerBuilderPreviewMarkerArray = [];
		var CustomShapeLayerBuilderPreviewMarkerArray = [];
		
		var SEStatesDissolved = JSON.parse('{"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[-82.983386,24.602635],[-82.977736,24.656482],[-82.899928,24.717778],[-82.800177,24.726282],[-82.766681,24.66794],[-82.80441,24.604296],[-82.849053,24.576748],[-82.95816,24.581828],[-82.983386,24.602635]]],[[[-81.347015,30.712444],[-81.380867,30.627345],[-81.353574,30.44666],[-81.324877,30.424735],[-81.330627,30.299481],[-81.255134,30.000245],[-81.209268,29.875247],[-81.186399,29.76008],[-81.119814,29.59673],[-80.906836,29.144706],[-80.874815,29.105968],[-80.635573,28.750268],[-80.522973,28.608238],[-80.46939,28.453097],[-80.519428,28.391084],[-80.543999,28.271092],[-80.499773,28.07726],[-80.328113,27.750306],[-80.227962,27.463004],[-80.039102,27.029853],[-79.975425,26.80025],[-79.980648,26.595447],[-80.014362,26.362236],[-80.016904,26.257978],[-80.052257,25.974956],[-80.067685,25.902395],[-80.056056,25.837688],[-80.0965,25.652753],[-80.04351,25.598051],[-80.0567,25.555212],[-80.115671,25.541393],[-80.141757,25.434711],[-80.112612,25.375391],[-80.150013,25.31442],[-80.217862,25.295247],[-80.249773,25.179479],[-80.302899,25.144923],[-80.390435,25.057189],[-80.453365,24.963698],[-80.514343,24.940628],[-80.619896,24.854586],[-80.783375,24.76126],[-80.852228,24.748931],[-81.047648,24.64024],[-81.147686,24.649064],[-81.27169,24.597096],[-81.474733,24.553455],[-81.514615,24.564757],[-81.539924,24.486034],[-81.711831,24.429733],[-81.76287,24.449643],[-81.813522,24.417639],[-81.946441,24.399348],[-82.067171,24.523715],[-82.100333,24.499998],[-82.175098,24.499617],[-82.218964,24.54221],[-82.210239,24.590843],[-82.164692,24.629473],[-82.081731,24.635634],[-82.026643,24.607666],[-81.936739,24.656502],[-81.866423,24.663305],[-81.723528,24.725524],[-81.60277,24.799559],[-81.458887,24.86745],[-81.402473,24.881827],[-81.202322,24.868352],[-81.132429,24.805835],[-81.06447,24.791116],[-80.964288,24.819907],[-80.993976,24.910454],[-81.05511,24.971413],[-81.098489,25.066471],[-81.184409,25.125001],[-81.234044,25.234522],[-81.196077,25.357058],[-81.205709,25.410751],[-81.259117,25.479956],[-81.276004,25.535118],[-81.347231,25.636727],[-81.399194,25.659252],[-81.445143,25.737576],[-81.588095,25.809922],[-81.628669,25.771261],[-81.718139,25.793033],[-81.775286,25.880947],[-81.801041,25.973828],[-81.85034,26.062872],[-81.867882,26.214383],[-81.906149,26.331427],[-81.978126,26.399692],[-82.068898,26.371318],[-82.112221,26.377755],[-82.236453,26.4773],[-82.281846,26.61019],[-82.32191,26.665079],[-82.31793,26.734402],[-82.338319,26.803318],[-82.394753,26.875342],[-82.49982,27.043895],[-82.56474,27.2056],[-82.735158,27.415808],[-82.815377,27.535958],[-82.823669,27.575077],[-82.8057,27.709384],[-82.901337,27.839107],[-82.908909,27.890082],[-82.878105,28.04282],[-82.896633,28.080295],[-82.908311,28.206626],[-82.89215,28.245247],[-82.795276,28.299764],[-82.800268,28.354732],[-82.746195,28.44931],[-82.748738,28.532054],[-82.727392,28.595587],[-82.788007,28.709302],[-82.813037,28.791293],[-82.794786,28.857729],[-82.857828,28.942006],[-82.851278,29.017389],[-82.950078,29.076059],[-83.076,29.041819],[-83.14408,29.07284],[-83.171806,29.185921],[-83.233821,29.235728],[-83.238679,29.30861],[-83.297689,29.346075],[-83.36022,29.431083],[-83.449456,29.483351],[-83.46451,29.613319],[-83.544374,29.671453],[-83.609308,29.698416],[-83.647311,29.797139],[-83.745228,29.89382],[-83.808523,29.904346],[-84.043431,30.039755],[-84.109352,30.028084],[-84.184614,29.983069],[-84.251319,29.995969],[-84.256915,29.942848],[-84.298796,29.867126],[-84.338999,29.847125],[-84.44686,29.858732],[-84.512845,29.832042],[-84.542286,29.769797],[-84.639202,29.735214],[-84.73575,29.656375],[-84.927476,29.569628],[-85.031168,29.539088],[-85.234846,29.624999],[-85.292016,29.632273],[-85.381684,29.612853],[-85.429996,29.669967],[-85.474996,29.831542],[-85.446289,29.901033],[-85.505081,29.911781],[-85.587654,29.962518],[-85.632537,30.014255],[-85.767959,30.076404],[-85.826187,30.125185],[-85.947196,30.191446],[-86.18476,30.277966],[-86.397504,30.325354],[-86.645861,30.346173],[-86.908882,30.320226],[-87.138764,30.278493],[-87.296457,30.27269],[-87.518346,30.229506],[-87.647824,30.199211],[-87.807153,30.177378],[-88.003618,30.173417],[-88.074869,30.147149],[-88.162022,30.200093],[-88.384431,30.158543],[-88.425432,30.998323],[-88.451573,31.481531],[-88.473227,31.893856],[-88.428209,32.25103],[-88.354292,32.875131],[-88.294867,33.367103],[-88.210741,34.0292],[-88.135204,34.615878],[-88.097888,34.892202],[-88.152413,34.919741],[-88.200064,34.995634],[-88.202959,35.008028],[-87.429968,35.002791],[-86.836306,34.991899],[-86.467941,34.990486],[-85.605165,34.984678],[-85.379512,34.983035],[-84.952772,34.987943],[-84.321869,34.988408],[-83.619985,34.986592],[-83.108614,35.000659],[-82.784838,35.085699],[-82.763712,35.068209],[-82.641797,35.131817],[-82.431481,35.173187],[-82.419744,35.198613],[-82.27492,35.200071],[-81.686579,35.177658],[-81.069092,35.151242],[-81.03247,35.110033],[-81.041489,35.044703],[-80.93495,35.107409],[-80.782042,34.935785],[-80.797491,34.819752],[-80.164577,34.811656],[-79.6753,34.804744],[-79.358252,34.545579],[-79.201531,34.408634],[-78.874747,34.134395],[-78.499301,33.812852],[-78.635723,33.776679],[-78.772415,33.707967],[-78.887415,33.611975],[-78.993033,33.488992],[-79.034496,33.456834],[-79.087581,33.369287],[-79.120217,33.246932],[-79.086583,33.21531],[-79.091614,33.159056],[-79.140519,33.13962],[-79.215538,33.064248],[-79.273373,33.046559],[-79.322257,32.956078],[-79.440181,32.958916],[-79.495945,32.931572],[-79.534689,32.870012],[-79.637821,32.816377],[-79.691893,32.75924],[-79.760074,32.738257],[-79.798255,32.675632],[-79.918341,32.607264],[-79.979002,32.558074],[-80.088877,32.549029],[-80.121459,32.499192],[-80.198839,32.496241],[-80.243074,32.472449],[-80.374825,32.342453],[-80.392327,32.280317],[-80.523824,32.234592],[-80.584985,32.162589],[-80.66472,32.142607],[-80.748202,32.08449],[-80.751429,32.033468],[-80.789841,31.96439],[-80.855339,31.910809],[-80.938316,31.809008],[-80.970726,31.798353],[-81.049789,31.688633],[-81.087067,31.529158],[-81.190758,31.399876],[-81.172546,31.376831],[-81.18277,31.265846],[-81.234337,31.170258],[-81.296417,31.15188],[-81.297874,31.080952],[-81.345306,31.059362],[-81.304779,30.985712],[-81.400482,30.766426],[-81.347015,30.712444]]]]},"properties":{"type":"dissolved","label":"asdf","uniquelabel":"asdf","abbreviation":"","geoid":"","uniqueid":"","parentid":"","level":""}}]}');
	    var SEStatesNotDissolved = JSON.parse('{"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[-82.983386,24.602635],[-82.977736,24.656482],[-82.899928,24.717778],[-82.800177,24.726282],[-82.766681,24.66794],[-82.80441,24.604296],[-82.849053,24.576748],[-82.95816,24.581828],[-82.983386,24.602635]]],[[[-85.002499,31.000685],[-84.983527,30.935486],[-84.942525,30.888488],[-84.911122,30.751191],[-84.864693,30.711542],[-84.474409,30.692793],[-83.975655,30.67037],[-83.065223,30.620039],[-82.214677,30.568556],[-82.240403,30.53777],[-82.20124,30.485114],[-82.210733,30.42564],[-82.171623,30.359918],[-82.065598,30.358114],[-82.016906,30.475111],[-82.00581,30.565358],[-82.050217,30.674538],[-82.039795,30.747297],[-81.972458,30.779926],[-81.963928,30.8181],[-81.793968,30.787239],[-81.718109,30.744806],[-81.659805,30.751265],[-81.572395,30.721897],[-81.347015,30.712444],[-81.380867,30.627345],[-81.353574,30.44666],[-81.324877,30.424735],[-81.330627,30.299481],[-81.255134,30.000245],[-81.209268,29.875247],[-81.186399,29.76008],[-81.119814,29.59673],[-80.906836,29.144706],[-80.874815,29.105968],[-80.635573,28.750268],[-80.522973,28.608238],[-80.46939,28.453097],[-80.519428,28.391084],[-80.543999,28.271092],[-80.499773,28.07726],[-80.328113,27.750306],[-80.227962,27.463004],[-80.039102,27.029853],[-79.975425,26.80025],[-79.980648,26.595447],[-80.014362,26.362236],[-80.016904,26.257978],[-80.052257,25.974956],[-80.067685,25.902395],[-80.056056,25.837688],[-80.0965,25.652753],[-80.04351,25.598051],[-80.0567,25.555212],[-80.115671,25.541393],[-80.141757,25.434711],[-80.112612,25.375391],[-80.150013,25.31442],[-80.217862,25.295247],[-80.249773,25.179479],[-80.302899,25.144923],[-80.390435,25.057189],[-80.453365,24.963698],[-80.514343,24.940628],[-80.619896,24.854586],[-80.783375,24.76126],[-80.852228,24.748931],[-81.047648,24.64024],[-81.147686,24.649064],[-81.27169,24.597096],[-81.474733,24.553455],[-81.514615,24.564757],[-81.539924,24.486034],[-81.711831,24.429733],[-81.76287,24.449643],[-81.813522,24.417639],[-81.946441,24.399348],[-82.067171,24.523715],[-82.100333,24.499998],[-82.175098,24.499617],[-82.218964,24.54221],[-82.210239,24.590843],[-82.164692,24.629473],[-82.081731,24.635634],[-82.026643,24.607666],[-81.936739,24.656502],[-81.866423,24.663305],[-81.723528,24.725524],[-81.60277,24.799559],[-81.458887,24.86745],[-81.402473,24.881827],[-81.202322,24.868352],[-81.132429,24.805835],[-81.06447,24.791116],[-80.964288,24.819907],[-80.993976,24.910454],[-81.05511,24.971413],[-81.098489,25.066471],[-81.184409,25.125001],[-81.234044,25.234522],[-81.196077,25.357058],[-81.205709,25.410751],[-81.259117,25.479956],[-81.276004,25.535118],[-81.347231,25.636727],[-81.399194,25.659252],[-81.445143,25.737576],[-81.588095,25.809922],[-81.628669,25.771261],[-81.718139,25.793033],[-81.775286,25.880947],[-81.801041,25.973828],[-81.85034,26.062872],[-81.867882,26.214383],[-81.906149,26.331427],[-81.978126,26.399692],[-82.068898,26.371318],[-82.112221,26.377755],[-82.236453,26.4773],[-82.281846,26.61019],[-82.32191,26.665079],[-82.31793,26.734402],[-82.338319,26.803318],[-82.394753,26.875342],[-82.49982,27.043895],[-82.56474,27.2056],[-82.735158,27.415808],[-82.815377,27.535958],[-82.823669,27.575077],[-82.8057,27.709384],[-82.901337,27.839107],[-82.908909,27.890082],[-82.878105,28.04282],[-82.896633,28.080295],[-82.908311,28.206626],[-82.89215,28.245247],[-82.795276,28.299764],[-82.800268,28.354732],[-82.746195,28.44931],[-82.748738,28.532054],[-82.727392,28.595587],[-82.788007,28.709302],[-82.813037,28.791293],[-82.794786,28.857729],[-82.857828,28.942006],[-82.851278,29.017389],[-82.950078,29.076059],[-83.076,29.041819],[-83.14408,29.07284],[-83.171806,29.185921],[-83.233821,29.235728],[-83.238679,29.30861],[-83.297689,29.346075],[-83.36022,29.431083],[-83.449456,29.483351],[-83.46451,29.613319],[-83.544374,29.671453],[-83.609308,29.698416],[-83.647311,29.797139],[-83.745228,29.89382],[-83.808523,29.904346],[-84.043431,30.039755],[-84.109352,30.028084],[-84.184614,29.983069],[-84.251319,29.995969],[-84.256915,29.942848],[-84.298796,29.867126],[-84.338999,29.847125],[-84.44686,29.858732],[-84.512845,29.832042],[-84.542286,29.769797],[-84.639202,29.735214],[-84.73575,29.656375],[-84.927476,29.569628],[-85.031168,29.539088],[-85.234846,29.624999],[-85.292016,29.632273],[-85.381684,29.612853],[-85.429996,29.669967],[-85.474996,29.831542],[-85.446289,29.901033],[-85.505081,29.911781],[-85.587654,29.962518],[-85.632537,30.014255],[-85.767959,30.076404],[-85.826187,30.125185],[-85.947196,30.191446],[-86.18476,30.277966],[-86.397504,30.325354],[-86.645861,30.346173],[-86.908882,30.320226],[-87.138764,30.278493],[-87.296457,30.27269],[-87.518346,30.229506],[-87.49998,30.328957],[-87.450778,30.346999],[-87.440678,30.391498],[-87.369383,30.431948],[-87.435578,30.480496],[-87.445103,30.528909],[-87.393294,30.627218],[-87.406356,30.674437],[-87.501502,30.721092],[-87.544789,30.778395],[-87.626224,30.846664],[-87.588862,30.96579],[-87.598829,30.997455],[-87.140755,30.999532],[-86.704483,30.994668],[-86.12154,30.992884],[-85.568112,30.996244],[-85.002499,31.000685]]]]},"properties":{"type":"Administrative","label":"Florida","uniquelabel":"Florida","abbreviation":"FL","geoid":"12","uniqueid":"USA-12","parentid":"","level":"1"}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[-85.605165,34.984678],[-85.379512,34.983035],[-84.952772,34.987943],[-84.321869,34.988408],[-83.619985,34.986592],[-83.108614,35.000659],[-83.127357,34.950195],[-83.32415,34.787479],[-83.352692,34.716904],[-83.23258,34.611597],[-83.168278,34.590998],[-83.034565,34.483571],[-82.901551,34.486764],[-82.8644,34.459785],[-82.833571,34.364092],[-82.798658,34.341777],[-82.743172,34.251598],[-82.717459,34.150546],[-82.675219,34.129779],[-82.593887,34.028109],[-82.556765,33.945324],[-82.422808,33.863757],[-82.346933,33.834298],[-82.247472,33.752591],[-82.196584,33.630583],[-82.133523,33.590535],[-82.046335,33.56383],[-81.985938,33.486536],[-81.934136,33.468337],[-81.918337,33.332842],[-81.847736,33.307243],[-81.852822,33.248542],[-81.756935,33.197848],[-81.768235,33.167949],[-81.704634,33.11645],[-81.614994,33.095551],[-81.491899,33.006694],[-81.502716,32.938688],[-81.457061,32.850389],[-81.426475,32.840773],[-81.411839,32.762147],[-81.427505,32.702242],[-81.393033,32.651542],[-81.389205,32.595416],[-81.299796,32.563049],[-81.200408,32.468314],[-81.205572,32.423893],[-81.119784,32.286368],[-81.15577,32.245793],[-81.118237,32.189203],[-81.117225,32.117604],[-81.066965,32.090384],[-81.01197,32.100178],[-80.926769,32.041663],[-80.751429,32.033468],[-80.789841,31.96439],[-80.855339,31.910809],[-80.938316,31.809008],[-80.970726,31.798353],[-81.049789,31.688633],[-81.087067,31.529158],[-81.190758,31.399876],[-81.172546,31.376831],[-81.18277,31.265846],[-81.234337,31.170258],[-81.296417,31.15188],[-81.297874,31.080952],[-81.345306,31.059362],[-81.304779,30.985712],[-81.400482,30.766426],[-81.347015,30.712444],[-81.572395,30.721897],[-81.659805,30.751265],[-81.718109,30.744806],[-81.793968,30.787239],[-81.963928,30.8181],[-81.972458,30.779926],[-82.039795,30.747297],[-82.050217,30.674538],[-82.00581,30.565358],[-82.016906,30.475111],[-82.065598,30.358114],[-82.171623,30.359918],[-82.210733,30.42564],[-82.20124,30.485114],[-82.240403,30.53777],[-82.214677,30.568556],[-83.065223,30.620039],[-83.975655,30.67037],[-84.474409,30.692793],[-84.864693,30.711542],[-84.911122,30.751191],[-84.942525,30.888488],[-84.983527,30.935486],[-85.002499,31.000685],[-85.037062,31.109753],[-85.099647,31.164942],[-85.113261,31.264343],[-85.071621,31.468384],[-85.041428,31.539293],[-85.057473,31.618624],[-85.12593,31.696265],[-85.140731,31.857461],[-85.08213,31.944658],[-85.045063,32.088063],[-85.06206,32.132486],[-85.009224,32.181646],[-84.930727,32.21895],[-84.901191,32.258374],[-84.9338,32.29826],[-85.002791,32.322428],[-84.971831,32.442843],[-85.001532,32.514741],[-85.067199,32.579306],[-85.105437,32.644934],[-85.122326,32.774383],[-85.165635,32.808222],[-85.184737,32.870514],[-85.304439,33.482884],[-85.406748,34.002314],[-85.47045,34.328239],[-85.561416,34.750079],[-85.605165,34.984678]]]]},"properties":{"type":"Administrative","label":"Georgia","uniquelabel":"Georgia","abbreviation":"GA","geoid":"13","uniqueid":"USA-13","parentid":"","level":"1"}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[-88.200064,34.995634],[-88.202959,35.008028],[-87.429968,35.002791],[-86.836306,34.991899],[-86.467941,34.990486],[-85.605165,34.984678],[-85.561416,34.750079],[-85.47045,34.328239],[-85.406748,34.002314],[-85.304439,33.482884],[-85.184737,32.870514],[-85.165635,32.808222],[-85.122326,32.774383],[-85.105437,32.644934],[-85.067199,32.579306],[-85.001532,32.514741],[-84.971831,32.442843],[-85.002791,32.322428],[-84.9338,32.29826],[-84.901191,32.258374],[-84.930727,32.21895],[-85.009224,32.181646],[-85.06206,32.132486],[-85.045063,32.088063],[-85.08213,31.944658],[-85.140731,31.857461],[-85.12593,31.696265],[-85.057473,31.618624],[-85.041428,31.539293],[-85.071621,31.468384],[-85.113261,31.264343],[-85.099647,31.164942],[-85.037062,31.109753],[-85.002499,31.000685],[-85.568112,30.996244],[-86.12154,30.992884],[-86.704483,30.994668],[-87.140755,30.999532],[-87.598829,30.997455],[-87.588862,30.96579],[-87.626224,30.846664],[-87.544789,30.778395],[-87.501502,30.721092],[-87.406356,30.674437],[-87.393294,30.627218],[-87.445103,30.528909],[-87.435578,30.480496],[-87.369383,30.431948],[-87.440678,30.391498],[-87.450778,30.346999],[-87.49998,30.328957],[-87.518346,30.229506],[-87.647824,30.199211],[-87.807153,30.177378],[-88.003618,30.173417],[-88.074869,30.147149],[-88.162022,30.200093],[-88.384431,30.158543],[-88.425432,30.998323],[-88.451573,31.481531],[-88.473227,31.893856],[-88.428209,32.25103],[-88.354292,32.875131],[-88.294867,33.367103],[-88.210741,34.0292],[-88.135204,34.615878],[-88.097888,34.892202],[-88.152413,34.919741],[-88.200064,34.995634]]]]},"properties":{"type":"Administrative","label":"Alabama","uniquelabel":"Alabama","abbreviation":"AL","geoid":"01","uniqueid":"USA-01","parentid":"","level":"1"}},{"type":"Feature","geometry":{"type":"MultiPolygon","coordinates":[[[[-83.108614,35.000659],[-82.784838,35.085699],[-82.763712,35.068209],[-82.641797,35.131817],[-82.431481,35.173187],[-82.419744,35.198613],[-82.27492,35.200071],[-81.686579,35.177658],[-81.069092,35.151242],[-81.03247,35.110033],[-81.041489,35.044703],[-80.93495,35.107409],[-80.782042,34.935785],[-80.797491,34.819752],[-80.164577,34.811656],[-79.6753,34.804744],[-79.358252,34.545579],[-79.201531,34.408634],[-78.874747,34.134395],[-78.499301,33.812852],[-78.635723,33.776679],[-78.772415,33.707967],[-78.887415,33.611975],[-78.993033,33.488992],[-79.034496,33.456834],[-79.087581,33.369287],[-79.120217,33.246932],[-79.086583,33.21531],[-79.091614,33.159056],[-79.140519,33.13962],[-79.215538,33.064248],[-79.273373,33.046559],[-79.322257,32.956078],[-79.440181,32.958916],[-79.495945,32.931572],[-79.534689,32.870012],[-79.637821,32.816377],[-79.691893,32.75924],[-79.760074,32.738257],[-79.798255,32.675632],[-79.918341,32.607264],[-79.979002,32.558074],[-80.088877,32.549029],[-80.121459,32.499192],[-80.198839,32.496241],[-80.243074,32.472449],[-80.374825,32.342453],[-80.392327,32.280317],[-80.523824,32.234592],[-80.584985,32.162589],[-80.66472,32.142607],[-80.748202,32.08449],[-80.751429,32.033468],[-80.926769,32.041663],[-81.01197,32.100178],[-81.066965,32.090384],[-81.117225,32.117604],[-81.118237,32.189203],[-81.15577,32.245793],[-81.119784,32.286368],[-81.205572,32.423893],[-81.200408,32.468314],[-81.299796,32.563049],[-81.389205,32.595416],[-81.393033,32.651542],[-81.427505,32.702242],[-81.411839,32.762147],[-81.426475,32.840773],[-81.457061,32.850389],[-81.502716,32.938688],[-81.491899,33.006694],[-81.614994,33.095551],[-81.704634,33.11645],[-81.768235,33.167949],[-81.756935,33.197848],[-81.852822,33.248542],[-81.847736,33.307243],[-81.918337,33.332842],[-81.934136,33.468337],[-81.985938,33.486536],[-82.046335,33.56383],[-82.133523,33.590535],[-82.196584,33.630583],[-82.247472,33.752591],[-82.346933,33.834298],[-82.422808,33.863757],[-82.556765,33.945324],[-82.593887,34.028109],[-82.675219,34.129779],[-82.717459,34.150546],[-82.743172,34.251598],[-82.798658,34.341777],[-82.833571,34.364092],[-82.8644,34.459785],[-82.901551,34.486764],[-83.034565,34.483571],[-83.168278,34.590998],[-83.23258,34.611597],[-83.352692,34.716904],[-83.32415,34.787479],[-83.127357,34.950195],[-83.108614,35.000659]]]]},"properties":{"type":"Administrative","label":"South Carolina","uniquelabel":"South Carolina","abbreviation":"SC","geoid":"45","uniqueid":"USA-45","parentid":"","level":"1"}}]}');
        
        var MAShapeLayer = {
            
            NeedMarkerBoundingEvents: false,
            
            
            
            
            ZoomOrDragEvent: function (e)  {
                //console.log('mmap was zoomed or panned');
                
                if (MAShapeLayer.NeedMarkerBoundingEvents)
                {
                    //console.log('yes yes');
                    
                    $('#PlottedQueriesTable .PlottedShapeLayer').each(function () {
                    	var $layer = $(this);
                    	
                    	//are labels enabled?
                    	var markerLabels = $layer.find('#toggle-labels').attr('checked') == 'checked';

                    	if ($layer.data('labelmarkers') && markerLabels) 
                    	{
                    	    var zoom = MA.map.getZoom();
                    		var markers = $layer.data('labelmarkers');
                    		
                    		for (i = 0; i < markers.length; i++) 
                    		{
    
                                var NewVisibleSetting = (zoom >= 9 && MA.map.getBounds().contains(markers[i].getPosition()));
                                var ExistingVisibleSetting = markers[i].getVisible();
            
                                //console.log('---');
                                //console.log('NewVisibleSetting: ' + NewVisibleSetting);
                                //console.log('ExistingVisibleSetting: ' + ExistingVisibleSetting);
            
                                if (NewVisibleSetting != ExistingVisibleSetting)
                                {
                                    if($layer.find('#toggle-dissolve').is(':checked')) {
                                    	markers[i].setVisible(true);
                                    }
                                    else {
                                    	markers[i].setVisible(NewVisibleSetting);
                                    }
                                }
                            }
                    		
                    	}
                    });

                    
                }
                
                
            },
            UpdateNeedMarkerBoundingEvents: function() {
                MAShapeLayer.NeedMarkerBoundingEvents = false;
                
                $('#PlottedQueriesTable .PlottedShapeLayer').each(function () {
                	var $layer = $(this);
                	
                	if ($layer.data('labelmarkers')) 
                	{
                		if ($layer.data('labelmarkers').length > 500)
                		{
                			MAShapeLayer.NeedMarkerBoundingEvents = true;
                		}
                	
                	}
                });
                
            }
            
        } //End MAShapeLayer Object
		
		/*********************************
		*	On Ready
		*********************************/
		function CustomShapeLayerUpdatePreview() {
		    var LayerFillColor = $('#custom-shapelayer-shape-fill-color-input').val();
		    var LayerFillOpacity = $('#custom-shapelayer-shape-fill-opacity-input').val();
		    var LayerStrokeColor = $('#custom-shapelayer-border-fill-color-input').val();
		    
		    var labelEnabled        = $('#custom-shapelayer-label-enabled').is(':checked');
            var labelOverride       = $('#custom-shapelayer-label-override').val();
            var labelJustification  = $('#custom-shapelayer-label-justification').val();
            var labelFontSize       = $('#custom-shapelayer-label-font-size').val();
            var labelFontColor      = $('#custom-shapelayer-label-font-color').val();
            var labelBGColor        = $('#custom-shapelayer-label-bg-color').val();
            var labelBGOpacity      = $('#custom-shapelayer-label-bg-opacity').val();
            
            try { CustomShapeLayerBuilderPreviewShapeManager.setMap(null); } catch (e) {} 
            
            CustomShapeLayerBuilderPreviewShapeManager = new google.maps.Circle({
                map: CustomShapeMap,
                strokeColor: LayerStrokeColor, 
                strokeWeight: 2, 
                fillColor: LayerFillColor, 
                fillOpacity: LayerFillOpacity,
                center : new google.maps.LatLng(33.7849179687286,-84.5168525242187),
                radius : 300500
             });
             
             //Remove existing labels, if they exists
	        if (CustomShapeLayerBuilderPreviewMarkerArray.length > 0)
	        {
	            for (var i = 0; i < CustomShapeLayerBuilderPreviewMarkerArray.length; i++)
                {
                    CustomShapeLayerBuilderPreviewMarkerArray[i].setMap(null);
                } 
                
                CustomShapeLayerBuilderPreviewMarkerArray = [];
	        }
		    if (labelEnabled)
		    {
		        var ImageMarkerURL = 'https://product-api-prod.cloudbilt.com/marker/png2.php?fontcolor=' + encodeURIComponent(labelFontColor)
		            + '&bgcolor=' + encodeURIComponent(labelBGColor)
		            + '&bgopacity=' + encodeURIComponent(labelBGOpacity)
		            + '&fontsize=' + encodeURIComponent(labelFontSize);
		        
	            if (labelJustification == 'left')
	            {
	                CustomShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                        position: new google.maps.LatLng(33.7849179687286, -87.76530009886727),
                        map: CustomShapeMap,
                        icon: ImageMarkerURL + '&text=' + encodeURIComponent('Left'),
                        clickable: false
                    }));
	            }
	            else if (labelJustification == 'center')
	            {
                    CustomShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                        position: new google.maps.LatLng(33.7849179687286, -84.51685252421873),
                        map: CustomShapeMap,
                        icon: ImageMarkerURL + '&text=' + encodeURIComponent('Center'),
                        clickable: false
                    }));
	            }
	            else if (labelJustification == 'right')
	            {
	                CustomShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                        position: new google.maps.LatLng(33.7849179687286, -81.2684049495702),
                        map: CustomShapeMap,
                        icon: ImageMarkerURL + '&text=' + encodeURIComponent('Right'),
                        clickable: false
                    }));
	            }
		        
		    }
		}
		
		function ShapeLayerUpdatePreview()
		{
		    var LayerFillColor = $('#shapelayer-shape-fill-color-input').val();
		    var LayerFillOpacity = $('#shapelayer-shape-fill-opacity-input').val();
		    var LayerStrokeColor = $('#shapelayer-border-fill-color-input').val();
		    
		    var labelEnabled        = $('#shapelayer-label-enabled').is(':checked');
            var labelOverride       = $('#shapelayer-label-override').val();
            var labelJustification  = $('#shapelayer-label-justification').val();
            var labelFontSize       = $('#shapelayer-label-font-size').val();
            var labelFontColor      = $('#shapelayer-label-font-color').val();
            var labelBGColor        = $('#shapelayer-label-bg-color').val();
            var labelBGOpacity      = $('#shapelayer-label-bg-opacity').val();
		    
		    var currentlyDissolved = false;
		    
		    var dissolveGeometry = $('#CreateTerritoryPopup .dissolve-geometry').is(':checked');
		    
		    
		    
		    try { ShapeLayerBuilderPreviewShapeManager.setMap(null); } catch (e) {} 
		        
		        
                
            ShapeLayerBuilderPreviewShapeManager = new google.maps.Data({
                map: ShapeLayerPreviewMap,
                style: { 
                    strokeColor: LayerStrokeColor, 
                    strokeWeight: 2, 
                    fillColor: LayerFillColor, 
                    fillOpacity: LayerFillOpacity  
                }
             });
    
            if (dissolveGeometry)
            {
                ShapeLayerBuilderPreviewShapeManager.addGeoJson(SEStatesDissolved);
            }
            else
            {
                ShapeLayerBuilderPreviewShapeManager.addGeoJson(SEStatesNotDissolved);
            }
		    
		    
		    //ShapeLayerBuilderPreviewMarkerArray

	        
	        
	        //Make the labels
	        
	        //Remove existing labels, if they exists
	        if (ShapeLayerBuilderPreviewMarkerArray.length > 0)
	        {
	            for (var i = 0; i < ShapeLayerBuilderPreviewMarkerArray.length; i++)
                {
                    ShapeLayerBuilderPreviewMarkerArray[i].setMap(null);
                } 
                
                ShapeLayerBuilderPreviewMarkerArray = [];
	        }
		    if (labelEnabled)
		    {
		        var ImageMarkerURL = 'https://product-api-prod.cloudbilt.com/marker/png2.php?fontcolor=' + encodeURIComponent(labelFontColor)
		            + '&bgcolor=' + encodeURIComponent(labelBGColor)
		            + '&bgopacity=' + encodeURIComponent(labelBGOpacity)
		            + '&fontsize=' + encodeURIComponent(labelFontSize);
		        
		        if (dissolveGeometry)
		        {
		            if (labelJustification == 'left')
		            {
		                ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(29.7997095, -88.473227),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Southeast States'),
                            clickable: false
                        }));
		            }
		            else if (labelJustification == 'center')
		            {
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(31.5986396505468, -83.5993269907065),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Southeast States'),
                            clickable: false
                        }));
		            }
		            else if (labelJustification == 'right')
		            {
		                ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(29.7997095, -78.499301),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Southeast States'),
                            clickable: false
                        }));
		            }
		           
		        }
		        else
		        {
		            if (labelJustification == 'left')
		            {
		                ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(27.7000165, -87.626224),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Florida'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.6793865, -85.605165),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Georgia'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.5775885, -88.473227),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Alabama'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(33.6167695, -83.352692),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('South Carolina'),
                            clickable: false
                        }));
		            }
		            else if (labelJustification == 'center')
		            {
		                ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(28.4781928961719, -82.4655539344436),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Florida'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.6381648759795, -83.4273761548062),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Georgia'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.7567898557329, -86.8448359458974),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Alabama'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(33.8792120807938, -80.8650508760346),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('South Carolina'),
                            clickable: false
                        }));
		            }
		            else if (labelJustification == 'right')
		            {
		                ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(27.7000165, -79.975425),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Florida'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.6793865, -80.751429),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Georgia'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(32.5775885, -84.901191),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('Alabama'),
                            clickable: false
                        }));
                        
                        
                        ShapeLayerBuilderPreviewMarkerArray.push(new google.maps.Marker({
                            position: new google.maps.LatLng(33.6167695, -78.499301),
                            map: ShapeLayerPreviewMap,
                            icon: ImageMarkerURL + '&text=' + encodeURIComponent('South Carolina'),
                            clickable: false
                        }));   
		            
		            }
		            
		        }
		        
		        
		        
		    }
		    
		        
		}
		
		
		$(function () {
		    
		    /*
		    google.maps.event.addListener(MA.map, 'zoom_changed', function(e) {
                MAShapeLayer.ZoomOrDragEvent(e);
            });

             google.maps.event.addListener(MA.map, 'dragend', function(e) {
                MAShapeLayer.ZoomOrDragEvent(e);
                
            });
            */
		    
		    
		    
			//send request to get updated country metadata
			$.ajax({
				url: 'https://product-api-prod.cloudbilt.com/boundaries/',
				type: 'POST',
				data: { action: 'getCountries' },
				dataType: 'JSONP',
				success: function (response) {
					if (response.success)
					{
						//update country metadata
						MA.TM.countries = response.data;
						MA.TM.countries['CUS'] = {
							label: 'Custom',
							adminLevels: {
								'1': { label: 'Shape', pluralLabel: 'Shapes', parent: false, hasGeometry: true }
							}
						};
						
						//populate country options in territory builder
						var $countrySelect = $('#CreateTerritoryPopup .territory-country').empty();
						$.each(MA.TM.countries, function (index, country) {
							$('<option/>').attr('value', index).text(country.label).appendTo($countrySelect);
						});
						$countrySelect.val('USA').change();
					}
				}
			});
		
			//init tabs
			$('#CreateTerritoryPopup #tabs').tabs({ 
			    active: 0,
			    activate: function( event, ui ) 
			        {
			            if (ui.newPanel.selector = '#tab-color-geometry')
			            {
			                //shapelayer_preview_map - change to only happen when the popup is visible
                		    ShapeLayerPreviewMap = new google.maps.Map(document.getElementById('shapelayer_preview_map'), {
                                center: { lat: 30.223999401567077, lng: -83.759765625},
                                zoom: 5,
                                disableDoubleClickZoom: true,
                                draggable: false,
                                mapTypeControl: false,
                                mapTypeControl: false,
                                overviewMapControl: false,
                                panControl: false,
                                rotateControl: false,
                                scaleControl: false,
                                scrollwheel: false,
                                streetViewControl: false,
                                zoomControl: false,
                                scaleControl: false
                            });
                            
                            //Lets remove all the labels now
                            var styledMap = new google.maps.StyledMapType([
                              {
                                featureType: "all",
                                elementType: "labels",
                                stylers: [
                                  { visibility: "off" }
                                ]
                              }
                            ],{name: "Styled Map"});
                            
                            
                            ShapeLayerPreviewMap.mapTypes.set('map_style', styledMap);
                            ShapeLayerPreviewMap.setMapTypeId('map_style');
                		    
                            ShapeLayerUpdatePreview();
                                        
                		    /*
                		    $.ajax({
                                type: 'POST',
                                url: 'https://product-api-prod.cloudbilt.com/geometry/pindexv2.php',
                                dataType: 'JSON',
                                data: options,
                                success: function (response)
                                {
                                    
                                     var dataLayer = new google.maps.Data({
                                          map: ShapeLayerPreviewMap,
                                          style: { strokeColor: '#882233', strokeWeight: 2, fillColor: '#223388', fillOpacity: '0.2' } 
                                     });
                
                                    
                                    
                
                                    dataLayer.addGeoJson(response.data);
                
                                    
                
                                },
                                error: function (response) { console.log(response); }
                               });
                           */
                		    
			            }
			        }
		    });
		    
		    //init tabs
			$('#CustomShapePopup #tabs').tabs({ 
			    active: 0,
			    activate: function( event, ui ) 
			        {
			            if (ui.newPanel.selector = '#tab-color-geometry')
			            {
			                //shapelayer_preview_map - change to only happen when the popup is visible
                		    CustomShapeMap = new google.maps.Map(document.getElementById('customShape_preview_map'), {
                                center: { lat: 30.223999401567077, lng: -83.759765625},
                                zoom: 5,
                                disableDoubleClickZoom: true,
                                draggable: false,
                                mapTypeControl: false,
                                mapTypeControl: false,
                                overviewMapControl: false,
                                panControl: false,
                                rotateControl: false,
                                scaleControl: false,
                                scrollwheel: false,
                                streetViewControl: false,
                                zoomControl: false,
                                scaleControl: false
                            });
                            
                            //Lets remove all the labels now
                            var styledMap = new google.maps.StyledMapType([
                              {
                                featureType: "all",
                                elementType: "labels",
                                stylers: [
                                  { visibility: "off" }
                                ]
                              }
                            ],{name: "Styled Map"});
                            
                            
                            CustomShapeMap.mapTypes.set('map_style', styledMap);
                            CustomShapeMap.setMapTypeId('map_style');
                		    
                            CustomShapeLayerUpdatePreview();
                		    
			            }
			        }
		    });
			
			//handle selecting a country
			$('.territory-country').change(function () {
				updateCountry({ country: $(this).val() });
			});
			
			//set up search box watermarks
			$('.new-geometry-content')
				.on('blur', '.search-input', function () {
					if ($(this).val() == '') {
						$(this).addClass('watermark').val($(this).closest('.search-wrapper').attr('data-watermark'));
					}
				})
				.on('focus', '.search-input', function () {
					$('.search-menu').hide();
					if ($(this).is('.watermark')) {
						$(this).val('').removeClass('watermark');
					}
		  			
					if ($(this).siblings('.search-menu').children().length == 0) {
						$(this).siblings('.search-menu').append('<div class="autocomplete-row" data-value="*">*</div>').show();
					}
					$(this).siblings('.search-menu').show();
				})
			;
			
			//handle selecting auto complete and add to searchbox
			$('.new-geometry-content').on('click', '.search-wrapper .search-menu .autocomplete-row', function() 
			{
				var $searchWrapper = $(this).closest('.search-wrapper');
			
				//add a new selected result
				var $newSelectedResult = $('#TerritoryBuilder-Templates .autocomplete-selection').clone().attr('data-value', $(this).attr('data-value'));
				$newSelectedResult.find('.result-text').text($(this).text());
				if ($searchWrapper.find('.autocomplete-selection').length > 0) {
					$newSelectedResult.insertAfter($searchWrapper.find('.autocomplete-selection').last());
				}
				else {
					$newSelectedResult.prependTo($(this).closest('.search-wrapper'));
				}
				
				//remove the search term and reset the search menu items
				$(this).closest('.search-wrapper').find('.search-input').val('').blur().focus();
				$(this).closest('.search-wrapper').find('.search-menu').html('<div class="autocomplete-row" data-value="*">*</div>').hide();
				
				//perform the main search
				searchGeometry.apply($('.search-table')[0]);
			});
			
			//handle removing selected search results
			$('.new-geometry-content').on('click', '.search-wrapper .result-remove', function () 
			{
				//remove this selected result
				$(this).closest('.autocomplete-selection').remove();
				
				//perform the main search
				searchGeometry.apply($('.search-table')[0]);
			});
			
			//handle searching database for matches on keyup of search boxes
			$('.new-geometry-content').on('keyup', '.search-input', function() {
			
				//grab admin level
				var $searchWrapper = $(this).closest('.search-wrapper');
				var $searchMenu = $(this).siblings('.search-menu'); 
				var adminLevel = $(this).closest('div').attr('data-adminlevel');
				
				//remove previous search results
				$searchMenu.find('.autocomplete-row').remove();
				
				//append a row to represent a starts with search
				var $startsWithRow = $('<div class="autocomplete-row" />')
					.attr('data-value', $(this).val() + '*')
					.text($(this).val() + '*')
					.appendTo($searchMenu)
				;
				
				//show search results
              	$searchMenu.show();
				
				//show loading 
				$(this).siblings('.search-loading').show();
				
				var options = {
					adminLevel: adminLevel,
					search: $(this).val()
				};
				
				//set a timeout to perform the actual search
				clearTimeout($(this).data('timer'));
				$(this).data('timer', setTimeout(function() { searchGeometry.apply($searchWrapper[0]); }, 500));
				
			});
			
			//hide search results if clicked away
	        $(document).mouseup(function (e)
			{
			    var container = $('.search-wrapper .search-input');
			    if (!container.is(e.target) && container.has(e.target).length === 0) {
			        $('.search-wrapper .search-menu').hide();
			    }
			});
			
			//handle initial boundary selection
			$('.new-geometry-content').on('click', '.search-type', function() 
			{
				//mark selected type
				var adminLevel = $(this).attr('data-adminlevel');
				$(this).addClass('selected').siblings().removeClass('selected');
				
				//show appropriate search boxes
				var countryMetadata = MA.TM.countries[$('#CreateTerritoryPopup .territory-country').val()];
				var adminLevelMetadata = countryMetadata.adminLevels[adminLevel];
				$('.new-geometry-content .search-wrapper').hide().filter('[data-adminlevel="'+adminLevel+'"]').show();
				while (adminLevelMetadata.parent) {
					$('.new-geometry-content .search-wrapper[data-adminlevel="'+adminLevelMetadata.parent+'"]').show();
					adminLevelMetadata = countryMetadata.adminLevels[adminLevelMetadata.parent];
				}
				
				//rerun main search
				searchGeometry.apply($('.new-geometry-content .search-table')[0]);
			});
	
			//handle clicking to select all/none
			$('.new-geometry-content').on('click', '.search-allnone span', function () 
			{
				//toggle the cells that need to change
				var checkedSelector = $(this).text() == "{!$Label.MA_All}" ? ':not(.checked)' : '.checked';
				$('.search-table .boundary-cell'+checkedSelector).each(function () {
					toggleBoundarySelection($(this));
				});
				
				//if we're filtering by selected cells, remove any that are no longer selected
				if ($('.selection-aggregates span.active').length > 0) {
					$('.search-table .boundary-cell:not(.checked)').remove();
				}
				
				//refresh summary data
				refreshBoundarySelectionSummaries();
			});
			
			//handle clicking a search/selection aggregate (to filter the items in the search box)
			$('.new-geometry-content').on('click', '.search-aggregates, .selection-aggregates span', function () {
			
				//mark this aggregate as selected and reset the last checked cell because the cells have changed
				$('.search-aggregates, .selection-aggregates span').removeClass('active').filter(this).addClass('active');
				$lastCheckedCell = null;
				
				//search/filter the cells
				if ($(this).is('.search-aggregates')) {
					searchGeometry.apply($('.search-table')[0]);
				}
				else {
					var adminLevel = $(this).attr('data-adminlevel');
					$('.search-table').empty();
					$.each(selectedGeometry, function (value, boundary) {
						if (adminLevel == 'all' || boundary.adminLevel == adminLevel) {
							var $resultRow = $('#TerritoryBuilder-Templates .boundary-cell').clone().addClass('checked').attr({'data-value': value, 'data-adminlevel': boundary.adminLevel});
							$resultRow.find('.territory-selector-img').hide();//.attr('src', MA.staticResources.MapAnything+'/images/TM/'+$('.territory-country').val()+'/AdminIcon-'+boundary.adminLevel+'.png');
							$resultRow.find('.info .title').text(boundary.title);
							$resultRow.find('.info .subtitle').text(boundary.subtitle);
							$resultRow.appendTo($('.search-table'));
						}
					});
					
					//sort
					sortGeometry();
					
					//hide search watermark
					$('.search-table-watermark').hide();
				}
			});
	
			//handle clicking a boundary search cell
			$('.new-geometry-content').on('click', '.boundary-cell', function (e) {
				
				var $cell = $(this);
				if ($lastCheckedCell && e.shiftKey) {
					var uniqueValuesToChange = [];
					var $currentCell = $cell;
					
					//traverse the cells in between the previous and this one and keep track of unique values that need to be toggled
					while ($currentCell.length > 0 && $currentCell[0] != $lastCheckedCell[0]) {
						uniqueValuesToChange.push($currentCell.attr('data-value'));
						$currentCell = $currentCell.index() < $lastCheckedCell.index() 
							? $currentCell.next() 
							: $currentCell.prev();
					}
					
					//we also need to toggle the previous cell if it's different than the current cell
					if ($lastCheckedCell.is('.checked') == $cell.is('.checked')) {
						uniqueValuesToChange.push($lastCheckedCell.attr('data-value'));
					}

					//loop over each unique value that needs to change and change the first instance of it in the set of cells that need to change (this will handle same-value cells auto checking)
					$.each(uniqueValuesToChange, function (key, val) {
						return toggleBoundarySelection($('.search-table .boundary-cell[data-value="'+val+'"]').first());
					});
				}
				else {
					toggleBoundarySelection($cell);
				}
				
				//if we're filtering by selected cells, remove any that are no longer selected
				if ($('.selection-aggregates span.active').length > 0) {
					$('.search-table .boundary-cell:not(.checked)').remove();
				}
				
				//refresh summary data
				refreshBoundarySelectionSummaries();
				
				//store this as the last item that was checked
				$lastCheckedCell = $cell;
			});
			
			//delete geometry
			$('.tab-geometry').on('click', '.delete-territory', function()
			{
				var geometryName = $(this).closest('tr').find('.name').text();
				var r=confirm("You are about to delete "+geometryName+".\nAre you sure?");
	            if (r==true)
	            {
	                //Just continue
	            }
	            else
	            {
	                //Cancel
	                return;
	            }
	            
				var $geometryRow = $(this).closest('tr');
				$.ajax({
	                url: MA.resources.Territory+"?securityToken={!securityToken}&action=deleteGeometryInfo&core.apexpages.devmode.url=0",
	                type: 'POST',
	                dataType: 'JSON',
	                data:
	                {
	                    geometryId	: $geometryRow.attr('data-id')
	                },
	                success: function (response)
					{
	                	$geometryRow.remove();
					}
				});
			});
			
			//remove shapeLayer on close button click
			$('#PlottedQueriesContainer .PlottedShapeLayer').on('click', '.btn-remove', function() {
				$('.PlottedShapeLayer').data('dataLayer').setMap(null);
			});
			
			//for now, select the default country
			$('.territory-country').change();
		});
		
		/***********************************
		* Support Functions
		***********************************/
		
		function updateCountry(options)
		{
			options = $.extend({
				country: 'USA',
				callback: function () {}
			}, options || {})
			
			//make sure this is a supported country
			var country = MA.TM.countries[options.country];
			if (!country) {
				return;
			}
			
			//clear existing selections
			selectedGeometry = {};
			$('.search-table-wrapper .boundary-row, .search-table-selection .boundary-row').remove();
			refreshBoundarySelectionSummaries();
			
			//remove advanced options for custom layers
			if (country.label == 'Custom') {
				$('#CreateTerritoryPopup .geometry-tab a').click();
				$('#CreateTerritoryPopup .advanced-tab').hide();
				$('#CreateTerritoryPopup .dissolve-geometry').attr('checked', false);
			}
			else {
				$('#CreateTerritoryPopup .advanced-tab').show();
				$('#CreateTerritoryPopup .dissolve-geometry').attr('checked', true);
			}
			
			//update admin levels
			$('.search-type-wrapper .search-type').remove();
			$('.search-wrappers .search-wrapper').remove();
			if (country.label == 'Custom' && MA.APIKey == '')
			{
				//no api key
				$('.search-type-wrapper').append($('<div class="search-type" />').text('You need an API key to use custom geometry').css({ 'font-size': '16px', 'font-weight': 'bold', 'color': '#888', 'top': '10px'}));
			}
			else
			{
				//add search types and wrappers
				$.each(country.adminLevels, function (adminLevel, level) 
				{
					//create search type
					var $searchType = $("<div class='search-type'></div>");
					if (level.hasGeometry) {
						$searchType.text(level.label).attr({ 'data-adminlevel': adminLevel });
						$searchType.appendTo('.search-type-wrapper');
					}
					
					//create search wrapper
					var $searchWrapper = $('#TerritoryBuilder-Templates .search-wrapper').clone();
					$searchWrapper.find('.autocomplete-selection').remove();
					$searchWrapper.attr({ 'data-dirty': false, 'data-watermark': level.label+'...', 'data-adminlevel': adminLevel });
					$searchWrapper.appendTo('.search-wrappers');
					
					//legacy support
					if (level.legacyType) {
						$searchType.attr('data-type', level.legacyType);
						$searchWrapper.attr('data-type', level.legacyType);
					}
				});
				
				//init
				$('.search-wrappers .search-input').blur();
				$('.new-geometry-content .search-type').first().click();
			}
		}
		
		function toggleBoundarySelection($cell)
		{
			//toggle 
			$cell.toggleClass('checked');
				
			//add to selected geometry
			if ($cell.is('.checked')) {
				selectedGeometry[$cell.attr('data-value')] = { adminLevel: $cell.attr('data-adminlevel'), title: $cell.find('.title').text(), subtitle: $cell.find('.subtitle').text() };
			}
			else {
				delete selectedGeometry[$cell.attr('data-value')];
			}
			
			return true;
		}
		
		function refreshBoundarySelectionSummaries()
		{
			//we'll need admin level metadata for the current country
			var adminLevels = MA.TM.countries[$('.territory-country').val()].adminLevels;
		
			//aggregate counts per data type
			var adminLevelCounts = {};
			var totalCount = 0;
			$.each(selectedGeometry, function (value, boundary) {
				adminLevelCounts[boundary.adminLevel] = (adminLevelCounts[boundary.adminLevel] || 0) + 1;
				totalCount++;
			});
			
			//keep track of currently active selection
			var currentlyActiveAdminLevel = $('.selection-aggregates span.active').attr('data-adminlevel');
			
			//append the counts to the selection aggregates section
			$('.selection-aggregates').html('<span data-adminlevel="all">'+totalCount+' Selected: </span>');
			$.each(adminLevelCounts, function (adminLevel, count) {
				$('<span />')
					.attr({
						'data-adminlevel': adminLevel,
						'data-count': count
					})
					.text(count + ' ' + (count == 1 ? adminLevels[adminLevel].label : adminLevels[adminLevel].pluralLabel))
					.appendTo($('.selection-aggregates'))
				;
			});
			
			//mark the currently active selection if there is one
			if (currentlyActiveAdminLevel) {
				$('.selection-aggregates span[data-adminlevel="'+currentlyActiveAdminLevel+'"]').addClass('active');
			}
			
			//sort the selection aggregates section
			$('.selection-aggregates span').sortElements(function (a,b) {
				return parseInt($(a).attr('data-adminlevel')) > parseInt($(b).attr('data-adminlevel'));
			});
		}
		
		function syncBoundarySelections()
		{
			//loop over the selected geometry and mark any matching geometry as checked in the search grid
			$.each(selectedGeometry, function (value, boundary) {
				$('.search-table .boundary-cell[data-adminlevel="'+boundary.adminLevel+'"][data-value="'+value+'"]').addClass('checked');
			});
		}
		
		function searchGeometry()
		{
			var $searchWrapper = $(this);
			var adminFilters = {};
			var shouldSearch = false;
			var currentSearchIndex;
			
			//grab the appropriate search filters based on what is being searched (search wrapper vs main search)
			var adminLevel; 
			var $searchWrappersToInclude;
			if ($(this).is('.search-wrapper')) {
				adminLevel = $searchWrapper.attr('data-adminlevel');
				$searchWrappersToInclude = $(this).prevAll(':visible');
				adminFilters['level'+adminLevel] = $(this).find('input').val() + '*';
				
				shouldSearch = true;
			}
			else if ($searchWrapper.is('.search-table')) {
				$('.search-aggregates, .selection-aggregates span').removeClass('active').filter('.search-aggregates').addClass('active');
				showLoading($searchWrapper, 'Searching...');
				currentSearchIndex = ++searchIndex;
			
				adminLevel = $('.search-type.selected').attr('data-adminlevel');
				$searchWrappersToInclude = $('.new-geometry-content .search-wrapper[data-adminlevel="'+adminLevel+'"]');
				$searchWrappersToInclude = $searchWrappersToInclude.add($searchWrappersToInclude.prevAll(':visible'));
			}
		
			//collect administrative boundaries to filter by
			$searchWrappersToInclude.each(function () {
				if ($(this).find('.autocomplete-selection').length > 0) {
					adminFilters['level'+$(this).closest('.search-wrapper').attr('data-adminlevel')] = $(this).find('.autocomplete-selection').map(function () {
						return $(this).attr('data-value');
					}).get().join(',');
					
					shouldSearch = true;
				}
			});
			
			//make callout if search terms are not blank
			var country = $('.territory-country').val();
			if (shouldSearch)
			{
				$.ajax({
					url: 'https://product-api-prod.cloudbilt.com/boundaries/pinfo.php',
					type: 'POST',
					data: $.extend({
						OrgId		: '{!$Organization.Id}',
						APIKey		: MA.APIKey,
						action		: 'search',
						country		: country,
						level		: adminLevel,
						rand		: new Date().getTime()
					}, adminFilters),
					dataType: 'JSONP',
					success: function (response)
					{
						//do nothing if a later search has been performed
						if ($searchWrapper.is('.search-table') && currentSearchIndex != searchIndex) { return; }
					
						//add the results to the appropriate result list (search wrapper or main search)
						if ($searchWrapper.is('.search-wrapper')) {
							$.each(response.data, function (index, boundary) {
								$('<div class="autocomplete-row" />')
									.attr('data-value', boundary.uniqueid)
									.text(boundary.uniquelabel)
			               			.appendTo($searchWrapper.find('.search-menu'))
			               		;
							});
							$searchWrapper.find('.search-loading').hide();
						}
						else 
						{
							//replace existing search results with the new results
							$searchWrapper.empty();
							$.each(response.data, function (index, boundary) {
								var $resultRow = $('#TerritoryBuilder-Templates .boundary-cell').clone().attr({'data-value': boundary.uniqueid, 'data-adminlevel': adminLevel});
								$resultRow.find('.territory-selector-img').hide();//.attr('src', MA.staticResources.MapAnything+'/images/TM/'+country+'/AdminIcon-'+adminLevel+'.png');
								$resultRow.find('.info .title').text(boundary.uniquelabel);
								$resultRow.appendTo($searchWrapper);
							});
							
							//update counters and watermarks
							$('.search-aggregates').text(response.data.length + (response.data.length == 1 ? ' Match' : ' Matches'));
							if (response.data.length == 0) {
								$('.search-table-watermark').show();	
							}
							else {
								$('.search-table-watermark').hide();
							}
							
							//remove existing data for shift-clicking
							$lastCheckedCell = null;
							
							//sync with selections
							syncBoundarySelections();
							
							//sort
							sortGeometry();
							
							//hide loading
							hideMessage($searchWrapper);
						}
					},
					error: function (xhr, status, error) {
						alert(error);
					}
				});
			}
			else
			{
				//clear results hide loading
				if ($searchWrapper.is('.search-wrapper')) {
					$searchWrapper.find('.search-loading').hide();
				}
				else if ($searchWrapper.is('.search-table')) {
					$('.search-table').empty();
					$('.search-aggregates').text('0 Matches');
					hideMessage($searchWrapper);
				}
				
				//show help text
				$('#CreateTerritoryPopup .search-table-watermark').show();
			}
		}
		
		function sortGeometry () 
		{
			$('.search-table .boundary-cell').sortElements(function (a,b) {
				if ($(a).find('.title').text() > $(b).find('.title').text()) { return 1; }
				else if ($(a).find('.title').text() < $(b).find('.title').text()) { return -1; }
				else { return 0; }
			});
		}
		
		function showHideShapeLayer ($proxLayer, visible) {
			var map = visible == true ? MA.map : null;
			try { $proxLayer.data('dataLayer').setMap(map); } catch (err) {}
		    try { $proxLayer.data('kmlLayer').hideDocument(); } catch (err) {}
		    try { $proxLayer.data('proxObject').setMap(map); } catch (err) {}
		    try { $.each($proxLayer.data('proxObjects'), function (i, proxObject) { proxObject.setMap(map); }); } catch (err) {}
		    //check if show labels is checked
		    if($proxLayer.find('#toggle-labels').attr('checked') == 'checked') {
			    try 
			    { 
			        if ($proxLayer.data('labelmarkers')) 
			        {
			            var markers = $proxLayer.data('labelmarkers');
			            
			            for (var i = 0; i < markers.length; i++)
			            {
			                markers[i].setVisible(visible);
			            } 
			        }
			    }
				catch (err) {}
		   	}

		    if(visible == true) {
		    	//update the icon
		    	$proxLayer.find('.glyphicon-eye-close').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
 		    }
 		    else {
 		    	$proxLayer.find('.glyphicon-eye-open').removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
 		    }
		}

		function showHideShapeLabels ($proxLayer, visible) {
			try 
		    { 
		        if ($proxLayer.data('labelmarkers'))
		        {
		        	var markers = $proxLayer.data('labelmarkers');
		        	if(!visible) {
			            for (var i = 0; i < markers.length; i++)
			            {
			                markers[i].setVisible(visible);
			            }
		        	}
		        	else {
			        	if(MA.map.getZoom() < 9 && markers.length > 500) {
			        		return;
			        	}
			        	else {
				            var markers = $proxLayer.data('labelmarkers');
				            var length = markers.length > 500 ? 500 : markers.length;
				            for (var i = 0; i < length; i++)
				            {
				                markers[i].setVisible(visible);
				            }
				        }
				    }
		        }
		    }
		    catch (err) {}
		}

		function editShapeLayer (id) {
			LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
            clearGeometryInfo();
            $('#CreateTerritoryPopup').data({
                'territory-id': id
            });
            getboundaryInfo();
		}
		
		function addShapeClickEvents(shape) {
		    google.maps.event.addListener(shape, 'click', function (e) {
                proximityLayer_Click({ position: e.latLng, type: 'polygon', shape: shape });
            });
            google.maps.event.addListener(shape, 'rightclick', function (e) {
                Shape_Context.call(this, e);
            });
		}

		function drawShapeLayer (options)
		{
		    try {  totango.track('Plot Shape Layer', 'MapAnything'); } catch(err) { }
		    
            //BEGIN MA ANALYTICS
            jQuery.ajax({
                url: '/apex/MATreeAJAXResources?action=store_layer_analytics&track=true&subtype=Shape Layer&id=' + options.id,
                type: 'GET',
                dataType: 'JSON',
            }).done ( function (res) {
                //console.log(res);
                if(NewLayerNavigationEnabled()) {
                    MALayers.loadRecent();
                }
            }).error ( function(err) {
                //console.log(err);
            });
            //END MA ANALYTICS
		    
			//create shape layer
			var $shapeLayer;
			if(options.refresh == true) {
				$shapeLayer = options.shapeLayer;
				$shapeLayer.removeData();
				$shapeLayer.data('proxObjects', []);
				//reset checkboxes to default 
				$shapeLayer.find('#hide-shape').attr('checked',true);
				$shapeLayer.find('#toggle-dissolve, #toggle-labels').removeAttr('checked');
			}
			else {
				$shapeLayer = $('#templates .PlottedShapeLayer').clone().data({
					proxObjects: [],
					calculateTerritoryAggregates: false
				});
			}
			
			$shapeLayer.addClass('loading');
			$shapeLayer.find('.shape-icon').hide();
            $shapeLayer.find('.loading-icon').show();
			//$shapeLayer.find('.loadMask').show();
			$shapeLayer.find('.status').text('Loading...');
			
			var popupData = {
			    description: '',
			    modifiedBy: '',
			    createdBy: '',
			    name: ''
			};
		    
		    //added qid for listview		
        	var qid = Date.now().getTime() + 'shapeprox';				
        	$shapeLayer.data('qid', qid);				
        	$shapeLayer.attr('qid', qid);
		    
            if(options.customShape) {
                //get the shape
                MACustomShapes.getShapeInfo({ id: options.id}).then(function(response) {
                    if(response.success) {
                        var territory = removeNamespace('{!namespace}', response.data.territory);
                        var geometry = removeNamespace('{!namespace}', response.data.territory.Geometries__r.records[0]);
                        $shapeLayer.data('territoryData',territory);
                        
                        $shapeLayer.attr('data-id',territory.Id);
                        
                        popupData.description = response.data.territory.Description__c || 'No description.';
                        popupData.modifiedBy = response.data.territory.LastModifiedBy.Name + ', ' + response.data.territory.LastModifiedDate;
                        popupData.createdBy = response.data.territory.CreatedBy.Name + ', ' + response.data.territory.CreatedDate;
                        popupData.name = response.data.territory.Name;
            
                        //create some options to create the shapeLayer template
                        var jsonGeo = JSON.parse(geometry.Geometry__c);
                        var terrOpts = JSON.parse(territory.Options__c);
                        //add color options
                        jsonGeo['colorOptions'] = terrOpts.colorOptions;
                        
                        //add label to territory
    		        	var territoryName = territory.Name;
    		        	var territoryDescription = (territory.Description__c == null) ? '' : territory.Description__c;
    		        	$shapeLayer.find('.basicinfo-name').text(territoryName);
                        
    		        	$shapeLayer.find('.adminlevels').empty();
    		        	$shapeLayer.find('.adminlevels').append($("<div style='color:#A0A0A0;'></div>").text('Shapes: 1 ' + jsonGeo.proximityType));
    		        	$shapeLayer.find('.basicinfo-totalGeometry').text(1 + ' boundary');
    		        	
    		        	//update the icon
    		        	var $territoryIcon = $('#TerritoryBuilder-Templates .svg-shape-icon').clone().wrap('<div/>').parent().html()
    							.replace(/__BorderColor__/g, jsonGeo.colorOptions.borderColor)
    							.replace(/__FillColor__/g, jsonGeo.colorOptions.fillColor);
    					$shapeLayer.find('.color-box').replaceWith($territoryIcon);
    					$shapeLayer.find('.svg-shape-icon').hide();
                        
                        //hide watermark
    					$('#Slider-PlottedSavedQueries .plotted-watermark').hide();
    					
    					//create the shape layer
    					var proxObjects = $shapeLayer.data('proxObjects');
    					switch (jsonGeo.proximityType) 
                        {
        					case 'Circle' :
    					    
        					    //get the center and radius
        					    var center = new google.maps.LatLng(parseFloat(jsonGeo.center.lat), parseFloat(jsonGeo.center.lng));
        					    
        					    //create a prox circle and add it to the map
                                var shape = new google.maps.Circle({
                                    map: MA.map,
                                    center: center,
                                    radius: jsonGeo.radius,
                                    layerType: 'prox',
                                    strokeColor: jsonGeo.colorOptions.borderColor,
                                    strokeWeight: 3,
                                    strokeOpacity: 1,
                                    fillColor: jsonGeo.colorOptions.fillColor,
                                    fillOpacity: jsonGeo.colorOptions.fillOpacity,
                                    qid : qid,
                                    isCustom : true,
                                    label : territory.Name
                                });
                                addShapeClickEvents(shape);
                                proxObjects.push(shape);
                                
                                //create shape labels
    					        var labelMarker = MACustomShapes.createLabel(jsonGeo,terrOpts.colorOptions,shape,territory.Name);
    					        if (terrOpts.colorOptions.labelEnabled) {
    					            labelMarker.setMap(MA.map);
    					            $shapeLayer.find('#toggle-labels').attr('checked','checked');
    					        }
                                $shapeLayer.data('labelmarkers',[labelMarker]);
                                
                                if(options.enableEdit) {
                                    //get the shape, just the first one for now
                                    shape.setEditable(true);
                                }
                                
                                break;
                            
                            case 'Polygon' :
                                if(jsonGeo.points) {
                                    var shape = new google.maps.Polygon({
                                        paths: jsonGeo.points,
                                        strokeColor: jsonGeo.colorOptions.borderColor,
                                        strokeOpacity: 0.8,
                                        strokeWeight: 3,
                                        fillColor: jsonGeo.colorOptions.fillColor,
                                        fillOpacity: jsonGeo.colorOptions.fillOpacity,
                                        map : MA.map,
                                        qid : qid,
                                        isCustom : true,
                                        label : territory.Name
                                    });
                                    addShapeClickEvents(shape);
                                    proxObjects.push(shape);
                                }
                                
                                //create shape labels
    					        var labelMarker = MACustomShapes.createLabel(jsonGeo,terrOpts.colorOptions,shape,territory.Name);
    					        if (terrOpts.colorOptions.labelEnabled) {
    					            labelMarker.setMap(MA.map);
    					            $shapeLayer.find('#toggle-labels').attr('checked','checked');
    					        }
                                $shapeLayer.data('labelmarkers',[labelMarker]);
                                
                                if(options.enableEdit) {
                                    //get the shape, just the first one for now
                                    shape.setEditable(true);
                                }
                                
                                break;
                            case 'Rectangle' : 
                                if(jsonGeo.bounds) {
                                    //create the lat lng bounds
                                    var bounds = new google.maps.LatLngBounds(
                                        new google.maps.LatLng(jsonGeo.bounds.SW.lat,jsonGeo.bounds.SW.lng),
                                        new google.maps.LatLng(jsonGeo.bounds.NE.lat,jsonGeo.bounds.NE.lng)
                                    );
                                    
                                    var shape = new google.maps.Rectangle({
                                        strokeColor: jsonGeo.colorOptions.borderColor,
                                        strokeOpacity: 0.8,
                                        strokeWeight: 3,
                                        fillColor: jsonGeo.colorOptions.fillColor,
                                        fillOpacity: jsonGeo.colorOptions.fillOpacity,
                                        map : MA.map,
                                        bounds : bounds,
                                        qid : qid,
                                        isCustom : true,
                                        label : territory.Name
                                    });
                                    addShapeClickEvents(shape);
                                    proxObjects.push(shape);
                                }
                                
                                //create shape labels
    					        var labelMarker = MACustomShapes.createLabel(jsonGeo,terrOpts.colorOptions,shape,territory.Name);
    					        if (terrOpts.colorOptions.labelEnabled) {
    					            labelMarker.setMap(MA.map);
    					            $shapeLayer.find('#toggle-labels').attr('checked','checked');
    					        }
                                $shapeLayer.data('labelmarkers',[labelMarker]);
                                
                                if(options.enableEdit) {
                                    //get the shape, just the first one for now
                                    shape.setEditable(true);
                                }
                                
                                break;
                            default:
                                break;
    					}
    					
    					//hide dissolve, not supported
    					$shapeLayer.find('#toggle-dissolve').closest('li').remove();
    					
    					//handle drop down menus
    					if(options.refresh != true) {
    						$shapeLayer.on('click','.refresh-shape',function(event) {
    							$shapeLayer.find('.svg-shape-icon').hide();
        						$shapeLayer.find('.loading-icon').show();
    
    							//unrender shape
    							unrenderThis($shapeLayer);
    
    							var op = {
    								shapeLayer : $shapeLayer,
    								id : options.id,
    								refresh : true,
    								customShape : true
    							}
    							drawShapeLayer(op);
    						});
    
    						function unrenderThis ($proxLayer) {
    							try { $proxLayer.data('dataLayer').setMap(null); } catch (err) {}
    						    try { $proxLayer.data('kmlLayer').hideDocument(); } catch (err) {}
    						    try { $proxLayer.data('proxObject').setMap(map); } catch (err) {}
    						    try { $.each($proxLayer.data('proxObjects'), function (i, proxObject) { proxObject.setMap(map); }); } catch (err) {}
    						    //check if show labels is checked
    						    if($proxLayer.find('#toggle-labels').attr('checked') == 'checked') {
    							    try 
    							    { 
    							        if ($proxLayer.data('labelmarkers')) 
    							        {
    							            var markers = $proxLayer.data('labelmarkers');
    							            
    							            for (var i = 0; i < markers.length; i++)
    							            {
    							                markers[i].setVisible(false);
    							            } 
    							        }
    							    }
    								catch (err) {}
    						   	}
    						}
    					}
    					
    					//remove loading mask and show results
    		    		$shapeLayer.find('.status').remove();
    		    		$shapeLayer.find('.adminlevels').css('display','inline-block');
    		    		$shapeLayer.find('.zipinfo').show();
    					$shapeLayer.find('.countyinfo').show();
    					$shapeLayer.find('.stateinfo').show();
    		    		$shapeLayer.removeClass('loading');
    		    		$shapeLayer.find('.svg-shape-icon').show();
        				$shapeLayer.find('.loading-icon').hide();
    		    		$shapeLayer.find('.loadMask').hide();
                    }
                    else {
                        console.log(response);
                    }
                });
            }
		    
		    else {
    			//send request for territory info
    			$.ajax({
    				url: MA.resources.Territory+'?securityToken='+securityToken+'&action=getTerritory',
    		        type: 'POST',
    		        dataType: 'JSON',
    		        data: { id: options.id},
    		        success: function (response) {
    		        	removeNamespace('{!namespace}', response.data.territory);
    		        	removeNamespace('{!namespace}', response.data.territory.Geometries__r.records[0]);
                        
                        popupData.description = response.data.territory.Description__c || 'No description.';
                        popupData.modifiedBy = response.data.territory.LastModifiedBy.Name + ', ' + response.data.territory.LastModifiedDate;
                        popupData.createdBy = response.data.territory.CreatedBy.Name + ', ' + response.data.territory.CreatedDate;
                        popupData.name = response.data.territory.Name;
                        
    
    		        	//add label to territory
    		        	var territoryName = response.data.territory.Name;
    		        	var territoryDescription = (response.data.territory.Description__c == null) ? '' : response.data.territory.Description__c;
    		        	$('#CreateTerritoryPopup .territory-name').val(territoryName);
    		        	$('#CreateTerritoryPopup .territory-description').val(territoryDescription);
    		        	
    					//grab colors
    		        	var Options = JSON.parse(response.data.territory.Options__c);
    		        	var country = Options.country || 'USA';
    		        	var fillColor = Options.colorOptions.fillColor;
    		        	var borderColor = Options.colorOptions.borderColor;
    		        	var fillOpacity = Options.colorOptions.fillOpacity || 0.2;
    		        	
    		        	var labelEnabled        = Options.colorOptions.labelEnabled        || false;
                        var labelOverride       = Options.colorOptions.labelOverride       || '';
                        var labelJustification  = Options.colorOptions.labelJustification  || 'center';
                        var labelFontSize       = Options.colorOptions.labelFontSize       || '10px';
                        var labelFontColor      = Options.colorOptions.labelFontColor      || '#FFFFFF';
                        var labelBGColor        = Options.colorOptions.labelBGColor        || '#000000';
                        var labelBGOpacity      = Options.colorOptions.labelBGOpacity      || '0.2';
    
                        if(options.refresh) {
                        	labelEnabled = options.showLabels;
                        }
    		        	
    		        	//grab advanced options
    		        	var advancedOptions = $.extend({
    		        		calculateTerritoryAggregates: false, 
    		        		dissolveGeometry: false
    		        	}, Options.advancedOptions);
    					
    					//hide watermark
    					$('#Slider-PlottedSavedQueries .plotted-watermark').hide();
    					
    					//build shape Layer Wrapper
    					//$shapeLayer.data('calculateTerritoryAggregates', advancedOptions.calculateTerritoryAggregates);
    					$shapeLayer.find('.basicinfo-name').text(territoryName);
    					var rgb = hexToRgb(fillColor);
    					
    					//build array for all territories
    					var geometry = JSON.parse(response.data.territory.Geometries__r.records[0].Geometry__c);
    					var boundaryRequest = 0;
    					var allBoundaries = [];
    					$shapeLayer.find('.adminlevels').empty();
    					$.each(geometry, function (adminLevel, boundaries) {
    					
    						//legacy support for old admin level keys
    						if (adminLevel == 'states') { adminLevel = '1'; }
    						else if (adminLevel == 'counties') { adminLevel = '2'; }
    						else if (adminLevel == 'zips') { adminLevel = '4'; }
    					
    						//legacy support for old county ids
    						if (country == 'USA' && adminLevel == '2') {
    							$.each(boundaries, function (index, boundary) {
    								if (boundary.indexOf('USA-2-') == 0) {
    									allBoundaries.push(boundary);
    								}
    								else {
    									allBoundaries.push('USA-2-' + boundary.substring(4));
    								}
    							});
    						}
    						else {
    							allBoundaries = allBoundaries.concat(boundaries);
    						}
    						
    						var adminLevelMetadata = MA.TM.countries[country].adminLevels[adminLevel];
    						$shapeLayer.find('.adminlevels').append($("<div style='color:#A0A0A0;'></div>").text(adminLevelMetadata.pluralLabel + ': ' + boundaries.length));
    					});
    					
    					//create svg icon
    					var $territoryIcon = $('#TerritoryBuilder-Templates .svg-shape-icon').clone().wrap('<div/>').parent().html()
    							.replace(/__BorderColor__/g, borderColor)
    							.replace(/__FillColor__/g, fillColor);
    					$shapeLayer.find('.color-box').replaceWith($territoryIcon);
    					$shapeLayer.find('.svg-shape-icon').hide();
    					
    					
    					//show info for selected geometry
    					$shapeLayer.find('.basicinfo-totalGeometry').text(allBoundaries.length + ' boundaries');
                        
                        
    					//create a data layer for this shape layer that will store the features
    					var style = { strokeColor: borderColor, strokeWeight: 2, fillColor: fillColor, fillOpacity: fillOpacity, layer: $shapeLayer, layerType: 'prox', label: '', proxType: advancedOptions.dissolveGeometry ? null : $shapeLayer.find('.basicinfo-name').text() };
    					var hoverStyle = $.extend({}, style, { fillColor: '#000' });
    					var dataLayer = new google.maps.Data({
    						map: MA.map,
    						style: style
    					});
    					$shapeLayer.data('dataLayer', dataLayer);
    
    					//add event handlers
    					dataLayer.addListener('click', function (e) { proximityLayer_Click({ position: e.latLng, type: 'data', feature: e.feature }); });
    					dataLayer.addListener('rightclick', function (e) { Shape_Context.call(e.feature, e); });
    					dataLayer.addListener('mouseover', function (e) { this.overrideStyle(e.feature, hoverStyle); });
    					dataLayer.addListener('mouseout', function (e) { this.revertStyle(e.feature); });
    					
    					var dissolveGeo = advancedOptions.dissolveGeometry;
    					if(options.toggleDissolve != null) {
    		        		//update the dissolve options
    		        		dissolveGeo = options.toggleDissolve;
    		        	}
    					//loop over geometry and batch results
    					if (dissolveGeo)
    					{
    						$shapeLayer.find('#toggle-dissolve').attr('checked','checked');
    						//grab data using geoJSON
    						boundaryRequest++;
    			            GetDataFromServer({
    			                url: 'https://product-api-prod.cloudbilt.com/geometry/pindexv3.php',
    			                data: {
    			                	APIKey		: MA.APIKey,
    			                    dissolve    : true,
    			                    name        : $shapeLayer.find('.basicinfo-name').text(),
    			                    country     : country,
    			                    ids         : allBoundaries.join(','),
    			                    labelEnabled : true,
    			                    labelOverride : labelOverride,
    			                    labelposition : labelJustification,
    			                    labelFontSize : labelFontSize,
    			                    labelFontColor : labelFontColor,
    			                    labelBGColor : labelBGColor,
    			                    labelBGOpacity : labelBGOpacity
    			                },
    			                layer: $shapeLayer,
    			                complete: function (response) {
    			                    boundaryRequest--;
    			                }
    			            });
    					}
    					else 
    					{
    						while(allBoundaries.length > 0)
    						{
    							boundaryRequest++;
    							var boundariesBatch = allBoundaries.splice(0,5);
    							
    							//grab data using geoJSON
    							GetDataFromServer({
    								url: 'https://product-api-prod.cloudbilt.com/geometry/pindexv3.php',
    								data: {
    									APIKey	: MA.APIKey,
    									country	: country,
    									ids		: boundariesBatch.join(','),
    									labelEnabled : true,
        			                    labelOverride : labelOverride,
        			                    labelposition : labelJustification,
        			                    labelFontSize : labelFontSize,
        			                    labelFontColor : labelFontColor,
        			                    labelBGColor : labelBGColor,
        			                    labelBGOpacity : labelBGOpacity
    								},
    								layer: $shapeLayer,
    								complete: function (response) {
    									boundaryRequest--;
    								}
    							});
    						}
    					}
    					
    					//set an interval to wait for completion
    					var interval = setInterval(function () {
    				    	if(boundaryRequest == 0) {
    
    				    		//add metadata to each feature that can be used during click events
    							dataLayer.forEach(function (feature) {
    								feature.maData = { dataLayer: dataLayer };
    								feature.label = territoryName;
    								
    								//add qid to feature for listview		
    								feature.qid = qid;
    
    								feature.forEachProperty(function (val, prop) {
    									feature.maData[prop] = val;
    								});
    							});
    				    	
    				    		//remove loading mask and show results
    				    		$shapeLayer.find('.status').remove();
    				    		$shapeLayer.find('.adminlevels').css('display','inline-block');
    				    		$shapeLayer.find('.zipinfo').show();
    							$shapeLayer.find('.countyinfo').show();
    							$shapeLayer.find('.stateinfo').show();
    				    		$shapeLayer.removeClass('loading');
    				    		$shapeLayer.find('.svg-shape-icon').show();
                				$shapeLayer.find('.loading-icon').hide();
    				    		$shapeLayer.find('.loadMask').hide();
    				    		
    				    		//if labels are enabled, plot them
    				    		//always create marker, show hide in menu
    				    		if (true)
    				    		{
    				    		    var labelArray = $shapeLayer.data('labels');
    				    		    
    				    		    if (labelArray.length > 500)
                                    {
    				    		        MAShapeLayer.NeedMarkerBoundingEvents = true;
                                    }
    				    		    
                                    
                                    var markers = [];
                                    
                                    var ImageMarkerURL = 'https://product-api-prod.cloudbilt.com/marker/png2.php?fontcolor=' + encodeURIComponent(labelFontColor)
                    		            + '&bgcolor=' + encodeURIComponent(labelBGColor)
                    		            + '&bgopacity=' + encodeURIComponent(labelBGOpacity)
                    		            + '&fontsize=' + encodeURIComponent(labelFontSize);
    
                                    $.each( labelArray, function( index, value ) {
                                        
                                        var markerPosition = new google.maps.LatLng(parseFloat(value.lat),parseFloat(value.lng));
                                        var markerVisible = false;
                                        
                                        //check if this is a refresh and labels have been enabled
                                        if(options.refresh && options.showLabels) {
                                        	labelEnabled = true;
                                        }
                                        
                                        if (labelArray.length > 500)
                                        {
                                            //Check the zoom level, we only want to show markers (when above 500) when we are zoomed in close enough
                                            if (MA.map.getZoom() >= 9)
                                            {
                                                //Check if the marker is in view or not, if not let's not show it
                                                if (MA.map.getBounds().contains(markerPosition) && labelEnabled)
                                                {
                                                    markerVisible = true;
                                                }
                                            }
                                            if (labelEnabled) {
                                            	$shapeLayer.find('#toggle-labels').attr('checked','checked');
                                            }
                                        }
                                        else
                                        {
                                        	if(labelEnabled) {
                                            	markerVisible = true;
                                            	//update the checkbox on the shapelayer
                                                $shapeLayer.find('#toggle-labels').attr('checked','checked');
                                            }
                                        }
                                        
                                        
                                        
                                        var markerText = value.text;
                                        
                                        if (advancedOptions.dissolveGeometry && labelOverride != undefined && labelOverride != '' && labelOverride.replace(/ /g,'').length > 0)
                                        //if (advancedOptions.dissolveGeometry && labelOverride != undefined && labelOverride != '')
                                        {
                                            //markerText = labelOverride;
                                            markerText = value.text;
                                        }
                
                                        markerIcon = new google.maps.Marker({
                                                position: markerPosition,
                                                map: MA.map,
                                                icon: ImageMarkerURL + '&text=' + encodeURIComponent(markerText),
                                                clickable: false,
                                                visible: markerVisible
                                            });
                                        
                
                                          markers.push(markerIcon);
                
                                    });
                                	$shapeLayer.data('labelmarkers',markers);
    				    		    
    				    		}
    				    		
    				    		
    							clearInterval(interval);
    							//ChangeVisibilityWhenCircleIsAdded();
    
    							if(options.refresh != true) {
    								$shapeLayer.on('click','.refresh-shape',function(event) {
    									$shapeLayer.find('.svg-shape-icon').hide();
                						$shapeLayer.find('.loading-icon').show();
    
    									//unrender shape
    									unrenderThis($shapeLayer);
    
    									var op = {
    										shapeLayer : $shapeLayer,
    										id : options.id,
    										refresh : true
    									}
    									drawShapeLayer(op);
    								});
    
    								$shapeLayer.on('change','#toggle-dissolve',function(event) {
    									//unrender shape
    									$shapeLayer.find('.svg-shape-icon').hide();
                						$shapeLayer.find('.loading-icon').show();
    									unrenderThis($shapeLayer);
    									var checked = $(this).attr('checked') == 'checked' ? true : false;
    									var op = {
    										shapeLayer : $shapeLayer,
    										id : options.id,
    										toggleDissolve : checked,
    										showLabels : $shapeLayer.find('#toggle-labels').is(':checked'),
    										refresh : true
    									};
    									drawShapeLayer(op);
    								});
    
    								function unrenderThis ($proxLayer) {
    									try { $proxLayer.data('dataLayer').setMap(null); } catch (err) {}
    								    try { $proxLayer.data('kmlLayer').hideDocument(); } catch (err) {}
    								    try { $proxLayer.data('proxObject').setMap(map); } catch (err) {}
    								    try { $.each($proxLayer.data('proxObjects'), function (i, proxObject) { proxObject.setMap(map); }); } catch (err) {}
    								    //check if show labels is checked
    								    if($proxLayer.find('#toggle-labels').attr('checked') == 'checked') {
    									    try 
    									    { 
    									        if ($proxLayer.data('labelmarkers')) 
    									        {
    									            var markers = $proxLayer.data('labelmarkers');
    									            
    									            for (var i = 0; i < markers.length; i++)
    									            {
    									                markers[i].setVisible(false);
    									            } 
    									        }
    									    }
    										catch (err) {}
    								   	}
    								}
    							}
    				    	}
    				    }, 100);
    				}
    			});
		    }
		    
		    if (NewLayerNavigationEnabled())
            {
                MALayers.moveToTab('plotted');
                //hide plotted query tab watermark
                $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
            }
            else
            {
                //go to layer tab
				if($('#sidebar-content #tabs-nav-plotted').hasClass('tab-open'))
				{
					//do nothing tab already selected
				}
				else
				{
					//click tab to show results
      				$('a[href="#tab-plotted"]').click();
				}
                
            }
		    
		    //remove shapeLayer on close button click
			if(options.refresh != true) {
				$shapeLayer.on('click', '.btn-remove', function()
				{
					//remove the listview tab		
					MAListView.RemoveTab(qid);
					//$shapeLayer.find('.loadMask').show();
					$shapeLayer.find('.svg-shape-icon').hide();
    				$shapeLayer.find('.loading-icon').show();
					$shapeLayer.find('.drop-menu-wrapper,.glyphicon-remove-circle').css('visibility','hidden');
					removeProximityLayer($shapeLayer);
				});

				$shapeLayer.on('mouseenter','.drop-menu-wrapper',function(event) {

					var $button = $(this);
		            var menuItemPos = $button.position();
		            //get position to show menu
		            var topPos = menuItemPos.top + 25; //+25px for button size
					if($button.is('.shape-visibility')){
						$shapeLayer.find('.shape-menu-visibility').css('top',topPos);
						$shapeLayer.find('.plotted-visibile-icon, .shape-menu-visibility').addClass('active');
					}
					else if ($button.is('.shape-options')) {
						$shapeLayer.find('.shape-menu-options').css('top',topPos);
						$shapeLayer.find('.plotted-menu-icon, .shape-menu-options').addClass('active');
					}
				});
				$shapeLayer.on('mouseleave','.drop-menu-wrapper',function(event) {
					$('.drop-down-menu, .btn-lg').removeClass('active');
				});

				$shapeLayer.on('click', '.fit-shape',function () {
					var bounds = new google.maps.LatLngBounds();
                    //shape layers
	                function processPoints(geometry, callback, thisArg) {
	                    if (geometry instanceof google.maps.LatLng) {
	                        callback.call(thisArg, geometry);
	                    }
	                    else if (geometry instanceof google.maps.Data.Point) {
	                        callback.call(thisArg, geometry.get());
	                    } 
	                    else {
	                        geometry.getArray().forEach(function(g) { processPoints(g, callback, thisArg); });
	                    }
	                }
	                
	                if(options.customShape) {
                        try {
                            $shapeLayer.data('proxObjects').forEach(function (shape) {
                                try {
                                    //circle/rectangle
                                    var bound = shape.getBounds();
                                    bounds.union(bound);
                                }
                                catch (e) {
                                    //polygon
                                    var path = shape.getPath();
                                    var arr = path.getArray();
                                    for(i=0; i < arr.length; i++) {
                                        var point = arr[i];
                                        var latlng = new google.maps.LatLng(point.lat(),point.lng());
                                        bounds.extend(latlng);
                                    }
                                }
                            });
                            
                            MA.map.fitBounds(bounds);
                        }
                        catch (err) { MA.log('Unable to include data layer in zoom to fit calculation', err); }
                    }
                    else {
    	                try {
                            $shapeLayer.data('dataLayer').forEach(function (feature) {
                                processPoints(feature.getGeometry(), bounds.extend, bounds);
    
                                MA.map.fitBounds(bounds);
                            });
                        }
                        catch (err) { MA.log('Unable to include data layer in zoom to fit calculation', err); }
                    }
				});
        
				//show hide shape layer on change event
				$shapeLayer.on('change','#hide-shape',function(event) {
					var checked = $(this).attr('checked') == 'checked' ? true : false;
					showHideShapeLayer($shapeLayer,checked);
				});

				//show hide shape layer label(s) on change event
				$shapeLayer.on('change','#toggle-labels',function(event) {
					if($shapeLayer.find('#hide-shape').is(':checked')) {
						var checked = $(this).attr('checked') == 'checked' ? true : false;
						showHideShapeLabels($shapeLayer,checked);
					}
				});

				if(!IsCorporateAdmin && options.modify == false) {
					$shapeLayer.find('.edit-shape').remove();
				}
				else {
					$shapeLayer.on('click','.edit-shape',function(event) {
					    if(options.customShape) {
					        //open popup
					        MACustomShapes.openPopupSidebar({id : options.id});
					    }
					    else {
					        LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
    			            clearGeometryInfo();
    			            $('#CreateTerritoryPopup').data({
    			                'territory-id': options.id
    			            });
    			            getboundaryInfo();
					    }
					});
				}

				$shapeLayer.prependTo('#PlottedQueriesTable');
			}
			
			$shapeLayer.data('popupData', popupData);
			
			return $shapeLayer;
		}
		
		function GetDataFromServer(options)
		{
		   
		    
			//make ajax call
			$.ajax({
				type: 'POST',
				url: options.url,
				dataType: 'JSON',
				data: options.data || {},
				success: function (response)
				{
					//build geoJSON return values and add to map
					options.layer.data('dataLayer').addGeoJson(response.data);
					
					//Are labels enabled? If so let's plot them
					if (options.data.labelEnabled)
					{
					    var labelArray = [];
					    
					    //Since we send mulipule request if the shape layer isn't dissovlved, let's check to make sure we are making one large array
					    if (options.layer.data('labels')) {
                            labelArray = labelArray.concat(options.layer.data('labels'));
                        }
                        
                        //add the labels from the ajax response
                        labelArray = labelArray.concat(response.labels);
					    
					    //store back against the object
					    options.layer.data('labels',labelArray);

					}
					
					
					
					//return the created polygons for batch completion
					options.complete({ 
						success: true, 
						a1count: response.a1count,
						a1label: response.a1label,
						a2count: response.a2count,
						a2label: response.a2label, 
						a3count: response.a3count,
						a3label: response.a3label
					});
					
				},
				error: function (response) { MALog(response); }
			});
		}
				
		function getboundaryInfo(options) 
		{
			//default options
			options = $.extend({
				forClone: false
			}, options || {});
		
			//show loading
			showLoading($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'), 'Loading...');
			
			//if this is a clone, we need to remove the territory id (so an insert is performed)
			var territoryId = $('#CreateTerritoryPopup').data('territory-id');
			if (options.forClone) {
				$('#CreateTerritoryPopup').removeData('territory-id');
			}

			//send request for territory info
			$.ajax({
				url: MA.resources.Territory+'?securityToken='+securityToken+'&action=getTerritory',
		        type: 'POST',
		        dataType: 'JSON',
		        data: { id: territoryId },
		        success: function (response) {
		        	removeNamespace('{!namespace}', response.data.territory);
		        	removeNamespace('{!namespace}', response.data.territory.Geometries__r.records[0]);
		        
		        	//add label and system info to territory
		        	$('#CreateTerritoryPopup .territory-name').val(response.data.territory.Name);
		        	$('#CreateTerritoryPopup .territory-description').val((response.data.territory.Description__c == null) ? '' : response.data.territory.Description__c);
		        	$('#CreateTerritoryPopup .systeminfo').text('***Created By ' + response.data.territory.CreatedBy.Name + ' on ' + moment(response.data.territory.CreatedDate).format(formatUserLocaleDate({ moment: true })) + ', Modified By ' + response.data.territory.LastModifiedBy.Name + ' on ' + moment(response.data.territory.LastModifiedDate).format(formatUserLocaleDate({ moment: true })));
		        	
		        	//grab colors
		        	var Options = JSON.parse(response.data.territory.Options__c) || { country: 'USA', colorOptions: { fillColor: '#223388', borderColor: '#882233', fillOpacity: 0.2 } };
		        	var country = Options.country || 'USA';
		        	var fillColor = Options.colorOptions.fillColor;
		        	var borderColor = Options.colorOptions.borderColor;
		        	var fillOpacity = Options.colorOptions.fillOpacity || 0.2;
		        	
		        	$('#CreateTerritoryPopup .territory-country').val(country).change();
		        	$('#CreateTerritoryPopup .fillcolor')[0].color.fromString(fillColor);
		        	$('#CreateTerritoryPopup .bordercolor')[0].color.fromString(borderColor);
		        	$('#CreateTerritoryPopup .fillopacity').val(fillOpacity);
		        	
		        	
		        	//New Options added on 4/7/2015
		        	var labelEnabled        = Options.colorOptions.labelEnabled        || false;
		        	var labelOverride       = Options.colorOptions.labelOverride       || '';
		        	var labelJustification  = Options.colorOptions.labelJustification  || 'center';
		        	var labelFontSize       = Options.colorOptions.labelFontSize       || '10px';
		        	var labelFontColor      = Options.colorOptions.labelFontColor      || '#FFFFFF';
		        	var labelBGColor        = Options.colorOptions.labelBGColor        || '#000000';
		        	var labelBGOpacity      = Options.colorOptions.labelBGOpacity      || '0.2';
		        	
		        	$('#shapelayer-label-enabled').attr('checked', labelEnabled);
		        	$('#shapelayer-label-override').val(labelOverride);
		        	$('#shapelayer-label-justification').val(labelJustification);
		        	$('#shapelayer-label-font-size').val(labelFontSize);
		        	$('#shapelayer-label-font-color')[0].color.fromString(labelFontColor);
		        	$('#shapelayer-label-bg-color')[0].color.fromString(labelBGColor);
		        	$('#shapelayer-label-bg-opacity').val(labelBGOpacity);
		        
		        	
		        	//grab advanced options
		        	Options.advancedOptions = $.extend({
		        		calculateTerritoryAggregates: false, 
		        		dissolveGeometry: false
		        	}, Options.advancedOptions);
		        	$('#CreateTerritoryPopup .calculate-territory-aggregates').attr('checked', false);// Options.advancedOptions.calculateTerritoryAggregates);
		        	$('#CreateTerritoryPopup .dissolve-geometry').attr('checked', Options.advancedOptions.dissolveGeometry);
		        	
		        	//determine which data types we need to request boundary data for
		        	var geometry = JSON.parse(response.data.territory.Geometries__r.records[0].Geometry__c);
		        	var ids = [];
		        	if (geometry) {
		        		$.each(geometry, function (adminLevel, boundaries) 
		        		{
							//legacy support for old admin level keys
							if (adminLevel == 'states') { adminLevel = '1'; }
							else if (adminLevel == 'counties') { adminLevel = '2'; }
							else if (adminLevel == 'zips') { adminLevel = '4'; }
		        		
		        			//legacy support for old county format
		        			if (country == 'USA' && adminLevel == '2') {
		        				$.each(boundaries, function (index, boundary) {
		        					if (boundary.indexOf('USA-2-') == 0) {
		        						ids.push(boundary);
		        					}
		        					else {
		        						ids.push('USA-2-' + boundary.substring(4));
		        					}
		        				});
		        			}
		        			else {
		        				ids = ids.concat(boundaries);
		        			}
		        		});
		        	}

					//send requests for each geometry type to populate the selected boundaries
		        	$.ajax({
						url: 'https://product-api-prod.cloudbilt.com/boundaries/pinfo.php',
						//url: location.protocol + "//" + location.hostname + "/services/proxy",
						type: 'POST',
						dataType: 'JSON',
						data: {
							OrgId		: '{!$Organization.Id}',
							APIKey		: MA.APIKey,
							action		: 'lookup',
							country		: $('.territory-country').val(),
							ids			: ids.join(',')
						},
						success: function (response)
						{
							//loop over the returned data and populate the selection grid
							$.each(response.data || [], function (index, boundary) {
								selectedGeometry[boundary.uniqueid] = { adminLevel: boundary.level, title: boundary.uniquelabel, subtitle: '' };
							});
							
							//refresh summary data and hide loading
							refreshBoundarySelectionSummaries();
							$('.selection-aggregates span[data-adminlevel="all"]').click();
							hideMessage($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'));
						},
						error: function (req, status, msg) 
						{
							MA.log(msg);
							hideMessage($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'));
						}/*,
						beforeSend: function (xhr) {
							xhr.setRequestHeader('SalesforceProxy-Endpoint', 'https://product-api-prod.cloudbilt.com/boundaries/pinfo.php');
							xhr.setRequestHeader('Authorization', 'OAuth ' + MA.SessionId);
							xhr.setRequestHeader('X-User_Agent', 'salesforce-toolkit-rest-javascript/v31.0');
						}*/
					});//end boundary request
		       	},
		       	error: function (req, status, msg) {
		       		MA.log(msg);

		       	}
			});
		}
		
		function deleteboundary(obj)
		{
			$.ajax({
	            url: MA.resources.Territory+"?securityToken={!securityToken}&action=deleteTerritoryFolder&core.apexpages.devmode.url=0",
	            type: 'POST',
	            dataType: 'JSON',
	            data: {folderId : $(obj).attr('id')},
	            success: function (response)
	            {
	            	//do nothing 
				}
			});
		}
		
		function saveBoundary(plotAfterSave)
		{
			//check for name and proper values
			if($('#CreateTerritoryPopup .territory-name').val() == '') {
				alert('Please enter a label for this shape layer.');
			}
			else
			{
				//show saving 
				showLoading($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'), 'Saving...');
				
				//check for folder and user permissions
				var userId;
				var folderId;
				var territoryId;
				if ($('#CreateTerritoryPopup').data('territory-id')) {
					territoryId = $('#CreateTerritoryPopup').data('territory-id');
				}
				else 
				{
					if($('#CreateTerritoryPopup').data('folder-id') == 'PersonalRoot' || $('#CreateTerritoryPopup').data('folder-id') == 'RoleUserFolder') {
						userId = '{!$User.Id}';
					}
					else if ($('#CreateTerritoryPopup').data('folder-id') == 'CorporateRoot') {
						//send nothing for corporate root
					}
					else {
						folderId = $('#CreateTerritoryPopup').data('folder-id');
					}
				}
				
				//build the geometry to save
				var geometrySelection = {};
				$.each(selectedGeometry, function (value, boundary) {
					geometrySelection[boundary.adminLevel] = geometrySelection[boundary.adminLevel] || [];
					geometrySelection[boundary.adminLevel].push(value);
				});
				
				//build options
				var options = {
					country: $('#CreateTerritoryPopup .territory-country').val(),
					advancedOptions: {
						calculateTerritoryAggregates: false,//$('#CreateTerritoryPopup .calculate-territory-aggregates').is(':checked'),
						dissolveGeometry: $('#CreateTerritoryPopup .dissolve-geometry').is(':checked')
					}
				};
				var colorOptions = {
					fillColor: $('#CreateTerritoryPopup .fillcolor').val(),
					borderColor: $('#CreateTerritoryPopup .bordercolor').val(),
					fillOpacity: $('#CreateTerritoryPopup .fillopacity').val(),
					
					labelEnabled: $('#shapelayer-label-enabled').is(':checked'),
					labelOverride: $('#shapelayer-label-override').val(),
					labelJustification: $('#shapelayer-label-justification').val(),
					labelFontSize: $('#shapelayer-label-font-size').val(),
					labelFontColor: $('#shapelayer-label-font-color').val(),
					labelBGColor: $('#shapelayer-label-bg-color').val(),
					labelBGOpacity: $('#shapelayer-label-bg-opacity').val(),
				};
				options.colorOptions = colorOptions;
				
				//serialize data to send in ajax call
				var data = { 
					serializedTerritory : JSON.stringify(addNamespace('{!namespace}', {
						Name : $('#CreateTerritoryPopup .territory-name').val(),
						Description__c : $('#CreateTerritoryPopup .territory-description').val(),
						User__c : userId,
						Folder__c : folderId,
						Id : territoryId,
						Options__c : JSON.stringify(options)
					})),
					serializedGeometry : JSON.stringify(addNamespace('{!namespace}', {
						Name : $('#CreateTerritoryPopup .territory-name').val() + '-geometry',
						Geometry__c : JSON.stringify(geometrySelection)
					}))
				};
				
				//save info and close popup
				$.ajax({
		            url: MA.resources.Territory+"?securityToken={!securityToken}&action=saveBoundaryInfo&core.apexpages.devmode.url=0",
		            type: 'POST',
		            dataType: 'JSON',
		            data: data,
		            success: function (response) {
		            	if (!response.success) {
		            		showError($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'), 'Unable to save.  Please remove some boundaries and try again.');
		            		return;
		            	}
		            	
		            	removeNamespace('{!namespace}', response.data);
		            
		            	//grab color options
		            	var options = JSON.parse(response.data.Options__c);
		            	var colorOptions = options.colorOptions;
		            	
		            	//hide saving
		            	hideMessage($('#CreateTerritoryPopup .territory-popup.loadmask-wrapper'));
		            	
		            	
		            	if (NewLayerNavigationEnabled())
		            	{
		            	    MALayers.refreshFolder();
		            	}
		            	else
		            	{
    		            	//add to tree or update
    		            	if ($('#CreateTerritoryPopup').data('territory-id'))
    		            	{
    		            		//update
    		            		var $node = $('#SQTree li[id="'+response.data.Id+'"]');
    		            		$node.attr('iconcolor', colorOptions.fillColor);
    		            		$("#SQTree").jstree('rename_node', '#' + $('#CreateTerritoryPopup').data('territory-id') , response.data.Name);
    		            		updateIcon($node);
    		            	}
    		            	else
    		            	{
    		            		if ($('#CreateTerritoryPopup').data('folder-id') == 'RoleUserFolder') {
    		            			$("#SQTree").jstree("create","#" + $('#CreateTerritoryPopup').data('folder-id-actual'),"last",{attr : {id: response.data.Id, iconcolor: colorOptions.fillColor, NodeType: 'PersonalTerritory', rel: 'SavedTerritory', title: response.data.Name}, data: response.data.Name},null,true);
    		            		}
    		            		else {
    		            			$("#SQTree").jstree("create","#" + $('#CreateTerritoryPopup').data('folder-id'),"last",{attr : {id: response.data.Id, iconcolor: colorOptions.fillColor, NodeType: 'PersonalTerritory', rel: 'SavedTerritory', title: response.data.Name}, data: response.data.Name},null,true);
    		            		}
    						}
		            	}
						
						//clear out all info and close popup
		            	ClosePopupWindow();
		            	clearGeometryInfo();
		            	
		            	//plot layer if needed
		            	if (plotAfterSave) {
		            		drawShapeLayer({ id : response.data.Id });
		            	}
					}
				});
			}
		}
		
		function clearCustomShapeInfo() {
		    selectedGeometry = {};
			$('#CustomShapePopup .folders-tab').show();
            $('#CustomShapePopup a[href="#tab-folders"]').click();
			$('#CustomShapePopup').removeData();
			$('#CustomShapePopup .shape-name').val('');
			$('#CustomShapePopup .shape-description').val('');
			$('#CustomShapePopup .systeminfo').text('');
			$('#CustomShapePopup .search-input').val('').blur();
			$('#CustomShapePopup .fillcolor')[0].color.fromString('#223388');
		    $('#CustomShapePopup .bordercolor')[0].color.fromString('#882233');
		    $('#CustomShapePopup .fillopacity').val('0.2');
		    
		    $('#custom-shapelayer-label-enabled').attr('checked', false);
        	$('#custom-shapelayer-label-override').val('');
        	$('#custom-shapelayer-label-justification').val('center');
        	$('#custom-shapelayer-label-font-size').val('10px');
        	$('#custom-shapelayer-label-font-color')[0].color.fromString('#FFFFFF');
        	$('#custom-shapelayer-label-bg-color')[0].color.fromString('#000000');
        	$('#custom-shapelayer-label-bg-opacity').val('0.3');
        	
        	$( "#CustomShapePopup #tabs" ).tabs({
              disabled: []
            });
            $( "#CustomShapePopup #tabs" ).tabs( "option", "active", 0 );
            $('#CustomShapePopup .maPopupLoading').addClass('hidden');
		}
		
		function clearGeometryInfo()
		{
			selectedGeometry = {};
			$('a[href="#tab-geometry"]').click();
			$('#CreateTerritoryPopup').removeData();
			$('#CreateTerritoryPopup .territory-name').val('');
			$('#CreateTerritoryPopup .territory-description').val('');
			$('#CreateTerritoryPopup .systeminfo').text('');
			$('#CreateTerritoryPopup .search-input').val('').blur();
			$('#CreateTerritoryPopup .search-table-watermark').show();
			$('#CreateTerritoryPopup .fillcolor')[0].color.fromString('#223388');
		    $('#CreateTerritoryPopup .bordercolor')[0].color.fromString('#882233');
		    $('#CreateTerritoryPopup .fillopacity').val('0.2');
		    $('#CreateTerritoryPopup .calculate-territory-aggregates').attr('checked', false);
			$('.search-table-wrapper .boundary-row, .search-table-selection .boundary-row').remove();
			$('#CreateTerritoryPopup .autocomplete-selection').remove();
			$('#CreateTerritoryPopup .search-type').first().click();

        	
        	$('#shapelayer-label-enabled').attr('checked', false);
        	$('#shapelayer-label-override').val('');
        	$('#shapelayer-label-justification').val('center');
        	$('#shapelayer-label-font-size').val('10px');
        	$('#shapelayer-label-font-color')[0].color.fromString('#FFFFFF');
        	$('#shapelayer-label-bg-color')[0].color.fromString('#000000');
        	$('#shapelayer-label-bg-opacity').val('0.3');
			
			
			refreshBoundarySelectionSummaries();
		}
	
	</script>
	
	<!-- Create Custom Shape Popup -->
    <div id="CustomShapePopup" class="popup_block maPopup" style='height: 600px;'>
        <div class="maPopupLoading hidden" style="height: 600px;width: 96%;opacity: 1;background: rgba(192, 192, 192, 0);">
           <div class="loading-wrapper" style="position: absolute;top: 50%;width: 100%;text-align: center;font-size: 16px;"><span class="loading-icon icon-left spin ion-load-c"></span><span class="loading-text">Saving...</span></div>
       </div>
    	<div class='territory-popup loadmask-wrapper' style='height: 600px;'>
	    	<h2>Create/Edit Custom Shape Layer</h2>
	    	
	    	<!-- Basic Information -->
			<div class='graybox'>
				
				<!-- Label -->
				<table class='form'>
					<tr>
						<td style='padding-right: 10px; padding-left: 10px;'>{!$Label.MATerritoryBuilder_Label}</td>
						<td><input class='shape-name' type='text' style='width: 150px; padding: 4px; padding-right: 40px; border: 1px solid #8EA6B9; height: 20px; border-radius: 4px 4px 4px 4px; padding-left: 15px;' /></td>
					</tr>
					<tr>
						<td style='padding-right: 10px; padding-left: 10px;'>Description</td>
						<td><textarea class='shape-description' type='text' style='width: 350px; padding: 4px; padding-right: 40px; border: 1px solid #8EA6B9; height: 50px; border-radius: 4px 4px 4px 4px; padding-left: 15px;' ></textarea></td>
					</tr>
				</table>
				
			</div>
	            
			<!-- Tabs -->
			<div id='tabs' style='padding: 0; border: none; background: none;'>
			
				<!-- Tabs -->
				<ul class='tabs' style='background: none;'>
					<li class='territory-tab folders-tab'><a href="#tab-folders">Folder</a></li>
					<li class='territory-tab color-tab'><a href="#tab-color-geometry">{!$Label.MATerritoryBuilder_Tab_Options}</a></li>
					
				</ul>
					 
				<!-- Geometry Pane -->
				<div class='tab-folders' id='tab-folders' style='padding: 10px 0 0 0; height: 470px;'>
					<div id="SaveShapeTree" class="demo" style="padding-top:3px;"></div>
				</div><!-- End Geometry Pane -->
			
				<!-- Color Pane -->
				<div class='tab-color-geometry' id='tab-color-geometry' style='padding: 10px 0 0 0;'>
					<div class='tab-color-geometry-content'>
						
						
						<table style="width: 100%;">
						    <tr>
						        <td style="vertical-align:top;">
						            <!-- Geometry Header -->
            			    		<table class='boundary-color-header'>
            			    			<tr>
            			    				<th colspan="2" style="padding-top:10px;">{!$Label.MATerritoryBuilder_Color_Selection}</th>
            			    			</tr>
            			    			<tr>
            								<td>{!$Label.MATerritoryBuilder_Fill_Color}:</td>
            								<td>
            									<input id="custom-shapelayer-shape-fill-color-input" class="color fillcolor boundary-style" style="background-color: rgb(136, 34, 51); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#882233" onchange="CustomShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Border_Color}:</td>
            			    				<td>
            			    					<input id="custom-shapelayer-border-fill-color-input" class="color bordercolor boundary-style" style="background-color: rgb(34, 51, 136); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#223388" onchange="CustomShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            								<td>{!$Label.MATerritoryBuilder_Opacity}:</td>
            								<td>
            									<select id="custom-shapelayer-shape-fill-opacity-input" class="fillopacity" onchange="CustomShapeLayerUpdatePreview();">
            			    					    <option value="0.1">10%</option>
            			    					    <option value="0.2">20%</option>
            			    					    <option value="0.3">30%</option>
            			    					    <option value="0.4">40%</option>
            			    					    <option value="0.5">50%</option>
            			    					    <option value="0.6">60%</option>
            			    					    <option value="0.7">70%</option>
            			    					    <option value="0.8">80%</option>
            			    					    <option value="0.9">90%</option>
            			    					    <option value="1.0">100%</option>
            			    					</select>
            									<!--<input class="fillopacity boundary-style" type="text" value=""/>-->
            								</td>
            							</tr>
            							<tr>
            			    				<th colspan="2">{!$Label.MATerritoryBuilder_Label_Options}:</th>
            			    			</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_Enable}:</td>
            			    				<td>
            			    					<input type='checkbox' id="custom-shapelayer-label-enabled" onchange="CustomShapeLayerUpdatePreview();" />
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_TextOverride}:</td>
            			    				<td>
            			    					<input class="label-text-override-input" type="text" value="" id="custom-shapelayer-label-override" />
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_Justification}:</td>
            			    				<td>
            			    					<select id="custom-shapelayer-label-justification" onchange="CustomShapeLayerUpdatePreview();">
            			    					    <option value="left">Left</option>
            			    					    <option value="center" selected="selected">Center</option>
            			    					    <option value="right">Right</option>
            			    					</select>
            								</td>
            							</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_FontSize}:</td>
            			    				<td>
            			    					<select id="custom-shapelayer-label-font-size" onchange="CustomShapeLayerUpdatePreview();">
            			    					    <option>8px</option>
            			    					    <option>9px</option>
            			    					    <option selected="selected">10px</option>
            			    					    <option>11px</option>
            			    					    <option>12px</option>
            			    					    <option>13px</option>
            			    					    <option>14px</option>
            			    					    <option>15px</option>
            			    					    <option>16px</option>
            			    					    <option>17px</option>
            			    					    <option>18px</option>
            			    					</select>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_FontColor}:</td>
            			    				<td>
            			    					<input id="custom-shapelayer-label-font-color" class="color boundary-style" style="background-color: rgb(255, 255, 255); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#FFFFFF" onchange="CustomShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_BGColor}:</td>
            			    				<td>
            			    					<input id="custom-shapelayer-label-bg-color" class="color boundary-style" style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#000000" onchange="CustomShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_BGOpacity}:</td>
            			    				<td>
            			    					<select id="custom-shapelayer-label-bg-opacity" onchange="CustomShapeLayerUpdatePreview();">
            			    					    <option value="0.1">10%</option>
            			    					    <option value="0.2">20%</option>
            			    					    <option value="0.3" selected="selected">30%</option>
            			    					    <option value="0.4">40%</option>
            			    					    <option value="0.5">50%</option>
            			    					    <option value="0.6">60%</option>
            			    					    <option value="0.7">70%</option>
            			    					    <option value="0.8">80%</option>
            			    					    <option value="0.9">90%</option>
            			    					    <option value="1.0">100%</option>
            			    					</select>
            								</td>
            							</tr>
            						</table>
						            
						        </td>
						        <td>
						            <div id="customShape_preview_map" style="width: 470px;height: 390px;float:right;"></div>
						        </td>
						    </tr>
						</table>
						
						
						<style>
						  

						    
                            .boundary-color-header td {
                              padding: 1px 15px 1px 0;
                              font-size: 13px;
                              color: #666667;
                            }
                            
                            .boundary-color-header th {
                              padding: 12px 0 5px;
                              font-size:13px;
                            }
                            
                            body #tab-color-geometry .boundary-color-header .boundary-style {
                                width:100%;
                              border: 1px solid rgba(0,0,0,0.2);
                              cursor: pointer;
                              font-size: 13px;
                              font-family: "Helvetica Neue", Arial, sans-serif;
                            }
                            
                            body #tab-color-geometry .boundary-color-header input.label-text-override-input.boundary-style {
                              text-align: left !important;
                              padding-left: 6px;
                              cursor: text;
                            }
                            
                            .jscolor-picker {
                                background: #f2f2f2 !important;
                                border: 1px solid #aaaaac !important;
                                outline: none !important;
                                border-radius: 0 4px 4px 4px;
                                box-shadow:0 2px 3px rgba(0,0,0,0.2);
                            }
                            
                            table.boundary-color-header {
                              width: 100%;
                            }
						    
						</style>
						
						
					</div>
				</div><!-- End Options Pane -->
				
				
			</div>
			
			<div style='position: absolute; left: 5px; bottom: 20px;'>
			    <a class="MAbutton button-blue" onclick="MACustomShapes.saveV2(false);">{!$Label.MA_Save}</a>
				<a class="MAbutton button-blue savePlot" onclick="MACustomShapes.saveV2(true);">{!$Label.MA_Save_Plot}</a>
	         	<a class="MAbutton button-silver" onclick="ClosePopupWindow();clearCustomShapeInfo();">{!$Label.MA_Close}</a>
			</div>
			
			<!-- System Info -->
			<div class='systeminfo' style='position: absolute; left: 5px; bottom: 0px; font-size: 10px; color: #757575;'></div>
			
		</div>
	</div>
	
	<!-- Create Territory Popup -->
    <div id="CreateTerritoryPopup" class="popup_block" style='height: 600px;'>
    	<div class='territory-popup loadmask-wrapper' style='height: 600px;'>
	    	<h2>{!$Label.MATerritoryBuilder_Create_Layer}</h2>
	    	
	    	<!-- Basic Information -->
			<div class='graybox'>
			
				<!-- Country -->
				<select class='territory-country' style='float: right; margin-top: 8px;'>
					<option value='USA'>United States</option>
					<option value='AUS'>Australia</option>
					<option value='NZL'>New Zealand</option>
					<option value='CAN'>Canada</option>
					<option value='CUS'>Custom</option>
				</select>
				
				<!-- Label -->
				<table class='form'>
					<tr>
						<td style='padding-right: 10px; padding-left: 10px;'>{!$Label.MATerritoryBuilder_Label}</td>
						<td><input class='territory-name' type='text' style='width: 150px; padding: 4px; padding-right: 40px; border: 1px solid #8EA6B9; height: 20px; border-radius: 4px 4px 4px 4px; padding-left: 15px;' /></td>
					</tr>
					<tr>
						<td style='padding-right: 10px; padding-left: 10px;'>Description</td>
						<td><textarea class='territory-description' type='text' style='width: 350px; padding: 4px; padding-right: 40px; border: 1px solid #8EA6B9; height: 50px; border-radius: 4px 4px 4px 4px; padding-left: 15px;' ></textarea></td>
					</tr>
				</table>
				
			</div>
	            
			<!-- Tabs -->
			<div id='tabs' style='padding: 0; border: none; background: none;'>
			
				<!-- Tabs -->
				<ul class='tabs' style='background: none;'>
					<li class='territory-tab geometry-tab'><a href="#tab-geometry">{!$Label.MATerritoryBuilder_Geometry}</a></li>
					<li class='territory-tab color-tab'><a href="#tab-color-geometry">{!$Label.MATerritoryBuilder_Tab_Options}</a></li>
					
				</ul>
					 
				<!-- Geometry Pane -->
				<div class='tab-geometry' id='tab-geometry'>
					<div class='new-geometry-content'>
				    	
			    		<!-- Search Options -->
			    		<table style='width: 100%; padding: 15px;'>
			    			<tr>
			    				<td style='width: 50%; vertical-align: top;'>
			    				
						    		<!-- Search type selection -->
						    		<div class='search-type-wrapper'></div>
						
						    		<!-- Search Boxes -->
						    		<div class='search-wrappers'></div>
								
								</td>
								<td style='width: 50%; vertical-align: top;'>
								
									<!-- Wrapper for positioning -->
									<div style='padding: 0 15px 15px 15px; position: relative;'>
			    		
			    						<!-- Search Aggregates -->
						    			<div class='search-aggregates'></div>
						    		
						    			<!-- All/None Search Options -->
						    			<div class='search-allnone'><span>{!$Label.MA_All}</span> | <span>{!$Label.MA_None}</span></div>
						    		
						    			<!-- Search Table -->
						    			<div class='search-table loadmask-wrapper'></div>
						    		
						    			<!-- Search Table Watermark -->
										<div class='search-table-watermark'>{!$Label.MATerritoryBuilder_No_Bound}</div>
						    		
						    			<!-- Selection Aggregates -->
						    			<div class='selection-aggregates'></div>
						    		
						    		</div>
						    	
						    	</td>
						    </tr>
						</table>
			    		
					</div>
				</div><!-- End Geometry Pane -->
			
				<!-- Color Pane -->
				<div class='tab-color-geometry' id='tab-color-geometry'>
					<div class='tab-color-geometry-content'>
						
						
						<table style="width: 100%;">
						    <tr>
						        <td>
						            <!-- Geometry Header -->
            			    		<table class='boundary-color-header'>
            			    			<tr>
            			    				<th colspan="2" style="padding-top:10px;">{!$Label.MATerritoryBuilder_Color_Selection}</th>
            			    			</tr>
            			    			<tr>
            								<td>{!$Label.MATerritoryBuilder_Fill_Color}:</td>
            								<td>
            									<input id="shapelayer-shape-fill-color-input" class="color fillcolor boundary-style" style="background-color: rgb(136, 34, 51); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#882233" onchange="ShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Border_Color}:</td>
            			    				<td>
            			    					<input id="shapelayer-border-fill-color-input" class="color bordercolor boundary-style" style="background-color: rgb(34, 51, 136); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#223388" onchange="ShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            								<td>{!$Label.MATerritoryBuilder_Opacity}:</td>
            								<td>
            									<select id="shapelayer-shape-fill-opacity-input" class="fillopacity" onchange="ShapeLayerUpdatePreview();">
            			    					    <option value="0.1">10%</option>
            			    					    <option value="0.2">20%</option>
            			    					    <option value="0.3">30%</option>
            			    					    <option value="0.4">40%</option>
            			    					    <option value="0.5">50%</option>
            			    					    <option value="0.6">60%</option>
            			    					    <option value="0.7">70%</option>
            			    					    <option value="0.8">80%</option>
            			    					    <option value="0.9">90%</option>
            			    					    <option value="1.0">100%</option>
            			    					</select>
            									<!--<input class="fillopacity boundary-style" type="text" value=""/>-->
            								</td>
            							</tr>
            							<tr>
            			    				<th colspan="2">{!$Label.MATerritoryBuilder_Label_Options}:</th>
            			    			</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_Enable}:</td>
            			    				<td>
            			    					<input type='checkbox' id="shapelayer-label-enabled" onchange="ShapeLayerUpdatePreview();" />
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_TextOverride}:</td>
            			    				<td>
            			    					<input class="label-text-override-input" type="text" value="" id="shapelayer-label-override" />
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_Justification}:</td>
            			    				<td>
            			    					<select id="shapelayer-label-justification" onchange="ShapeLayerUpdatePreview();">
            			    					    <option value="left">Left</option>
            			    					    <option value="center" selected="selected">Center</option>
            			    					    <option value="right">Right</option>
            			    					</select>
            								</td>
            							</tr>
            			    			<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_FontSize}:</td>
            			    				<td>
            			    					<select id="shapelayer-label-font-size" onchange="ShapeLayerUpdatePreview();">
            			    					    <option>8px</option>
            			    					    <option>9px</option>
            			    					    <option selected="selected">10px</option>
            			    					    <option>11px</option>
            			    					    <option>12px</option>
            			    					    <option>13px</option>
            			    					    <option>14px</option>
            			    					    <option>15px</option>
            			    					    <option>16px</option>
            			    					    <option>17px</option>
            			    					    <option>18px</option>
            			    					</select>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_FontColor}:</td>
            			    				<td>
            			    					<input id="shapelayer-label-font-color" class="color boundary-style" style="background-color: rgb(255, 255, 255); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#FFFFFF" onchange="ShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_BGColor}:</td>
            			    				<td>
            			    					<input id="shapelayer-label-bg-color" class="color boundary-style" style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);" type="text" autocomplete="off" value="#000000" onchange="ShapeLayerUpdatePreview();"/>
            								</td>
            							</tr>
            							<tr>
            			    				<td>{!$Label.MATerritoryBuilder_Label_BGOpacity}:</td>
            			    				<td>
            			    					<select id="shapelayer-label-bg-opacity" onchange="ShapeLayerUpdatePreview();">
            			    					    <option value="0.1">10%</option>
            			    					    <option value="0.2">20%</option>
            			    					    <option value="0.3" selected="selected">30%</option>
            			    					    <option value="0.4">40%</option>
            			    					    <option value="0.5">50%</option>
            			    					    <option value="0.6">60%</option>
            			    					    <option value="0.7">70%</option>
            			    					    <option value="0.8">80%</option>
            			    					    <option value="0.9">90%</option>
            			    					    <option value="1.0">100%</option>
            			    					</select>
            								</td>
            							</tr>
            							<tr>
            			    				<th colspan="2">{!$Label.MATerritoryBuilder_AdvancedOptions}:</th>
            			    			</tr>
            			    			<tr>
            			    				<td colspan="2">
            			    				    
            								<input id="shapelayer-advanced-dissolve-enabled" type='checkbox' class='dissolve-geometry' onchange="ShapeLayerUpdatePreview();" />{!$Label.MA_Dissolve_Geometry}</td>
            							</tr>
            						</table>
						            
						        </td>
						        <td>
						            <div id="shapelayer_preview_map" style="width: 470px;height: 390px;float:right;"></div>
						        </td>
						    </tr>
						</table>
						
						
						<style>
						  

						    
                            .boundary-color-header td {
                              padding: 1px 15px 1px 0;
                              font-size: 13px;
                              color: #666667;
                            }
                            
                            .boundary-color-header th {
                              padding: 12px 0 5px;
                              font-size:13px;
                            }
                            
                            body #tab-color-geometry .boundary-color-header .boundary-style {
                                width:100%;
                              border: 1px solid rgba(0,0,0,0.2);
                              cursor: pointer;
                              font-size: 13px;
                              font-family: "Helvetica Neue", Arial, sans-serif;
                            }
                            
                            body #tab-color-geometry .boundary-color-header input.label-text-override-input.boundary-style {
                              text-align: left !important;
                              padding-left: 6px;
                              cursor: text;
                            }
                            
                            .jscolor-picker {
                                background: #f2f2f2 !important;
                                border: 1px solid #aaaaac !important;
                                outline: none !important;
                                border-radius: 0 4px 4px 4px;
                                box-shadow:0 2px 3px rgba(0,0,0,0.2);
                            }
                            
                            table.boundary-color-header {
                              width: 100%;
                            }
						    
						</style>
						
						
					</div>
				</div><!-- End Options Pane -->
				
				
			</div>
			
			<!--  <div style='position: absolute; left: 5px; bottom: 20px;'>
				<a class="MAbutton button-blue" onclick="saveBoundary();">{!$Label.MA_Save}X</a>
				<a class="MAbutton button-blue" onclick="saveBoundary(true);">{!$Label.MA_Save_Plot}</a>
	         	<a class="MAbutton button-silver" onclick="ClosePopupWindow();clearGeometryInfo();">{!$Label.MA_Close}</a>
			</div>
			
			<div class='systeminfo' style='position: absolute; left: 5px; bottom: 0px; font-size: 10px; color: #757575;'></div> -->
			
			<table class="modal-footer">
	            <tr>
	                <td>
	                    <!-- Buttons -->
            	       <div class='buttons'>
            				<a class="MAbutton button-blue" onclick="saveBoundary();">{!$Label.MA_Save}</a>
            				<a class="MAbutton button-blue" onclick="saveBoundary(true);">{!$Label.MA_Save_Plot}</a>
            	         	<a class="MAbutton button-silver" onclick="ClosePopupWindow();clearGeometryInfo();">{!$Label.MA_Close}</a>
            	        </div>
	                </td>
	                <td>
	                    <!-- System Info -->
	                    <div class='systeminfo'></div>
	                </td>
	            </tr>
	        </table>
			
		</div>
	</div>
	
	<!-- Templates -->
	<div id='TerritoryBuilder-Templates' style='display: none;'>
	
		<!-- Search Wrapper -->
		<div class='search-wrapper'>
			<input type='text' class='search-input' />
			<img class='search-loading' src="{!URLFOR($Resource.MapAnything, 'images/chatter-loader.gif')}" style='display:none' />
			<img class='search-button' src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/search-icon.png')}" />
			<div class='search-menu' style='display:none;'></div>
		</div>
		
		<!-- Results div when selecting area -->
		<div class='autocomplete-selection'>
			<span class='result-text'></span>
			<span class='result-remove'>x</span>
		</div>
		
		<!-- Return templates for each area -->
		<div class='boundary-cell' data-adminlevel=''>
			<div class='icon'><img class="territory-selector-img" /></div>
			<div class='info'><div class='title'></div><div class='subtitle'></div></div>
			<div class='checkbox'></div>
		</div>
		
		<!-- SVG Shape Icon -->
		<svg class='svg-shape-icon' width="20" height="20" preserveAspectRatio="xMidYMid meet">
			<g>
				<path id="svg_10" d="m2.75,17.25c0,0 10,0 10,0c0,0 4.75,-8 4.75,-8c0,0 -3.5,-5 -3.5,-5c0,0 -6.75,-2 -6.75,-2c0,0 -4.5,4.25 -4.5,4.25c0,0 0,10.75 0,10.75z" opacity="0.55" stroke-width="2" stroke="__BorderColor__" fill="__FillColor__"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="3" cy="17.25" id="svg_1" rx="2" ry="2"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="2.75" cy="6.75" rx="2" ry="2" id="svg_3"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="7.25" cy="2.25" rx="2" ry="2" id="svg_4"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="14" cy="4" rx="2" ry="2" id="svg_5"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="17.75" cy="9.5" rx="2" ry="2" id="svg_6"/>
				<ellipse fill="__BorderColor__" stroke="__BorderColor__" stroke-width="0" cx="13" cy="17.25" rx="2" ry="2" id="svg_7"/>
			</g>
		</svg>
		
	</div>
	
</apex:component>