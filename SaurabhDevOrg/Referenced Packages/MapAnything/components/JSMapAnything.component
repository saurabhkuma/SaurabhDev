<apex:component controller="sma.MAComponentCon">

<script type='text/javascript'>
var IsCorporateAdmin = true;
//testing modify 3  
var BaseObjectsForSubMenu = [{ label: 'Loading...' }];

var UserId = '{!$User.Id}';
var OrgId = '{!$Organization.Id}';

//TomTom Routing Images
var routingImages = '{!URLFOR($Resource.TomTom, 'images/instructions/blank.png')}'.replace('blank.png', '');

var LoadingGIFUrl = '{!URLFOR($Resource.MapAnything, 'ajax-loader.gif')}';
var MALoaddingGIFUrl = '{!URLFOR($Resource.MapAnything, 'MapLoadingGif.gif')}';

var VisibleQueries = new Array(); //Used to Determine Which Queries are Visible (List of Ids)
var SavedQueriesObjectIdArray = new Array(); //Used to Store Information about Processed Saved Queries


var ProcessedSavedQueries = new Array();

var UserEmailAddress = "{!$User.Email}";

var OnUserLoadEventCompletd = false;
var map = null;
var ProximityCircle = null;
var DOMNode = null;
var router = null;
var RouterResponse = null;

//Position Vars
var PositionMarker;
var WatchPositionMarker = null;
var PositionEnabled = false;

//Home Vars
var CenterLat;
var CenterLong;
var DefaultZoomLevel;
var DefaultMapType;

var DebugMode = false;

var GeoCodePointsIsRunning = false; //No Longer Needed

var CallBackFunction;

//New Permission Var(s)
var pageSize = 10;
var campaignsPageSize = 10;
var changeownerPageSize = 10;

var RoutingGeoCodeIsRunning;
var WayPointArray = new Array();
var skippedWaypointsArray;
var HasRoutingErrors = false;

var AddressesToBeGeoCoded = new Array();

var PlottedLegendSavedQryId = "";

var slider1;
var slider2;

var defaultQueries = [];
var userSettings = $.extend({}, MA.defaults.userSettings);

/**************************************
*  Keyboard Shortcuts for MapAnything
***************************************/
//main shortcuts
$(document).bind('keydown', 'Shift+z',function (evt){ ZoomToFit(); });
$(document).bind('keyup', 'Shift+s',function (evt){ $('#search-wrapper .search-box ').focus(); });
$(document).bind('keyup', 'Shift+h',function (evt){ GoToHomePosition(); });
$(document).bind('keyup', 'Shift+p',function (evt){ ShowHidePosition(); });
$(document).bind('keyup', 'Shift+t',function (evt){ $('#ShowTrafficButton').click(); });

var notPrintEmailPage = document.URL.indexOf('PrintEmailRoute') == -1;

//toggle highlight variables
var highlightOnOff = false;
var highlight;

$(function() 
{
    if(notPrintEmailPage) { document.getElementById("exportedTable").style.height =(screen.height-460) + "px"; }
    sforce.connection.sessionId = '{!$Api.Session_ID}';
    
    //handle saving checkbox permissions
    $('#permissions-grid').on('change', '.autosave[type=checkbox]', function () {
        var $checkbox = $(this);
        
        //build request data to update the permission
        var RequestData = {
            Id          : $checkbox.closest('.permissions-row').data('record').Id,
            Field       : addNamespace(namespace, $checkbox.attr('data-field')),
            Value       : $checkbox.is(':checked')
        };
        
        //replace the checkbox with a loader and send the request to update the permission
        var $loader = $('#templates .loader').clone().show();
        $checkbox.replaceWith($loader);
        $.getJSON(MA.resources.Tree+"?action=update_permission_field", RequestData, function(json)
        { 
            if(json.success)
            {               
                //update this data in our raw data (this is needed to prevent data loss during searching)
                $('#permissions-grid').data('records')[$loader.closest('.permissions-row').data('record').Id][RequestData.Field] = RequestData.Value;
                        
                //replace the loader with the original checkbox
                $loader.replaceWith($checkbox);
            }
            else
            {
                //replace the loader with the original checkbox
                $loader.replaceWith($checkbox);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            //show error
            $loader.replaceWith($checkbox);
        });
    });     
    
    $('#permissionsfilter-searchtext').keyup(search);
    $('#permissionsfilter-searchtype').change(search);
    
    //handle changing page number
    $('#permissions-page').change(function () { 
        
        //set a loadmask over the permissions grid
        $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
        $('#permissions-grid-status .status span').text('Loading...');
        
        //remove existing rows
        $permissionsGrid = $('#permissions-grid');
        $permissionsGrid.find('.permissions-row').remove();
        
        //calculate start and end points for this page
        var recordStart = ($(this).val() - 1) * pageSize + 1;
        var recordEnd = recordStart + pageSize - 1;
        
        //loop over our matching records and add those that belong on this page
        var index = 1;
        $.each($permissionsGrid.data('matchingRecords'), function (userId, record) {
            
            //add a row for this record if were past the starting point for this page
            if (recordStart <= index)
            {
                //add row
                var $row = populatePermissionsRow($('#templates .permissions-row').clone().data('record', record));
                $permissionsGrid.append($row);
            }
            
            //increment our index and stop looping if were past the endpoint for this page
            index++;
            if (recordEnd < index) { return false; }
        });
        
        //update page info
        $('#permissions-pageinfo').text('Displaying records ' + Math.max(recordStart, 0) + ' - ' + Math.min(recordEnd, $permissionsGrid.data('matchingRecordsCount')) + ' of ' + $permissionsGrid.data('matchingRecordsCount'));
        
        //remove the loadmask over the permissions grid
        $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
    });
    
    /*****************
     *  Add to Campaign
     *****************/
    
    //init grid data
    $('#addtocampaign-select-grid').data({
        pageSize: 10,
        rowTemplate: $('#templates .campaign-row'),
        populateRow: function ($row) {
            //populate basic record data
            var record = $row.data('record');
            
            $row.find('.campaign-checkbox').attr('checked', record.isSelected);
            $row.find('.campaign-name').html($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
            $row.find('.campaign-type').text(record.Type);
            $row.find('.campaign-status').text(record.Status);
            $row.find('.campaign-startdate').text(record.StartDate);
            $row.find('.campaign-enddate').text(record.EndDate);
            $row.find('.campaign-leads').text(record.NumberOfLeads);
            $row.find('.campaign-contacts').text(record.NumberOfContacts);
            $row.find('.campaign-responses').text(record.NumberOfResponses);
            
            //return the row
            return $row;
        }
    });
    
    //campaign filter handlers
    $('#addtocampaign-select-filters span.link.showadvancedfilters').click(function () {
        if ($(this).text() == 'Show Advanced Filters')
        {
            $(this).text('Hide Advanced Filters');
            $('#addtocampaign-select-advanced-filters').slideDown();
        }
        else
        {
            $(this).text('Show Advanced Filters');
            $('#addtocampaign-select-advanced-filters').slideUp();
        }
    });
    $('#addtocampaign-select-filters span.link.clearfilters').click(function () {
        $(this).closest('.grid-wrapper').find('.filter-text, .filter-calendar, .filter-number').val('');
        grid_Search.call($(this));
    });
    
    //handle selecting campaigns
    $('#addtocampaign-select-grid').on('change', '.campaign-row .campaign-checkbox', function () {
    
        //update the selection status for this campaign
        $(this).closest('.campaign-row').data('record').isSelected = $(this).is(':checked');
        
        //update the selections counter
        $('#addtocampaign-select-selectiondetails').data(
            'numSelected', 
            ($('#addtocampaign-select-selectiondetails').data('numSelected') || 0) + ($(this).is(':checked') ? 1 : -1)
        );
        $('#addtocampaign-select-selectiondetails span').first().text($('#addtocampaign-select-selectiondetails').data('numSelected'));
        
    });
    
    //handle clearing selected campaigns
    $('#addtocampaign-select-selectiondetails span.link.clearselections').click(function () {
        
        //uncheck all visible rows
        $('.campaign-row .campaign-checkbox').attr('checked', false);
        
        //update records in memory
        $.each(($('#addtocampaign-select-grid').data('records') || {}), function (id, record) {
            record.isSelected = false;
        });
        
        //update the selections counter
        $('#addtocampaign-select-selectiondetails').data('numSelected', 0);
        $('#addtocampaign-select-selectiondetails span').first().text('0');
        
    });
    
    /*****************
     *  Change Owner
     *****************/
     
    //init grid data
    $('#changeowner-select-grid').data({
        pageSize: 10,
        rowTemplate: $('#templates .changeowner-row'),
        populateRow: function ($row) {
        
            //populate basic record data
            var record = $row.data('record');
            $row.find('.user-name').text(record.Name);
            
            //return the row
            return $row;
        }
    });
    
    //handle clicking a new owner
    $('#changeowner-select-grid-wrapper').on('click', '.changeowner-row td', function () {
        //keep track of which user was clicked
        $('#changeowner-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
        
        //show step 2
        $('#changeowner-select-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        $('#changeowner-options-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
    });
    
    /*****************
     *  New Task
     *****************/
     
    //init grid data
    $('#newtask-select-grid').data({
        pageSize: 10,
        rowTemplate: $('#templates .changeowner-row'),
        populateRow: function ($row) {
        
            //populate basic record data
            var record = $row.data('record');
            $row.find('.user-name').text(record.Name);
            
            //return the row
            return $row;
        }
    });
    
    //init datepickers
    $('#newtask-details-wrapper .datepicker').datepicker({ dateFormat: formatUserLocaleDate({datepicker : true}) });
    
    //handle clicking an assignment type
    $('[name="newtask-assignto-type"]').click(function () {
        $('.newtask-assignto-type').hide().filter('.' + $(this).attr('value')).show();
    });
    
    //handle clicking an asignee
    $('#newtask-select-grid-wrapper').on('click', '.changeowner-row td', function () {
        //keep track of which user was clicked
        $('#newtask-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
        
        //show step 2
        NewTask_Step2();
    });
    
    /*****************
     *  New Event
     *****************/
     
    //init grid data
    $('#newevent-select-grid').data({
        pageSize: 10,
        rowTemplate: $('#templates .changeowner-row'),
        populateRow: function ($row) {
        
            //populate basic record data
            var record = $row.data('record');
            $row.find('.user-name').text(record.Name);
            
            //return the row
            return $row;
        }
    });
    
    //init datepickers
    $('#newevent-details-wrapper .datepicker').datepicker({ dateFormat: formatUserLocaleDate({datepicker    : true}) });
    
    //handle clicking an assignment type
    $('[name="newevent-assignto-type"]').click(function () {
        $('.newevent-assignto-type').hide().filter('.' + $(this).attr('value')).show();
    });
    
    //handle clicking an assignee
    $('#newevent-select-grid-wrapper').on('click', '.changeowner-row td', function () {
        //keep track of which user was clicked
        $('#newevent-select-grid').data('selectedRecord', $(this).closest('.changeowner-row').data('record'));
        
        //show step 2
        NewEvent_Step2();
    });
    
    /***********************
    *   Plotted Layers
    ***********************/
    
    //change visibility toggle on prox layers
    $('#PlottedQueriesTable').on('change', '.affectvisibility', function() {
        ChangeVisibilityWhenCircleIsAdded({force:true});
    });
    
    /**************************
    *
    **************************/
    
    if (LicenseType == 'bronze')
    {
        $('#ShowTrafficButton').hide();
    }
    
    //Remove Copyright Link
    $("#nm_crimg a").attr('disabled','disabled');
         
    
    StartUpJS();
    InitializeTree();
    
    //preload images
    var images = new Array();
    var preloaders = ["{!URLFOR($Resource.MapAnything, 'images/chatterstatus-loader.gif')}"];
    for (i = 0; i < preloaders.length; i++) {
        images[i] = new Image();
        images[i].src = preloaders[i];
    }
       
}); //end onready

function NewLayerNavigationEnabled()
{
    return (typeof MALayers != "undefined");
}


/////////////////////////
//  SavedQueryTree.js  //

function InitializeTree()
{
    /*
        
        Folder
            Type~~Id
            
        Saved Query
            Type~~Id~~Custom~~Type
        
    */
    
    $("#SQTree").bind("create.jstree", function (event, data) 
    { 
        try
        {
            Debug("create.jstree");
            
            /*    
                data.rslt.obj[0] - the node created
                Array Breakdown
                
                0 - NodeType (PersonalRoot, CorporateRoot, RoleRoot, CorporateFolder, PersonalFolder, RoleNameFolder, RoleFolder, RoleUserFolder, CorporateSavedQuery, PersonalSavedQuery, RoleSavedQuery)
                1 - Id (Id of Folder or Saved Query)
                2 - Custom (Custom, NotCustom)
                3 - Type (LegendSavedQuery, SavedQuery)
            */ 
            if (data.rslt.obj.attr("Id") == undefined || data.rslt.obj.attr("Id") == "")
            {
                 Debug("create.jstree - Folder");
                 Debug("ParentId: " + data.rslt.parent.attr("Id"));
                 Debug("Name: " + data.rslt["name"]);
                 
                 var ParentNodeType = data.rslt.parent.attr("NodeType");
                 Debug('Parent is ' + ParentNodeType); 
                 
                 var personUser = '0';
                 if (ParentNodeType == "PersonalFolder" || ParentNodeType == "PersonalRoot" || ParentNodeType == "RoleUserFolder")
                 {                         
                    data.rslt.obj.attr("NodeType", "PersonalFolder");
                    
                    if(data.rslt.obj.closest('[NodeType = PersonalRoot]')[0] != null)
                    {
                        personUser = 'user';
                    }
                    else if(data.rslt.obj.closest('[NodeType = RoleUserFolder]')[0] != null)
                    {
                        personUser = data.rslt.obj.closest('[NodeType = RoleUserFolder]').attr("id");
                    }
                 }
                 else if (ParentNodeType == "CorporateFolder" || ParentNodeType == "CorporateRoot")
                 {
                    data.rslt.obj.attr("NodeType", "CorporateFolder");                   
                    data.rslt.obj.attr("create",data.rslt.parent.attr("create"));
                    data.rslt.obj.attr("modify",data.rslt.parent.attr("modify"));
                    data.rslt.obj.attr("delete",data.rslt.parent.attr("delete"));
                    data.rslt.obj.attr("setperm",data.rslt.parent.attr("setperm"));
                 }
                 else if (ParentNodeType == "RoleFolder" || ParentNodeType == "RoleRoot" || ParentNodeType == "RoleNameFolder")
                 {
                    data.rslt.obj.attr("NodeType", "RoleFolder");
                 }
                    
                $.getJSON(MA.resources.Tree,"action=new_folder&pid=" + data.rslt.parent.attr("Id") + "&name=" + encodeURIComponent(data.rslt["name"]) + "&pos=" + data.rslt["position"] + "&NodeType=" + data.rslt.parent.attr("NodeType") + "&personUser=" + personUser,function(json)
                { 
                    if(json.success)
                    {
                        var newnode = data.rslt.obj;
                        newnode.attr("id", json.FolderId);
                        Debug("Node Created in Database! " + json.FolderId);
                    }
                    else
                    {
                        //REMOVE CREATED FOLDER DUE TO ERROR HERE
                        NotifyError("Error Creating Node in Database",json.error);
                        Debug("Error Creating Node in Database " + json.error);
                    }
                })
                .error(function(jqXHR, textStatus, errorThrown) {        
                    Debug("<b>Error Creating Node in Database</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                    NotifyError("Error Creating Node in Database",textStatus + " : " + errorThrown); 
                });
            }
        }
        catch(err)
        {
            Debug("Error, create.jstree");
            DisplayPropertiesOfObject(err,0);
        }
    }); //End create.jstree
    
    $("#SQTree").bind("create_node.jstree", function (event, data) 
    {
        //update icons
        $('#SQTree li[rel="SavedQuery"], #SQTree li[rel="SavedTerritory"], #SQTree li[rel="SavedLocation"]').each(function () {
            updateIcon($(this));
        });
        
    }); //End create_node.jstree
    
    $("#SQTree").bind("rename.jstree", function (event, data) 
    { 
        Debug("rename.jstree");
        Debug("Id: " + data.rslt.obj.attr('ID'));
        
        var NodeType = data.rslt.obj.attr("NodeType");
        
        if(NodeType == "RoleNameFolder" || NodeType == "RoleUserFolder" || NodeType.indexOf('Root') != -1)
        {
            Debug("Cannot Rename "+NodeType+" Folder");
            return;
        }
        
        $.getJSON(MA.resources.Tree,"action=rename_folder&id=" + data.rslt.obj.attr("Id") + "&name=" + data.rslt["new_name"],function(json)
        { 
            if(json.success)
            {
                Debug("Updated Node " + json.id);
            }
            else
            {
                NotifyError("Error Updating Node",json.error);
                Debug("Error Updating Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Node",textStatus + " : " + errorThrown); 
        }); 
    }); //End rename.jstree
    
    
    $("#SQTree").bind("remove.jstree", function (event, data) 
    { 
        Debug("remove.jstree");
        Debug("Id: " + data.rslt.obj.attr("Id"));
        
        var NodeType = data.rslt.obj.attr("NodeType");
        
        if (NodeType == "RoleNameFolder" || NodeType == "RoleUserFolder" || NodeType.indexOf('Root') != -1)
        {
            Debug("Cannot Remove "+NodeType+" Folder");
            return;
        }
        
        if (NodeType == "CorporateFolder" || NodeType == "PersonalFolder" || NodeType == "RoleFolder")
        {
            Debug("Removing Folder");
        }
        else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery" || NodeType == "RoleSavedQuery")
        {
            Debug("Removing Saved Query");
        }
        
        $.getJSON(MA.resources.Tree,"action=delete_node&id=" + data.rslt.obj.attr("Id"),function(json)
        { 
            if(json.success)
            {
                Debug("Deleted Node " + json.id);
            }
            else
            {
                NotifyError("Error Deleting Node",json.error);
                Debug("Error Deleting Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Deleting Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Deleting Node",textStatus + " : " + errorThrown); 
        });
    }); //End remove.jstree
    
    
    
   $("#SQTree").bind("move_node.jstree", function (event, data) 
        {
            /*
                .o - the node being moved (m.o[0])
                .np - the new parent (m.np[0])
                .op - the former parent (m.op[0])
            */            

            var NewParentNodeType = data.rslt.np.attr("NodeType");
            
            var NewParentId = data.rslt.np.attr("Id");
            var OldParentId = data.rslt.op.attr("Id");

            var SavedQueryParam = '';
            var TerritoryParam = '';
            var FavoriteParam = '';
            var FolderParam = '';
            var DataLayerParm = '';
            
            //Populate URL Params for children
            $.each($.jstree._reference('#SQTree')._get_children('#' + data.rslt.np.attr("Id")), function(index, value) { 
                
                var NodeType = $(value).attr("NodeType");
                
                //Set attribute on node for parent NodeType
                if (NodeType == 'PersonalSavedQuery' || NodeType == 'CorporateSavedQuery' || NodeType == 'RoleSavedQuery')
                {   
                    if (NewParentNodeType == 'CorporateRoot' || NewParentNodeType == 'CorporateFolder' )
                    {                   
                        $(value).attr("NodeType","CorporateSavedQuery");
                    }
                    else if (NewParentNodeType == 'PersonalRoot' || NewParentNodeType == 'PersonalFolder' || NewParentNodeType == 'RoleUserFolder' )
                    {                   
                        $(value).attr("NodeType","PersonalSavedQuery");
                    }
                    else if (NewParentNodeType == 'RoleRoot' || NewParentNodeType == 'RoleNameFolder' || NewParentNodeType == 'RoleFolder' )
                    {                   
                        $(value).attr("NodeType","RoleSavedQuery");
                    }
                    
                    SavedQueryParam += $(value).attr("Id") + " " + NodeType + ",";
                }
                else if (NodeType == 'PersonalTerritory')
                {
                    TerritoryParam += $(value).attr("Id") + " " + NodeType + ",";
                }
                else if (NodeType == 'PersonalDataLayer')
                {
                    DataLayerParm += $(value).attr("Id") + " " + NodeType + ",";
                }
                else if (NodeType == 'PersonalLocation')
                {
                    FavoriteParam += $(value).attr("Id") + " " + NodeType + ",";
                }
                else
                {
                    FolderParam += $(value).attr("Id") + " " + NodeType + ",";
                }
            });
            
            //Remove last comma
            SavedQueryParam = SavedQueryParam.slice(0, -1);
            TerritoryParam = TerritoryParam.slice(0, -1);
            FavoriteParam = FavoriteParam.slice(0, -1);
            FolderParam = FolderParam.slice(0, -1);
            DataLayerParm = DataLayerParm.slice(0, -1);
            
            $.getJSON(MA.resources.Tree,"action=move_node&sqry=" + encodeURIComponent(SavedQueryParam) + "&territories=" + encodeURIComponent(TerritoryParam) + "&favorites=" + encodeURIComponent(FavoriteParam) + "&dataLayers=" + encodeURIComponent(DataLayerParm) + "&folders=" + encodeURIComponent(FolderParam) + "&npid=" + NewParentId + "&npnt=" + NewParentNodeType,function(json) { 
                if(json.success) {
                    //Success
                }
                else {
                    //This is showing errors even though it's working.  No time to look into it now so just commenting it out
                    //NotifyError("Error Ordering Node(s)",json.error);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) {        
                NotifyError("Error Ordering Node(s)",textStatus + " : " + errorThrown); 
            });
        }
    ); //End move_node.jstree
    
    $("#SQTree").bind("load_node.jstree", function (event, data) 
    {         
        //update icons
        $('#SQTree li[rel="SavedQuery"], #SQTree li[rel="SavedTerritory"], #SQTree li[rel="SavedLocation"]').each(function () {
            updateIcon($(this));
        });
        
        //find scroll dimensions  and calculate if need to scroll down
        if(data.rslt.obj[0] != undefined)
        {
            //store nodeHeigth
            var nodeHeight = $(data.rslt.obj[0]).find('ul li').length * 33;
            $(data.rslt.obj[0]).data('nodeHeight',nodeHeight);
            
            //initial load of node, grab information and calculate dimensions
            var outerTop = $('#SQTree').scrollTop();
            var outerBottom = outerTop + nodeHeight;
            var innerTop = data.rslt.obj[0].offsetTop;
            var innerBottom = innerTop + nodeHeight;
            
            //if extending past page, scroll down
            if(innerBottom > outerBottom)
            {
                //add 33 for height of containing node
                var scroll = innerBottom - $('#SQTree').height() + 33;
                updateScroll(scroll,nodeHeight);
            }
            else
            {
                //reset height
                $('#SQTree >ul').height('auto');
            }
        }
        
    }); //End create_node.jstree
    
    $("#SQTree")
        // call `.jstree` with the options object
        .jstree({
        "json_data" : {
           "data": "",
            "ajax" : {
                "url" : MA.resources.TreeXML,
                "data" : function (n) {
                    
                    return {
                        id : n.attr ? n.attr("id") : 0, 
                        rand : new Date().getTime(),
                        type: n.attr ? n.attr("NodeType") : 0,
                        types: 'Folder,SavedQuery,Territory,Favorite,DataLayer'
                    };
                }
            }
        },
        "types" : {
            
            "types" : {
                "default" : {
                    "select_node": function (node) {
                        //determine permissions
                        var options = {
                            nodeType : node.attr("NodeType"),
                            modify : node.attr("modify") === "false" ? false : true,
                            delete : node.attr("delete") === "false" ? false : true,
                            create : node.closest('[nodetype="CorporateFolder"]').attr('create') != 'true' ? false : true
                        };
                        
                        //parse advanced options
                        var advancedOptions = {};
                        try{
                            advancedOptions = JSON.parse(node.attr('advanced'));
                        }
                        catch (e) {
                            //using for visible area, set to entire map if error or not exist
                            advancedOptions = {defaultRenderArea : 'EntireMap'};
                        }

                        if ((node.attr('rel') || '').indexOf('SavedQuery') != -1) {
                            if(advancedOptions.defaultRenderArea === 'VisibleArea') {
                                //plot visible area
                                PlotQuery({ savedQueryId: node.attr('id') }, 'Default', true, options);
                            }
                            else {
                                PlotQuery({ savedQueryId: node.attr('id') }, 'Default', false, options);
                            }
                        }
                        else if ((node.attr('rel') || '').indexOf('SavedTerritory') != -1) {
                            var terOptions = {
                                id : node.attr('id'),
                                modify : node.parent().closest('li').attr('modify') === 'false' ? false : true,
                                delete : node.parent().closest('li').attr('delete') === 'false' ? false : true,
                                create : node.parent().closest('li').attr('create') === 'false' ? false : true,
                            }
                            var isCustom = node.attr('iscustom') === 'false' ? false : true;
                            if(isCustom) {
                                MACustomShapes.drawV2(terOptions)
                            }
                            else {
                                drawShapeLayer(terOptions); 
                            }
                        }
                        else if ((node.attr('rel') || '').indexOf('SavedLocation') != -1) {
                            PlotFavoriteLocation({ id : node.attr('id') }); 
                        }
                        else if ((node.attr('rel') || '').indexOf('SavedDataLayer') != -1) {
                            MADemographicLayer.StoreTempLayer(node.attr('id'));
                        }
                        else {
                            this.toggle_node(node);
                            //if reopening a node scroll to correct position
                            if($(node[0]).hasClass('jstree-open'))
                            {
                                var nodeHeight = ($(node).data('nodeHeight'));
                                var outerTop = $('#SQTree').scrollTop();
                                var outerBottom = outerTop + nodeHeight;
                                var innerTop = node[0].offsetTop;
                                var innerBottom = innerTop + nodeHeight;
                                if(innerBottom > outerBottom)
                                {
                                    var scroll = innerBottom - $('#SQTree').height() + 33;
                                    updateScroll(scroll,nodeHeight);
                                }
                            }
                            else
                            {
                                //reset height
                                $('#SQTree >ul').height('auto');
                            }
                        }
                        return false;
                    }
                }
            }
        },
        "core": { 
            "animation" : 10, 
            "strings": 
                {
                    "loading" : "Loading...",
                    "new_node" : "New Folder" 
                }
        
        },
        "crrm" : { 
            "move" : {
                "check_move" : function (m) 
                { 
                    /*
                        .o - the node being moved (m.o[0])
                        .np - the new parent (m.np[0])
                        .op - the former parent (m.op[0])
                    */

                    var node = m.o;
                    var formerParent = m.op;
                    var newParent = m.np;
                    var validDropTargets = ['PersonalRoot', 'CorporateRoot', 'PersonalFolder', 'CorporateFolder', 'RoleUserFolder'];

                    if (newParent.attr("id") == "SQTree")
                    {
                        return false;
                    }
                    else if (node.attr("NodeType") == "CorporateRoot" || node.attr("NodeType") == "PersonalRoot" || node.attr("NodeType") == "RoleRoot")
                    {
                        //Prevent Moving Root Folders
                        return false;
                    }
                    else if ($.inArray(newParent.attr("NodeType"), validDropTargets) == -1)
                    {
                        //prevent moving to something other than a folder
                        return false;
                    }
                    else if (
                            $.inArray(node.attr("NodeType"), ['PersonalFolder', 'CorporateFolder', 'RoleFolder']) != -1
                            && $.inArray(formerParent.attr("NodeType"), ['CorporateFolder', 'CorporateRoot']) != -1
                            && $.inArray(newParent.attr("NodeType"), ['PersonalFolder', 'PersonalRoot', 'RoleRoot', 'RoleFolder', 'RoleUserFolder', 'RoleNameFolder']) != -1)
                    {
                        //Prevent moving Corporate Folders to Personal Folders
                        return false;
                    }
                    else if ((m.o.attr("NodeType") == "PersonalFolder" || m.o.attr("NodeType") == "CorporateFolder" || m.o.attr("NodeType") == "RoleFolder") 
                            && (m.op.attr("NodeType") == "PersonalFolder" || m.op.attr("NodeType") == "PersonalRoot"
                                || m.op.attr("NodeType") == 'RoleRoot' || m.op.attr("NodeType") == 'RoleFolder' || m.op.attr("NodeType") == 'RoleUserFolder' || m.op.attr("NodeType") == 'RoleNameFolder')
                            && (m.np.attr("NodeType") == 'CorporateFolder' || m.np.attr("NodeType") == 'CorporateRoot'))
                    {
                        //Prevent moving Personal Folders to Corporate Folders
                        return false;
                    }
                    else if (m.o.attr("NodeType") == "RoleNameFolder" || m.o.attr("NodeType") == "RoleUserFolder")
                    {
                        //Prevent moving Role Name and User Folders
                        return false;
                    }
                    else if (!IsCorporateAdmin && (m.o.attr("NodeType") == "CorporateSavedQuery" && 
                                      (m.np.attr("NodeType") == 'PersonalFolder' || m.np.attr("NodeType") == 'PersonalRoot'
                                        || m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleFolder' || m.np.attr("NodeType") == 'RoleUserFolder' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Corporate Queries to Personal or Role Folders
                        return false;
                    }
                    else if (IsCorporateAdmin && (m.o.attr("NodeType") == "CorporateSavedQuery" && 
                                      (m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Corporate Queries to Role Root Folders
                        return false;
                    }
                    else if (!IsCorporateAdmin && ((m.o.attr("NodeType") == "PersonalSavedQuery" || m.o.attr("NodeType") == "RoleSavedQuery") && 
                                      (m.np.attr("NodeType") == 'CorporateRoot' || m.np.attr("NodeType") == 'CorporateFolder')))
                    {
                        //Prevent moving Personal or Role Queries to Corporate Folders
                        return false;
                    }
                    else if (IsCorporateAdmin && ((m.o.attr("NodeType") == "PersonalSavedQuery" || m.o.attr("NodeType") == "RoleSavedQuery") && 
                                      (m.np.attr("NodeType") == 'RoleRoot' || m.np.attr("NodeType") == 'RoleNameFolder')))
                    {
                        //Prevent moving Personal or Role Queries to Corporate Root Folder
                        return false;
                    }            
                    else if (!IsCorporateAdmin && ($.inArray(newParent.attr('NodeType'), ['PersonalRoot', 'CorporateRoot']) != -1 || newParent.attr("create") == 'false'))
                    {
                        //Prevent moving to Node with no permission
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            }
        },
        "dnd" : {
            "copy_modifier" : false,
            "drop_target" : false,
            "drag_target" : false
        },
            "plugins" : ["themes","json_data","ui","crrm","contextmenu", "dnd", "types"],
            "contextmenu": {items: customMenu}
            
        }); //End jstree
}

function updateScroll (scroll,nodeHeight)
{
    //update height of container
    $('#SQTree >ul').height( $('#SQTree >ul').height() + nodeHeight )
    
    //scroll down if needed
    $('#SQTree').animate({ scrollTop: scroll });
}

function updateIcon($node)
{
    try 
    {
        if ($node.attr('rel') == 'SavedQuery' && $node.attr('IconColor'))
        {
            var iconColor = $node.attr('IconColor');
            if (iconColor.indexOf('#') == 0)
            {
                $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: '+iconColor.split(':')[0]+' !important;'));
            }
            else if (iconColor.indexOf('image:') == 0)
            {
                var imageURL = MA.SitePrefix+"/servlet/servlet.FileDownload?file="+iconColor.split('image:')[1];
                $node.find('a .jstree-icon, a img').replaceWith($("<img style='width: 19px; height: 19px; margin-right: 3px; vertical-align: middle;' />").attr('src', imageURL));
            }
        }
        else if ($node.attr('rel') == 'LegendSavedQuery')
        {
            $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>"));
        }
        else if ($node.attr('rel') == 'SavedTerritory')
        {
            var iconColor = $node.attr('iconcolor');
            var rgb = hexToRgb(iconColor);
            $node.find('a .jstree-icon').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: rgba('+rgb.r+', '+rgb.g+', '+rgb.b+', 0.2) !important;'));
        }
        else if ($node.attr('rel') == 'SavedLocation')
        {
            var iconColor = $node.attr('iconcolor');
            if (iconColor.indexOf('#') == 0)
            {
                $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: '+iconColor+' !important;'));
            }
            else if (iconColor.indexOf('image:') == 0)
            {
                $node.find('a .jstree-icon, a img').replaceWith($("<ins class='jstree-icon'>&nbsp;</ins>").attr('style', 'background-color: transparent !important;'));
                //var imageURL = MA.SitePrefix+"/servlet/servlet.FileDownload?file="+iconColor.split('image:')[1];
                //$node.find('a .jstree-icon, a img').replaceWith($("<img style='width: 19px; height: 19px; margin-right: 3px; vertical-align: middle;' />").attr('src', imageURL));
            }
        }
    } catch (err) { MALog(err); }
}
function hexToRgb(hex) {
    var bigint = parseInt(hex.removeStart('#'), 16);
    return {
        r: (bigint >> 16) & 255,
        g: (bigint >> 8) & 255,
        b: bigint & 255
    };
}

function SubmitCopyTo()
{   
    var SelectedFolders = new Array();
    $('#CopyToTree').jstree("get_checked",null,true).each(
        function(index,element) {
            if (!$(element).is('.disabled')) {
                SelectedFolders.push($(element).attr("id") + "~" + $(element).attr("NodeType"));
            }
        }
    );
    
    //Copy To
    $.each(SelectedFolders, function(index, Folder)
    {
        var FolderSplit = Folder.split("~");
        if (FolderSplit[0] == 'CorporateRoot' && !userSettings.isCorporateAdmin) {
            return; //can't copy to corporate if not folder admin
        }
        
        $.getJSON(MA.resources.Tree,"action=copy_node&copyid=" + $('#copynode').attr("copyid") + "&copynodetype=" + $('#copynode').attr("copynodetype") + "&folderid=" + FolderSplit[0] + "&foldernodetype=" + FolderSplit[1],function(json)
        { 
            if(json.success)
            {  
                if (NewLayerNavigationEnabled())
                {
                    if (MALayers.currentFolder == FolderSplit[0])
                    {
                        MALayers.refreshFolder();
                    }
                    showSuccess($('#mapdiv'), 'Successfully copied this data layer.');
                    
                }
                else
                {
                    if(json.nodes.length > 0)
                    {
                        $.each(json.nodes, function(index, node)
                        {
                            var $ParentNode = $('li[id=\'' + FolderSplit[0] + '\']');
                            
                            if($.jstree._reference('#SQTree')._is_loaded($ParentNode))
                            {
                                addNodeToTree(node,$ParentNode);
                                showSuccess($('#mapdiv'), 'Successfully copied this data layer.');
                            }
                        }); 
                    }   
                }
                
                    
            }
            else
            {
                //NotifyError("Error Copying Node",json.error);
                Debug("Error Copying Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>Error Copying Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Copying Node",textStatus + " : " + errorThrown); 
        });    
    }); 
    
    ClosePopupWindow();
}

function SubmitMoveTo()
{   
    var SelectedFolders = new Array();
    $('#CopyToTree').jstree("get_checked",null,true).each(
        function(index,element) {
            if (!$(element).is('.disabled')) {
                SelectedFolders.push($(element).attr("id") + "~" + $(element).attr("NodeType"));
            }
        }
    );
    
    //Copy To
    $.each(SelectedFolders, function(index, Folder)
    {
        var FolderSplit = Folder.split("~");
        if (FolderSplit[0] == 'CorporateRoot' && !userSettings.isCorporateAdmin) {
            return; //can't copy to corporate if not folder admin
        }
        
        var movetype = $('#copynode').attr("movetype");
        var moveidtype = $('#copynode').attr("copyid") + " " + $('#copynode').attr("copynodetype");
        
        var moveparam = 'sqry';
        
        if(movetype === 'folder') {
            moveparam = 'folders';
        } else if(movetype === 'marker') {
            moveparam = 'sqry';
        } else if(movetype === 'shape') {
            moveparam = 'territories';
        } else if(movetype === 'favorite') {
            moveparam = 'favorites';
        } else if(movetype === 'datalayer') {
            moveparam = 'datalayers';
        }
        
        
        
        $.getJSON(MA.resources.Tree,"action=move_node&" + moveparam + "=" + moveidtype + "&npid=" + FolderSplit[0] + "&npnt=" + FolderSplit[1],function(json)
        { 
            if(json.success)
            {  
                if (NewLayerNavigationEnabled())
                {
                    // if (MALayers.currentFolder == FolderSplit[0])
                    // {
                        MALayers.refreshFolder();
                    // }
                    
                }
                else
                {
                    if(json.nodes.length > 0)
                    {
                        $.each(json.nodes, function(index, node)
                        {
                            var $ParentNode = $('li[id=\'' + FolderSplit[0] + '\']');
                            
                            if($.jstree._reference('#SQTree')._is_loaded($ParentNode))
                            {
                                addNodeToTree(node,$ParentNode);
                            }
                        }); 
                    }   
                }
                
                    
            }
            else
            {
                //NotifyError("Error Copying Node",json.error);
                Debug("Error Copying Node " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>Error Copying Node</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Copying Node",textStatus + " : " + errorThrown); 
        });    
    }); 
    
    ClosePopupWindow();
}

function addNodeToTree(node, parentNode)
{
    if(node.NodeType == 'PersonalFolder')
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType
            },
            data: node.title
        });
    }
    else if(node.NodeType == 'CorporateFolder')
    {
         $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                create: node.create,
                modify: node.modify,
                'delete': node['delete'],
                setperm: node.setperm
            },
            data: node.title
        });
    }
    else  if(node.NodeType == 'CorporateSavedQuery')
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                QueryType: node.QueryType,
                IsCustom: node.IsCustom,
                IconColor: node.IconColor,
                modify: node.modify,
                'delete': node['delete']          
            },
            data: node.title
        });
    }
    else
    {
        $('#SQTree').jstree('create_node', parentNode, 'inside', {
            attr: {
                id: node.Id,
                rel: node.rel,
                CopyName: node.CopyName,
                NodeType: node.NodeType,
                QueryType: node.QueryType,
                IsCustom: node.IsCustom,
                IconColor: node.IconColor        
            },
            data: node.title
        });
    }

    if(node.Children.length > 0)
    {
        $.each(node.Children, function(index, child)
        {
            addNodeToTree(child, $('li[id=\'' + node.Id + '\']'));        
        });
    }   
}

var MACustomShapes = {
    currentLayer : [],
    shapeData : null,
    shapeType : '',
    openPopupSidebar : function (options) {
        
        //show popup
        LaunchPopupWindow($('#CustomShapePopup'), 900);
        //reset the data
        clearCustomShapeInfo();
        var folderId = '';
        
        if(options.shape) {
            var shape = options.shape;
            //find the shapeLayer in the sidebar
            this.currentLayer = $('#PlottedQueriesTable .PlottedShapeLayer[qid="'+shape.qid+'"]');
            this.currentShapeId = shape.qid;
            //determine the type of shape and store the data
            this.buildShapeData(shape);
            
            //set the colors if this is a polygon or rect
            if(this.shapeData.proximityType == 'Polygon') {
                $('#CustomShapePopup .fillcolor')[0].color.fromString('#22CC22');
    		    $('#CustomShapePopup .bordercolor')[0].color.fromString('#000000');
            }
            if(this.shapeData.proximityType == 'Rectangle') {
                $('#CustomShapePopup .fillcolor')[0].color.fromString('#FFCC66');
    		    $('#CustomShapePopup .bordercolor')[0].color.fromString('#000000');
            }
            
            var $shapeLayer = this.currentLayer;
            if($shapeLayer.data('territoryData')) {
                var terData = $shapeLayer.data('territoryData');
                $('#CustomShapePopup').data('territoryData',terData);
                var options = JSON.parse(terData.Options__c);
                var colorOptions = options.colorOptions;
                folderId = terData.Folder__c;
                $('#CustomShapePopup .shape-name').val(terData.Name);
                $('#CustomShapePopup .shape-description').val(terData.Description__c);
                
                try{$('#CustomShapePopup .fillcolor')[0].color.fromString(colorOptions.fillColor);}catch(e){}
                try{$('#CustomShapePopup .bordercolor')[0].color.fromString(colorOptions.borderColor);}catch(e){}
                $('#CustomShapePopup .fillopacity').val(colorOptions.fillOpacity);
                $('#CustomShapePopup #custom-shapelayer-label-enabled').prop('checked',colorOptions.labelEnabled);
                $('#CustomShapePopup .label-text-override-input').val(colorOptions.labelOverride);
                $('#CustomShapePopup #custom-shapelayer-label-justification').val(colorOptions.labelJustification);
                $('#CustomShapePopup #custom-shapelayer-label-font-size').val(colorOptions.labelFontSize);
                $('#CustomShapePopup #custom-shapelayer-label-font-color').val(colorOptions.labelFontColor);
                try{$('#CustomShapePopup #custom-shapelayer-label-bg-color')[0].color.fromString(colorOptions.labelBGColor);}catch(e){}
                try{$('#CustomShapePopup #custom-shapelayer-label-bg-opacity')[0].color.fromString(colorOptions.labelFontColor);}catch(e){}
                
                $( "#CustomShapePopup #tabs" ).tabs({
                  disabled: [ 0 ]
                });
                $( "#CustomShapePopup #tabs" ).tabs( "option", "active", 1 );
            }
            
            $('#CustomShapePopup').data('shape',shape);
            $('#CustomShapePopup').data('territoryData',$shapeLayer.data('territoryData'));
        }
        else {
            this.currentLayer = [];
            
            //get the info and open options
            MACustomShapes.getShapeInfo({id : options.id}).then(function(response) {
                if(response.success) {
                    var terData = removeNamespace('{!namespace}', response.data.territory);
                    folderId = terData.Folder__c;
                    $('#CustomShapePopup').data('territoryData',terData);
                    var options = JSON.parse(terData.Options__c);
                    var colorOptions = options.colorOptions;
                    
                    $('#CustomShapePopup .shape-name').val(terData.Name);
                    $('#CustomShapePopup .shape-description').val(terData.Description__c);
                    
                    try{$('#CustomShapePopup .fillcolor')[0].color.fromString(colorOptions.fillColor);}catch(e){}
                    try{$('#CustomShapePopup .bordercolor')[0].color.fromString(colorOptions.borderColor);}catch(e){}
                    $('#CustomShapePopup .fillopacity').val(colorOptions.fillOpacity);
                    $('#CustomShapePopup #custom-shapelayer-label-enabled').prop('checked',colorOptions.labelEnabled);
                    $('#CustomShapePopup .label-text-override-input').val(colorOptions.labelOverride);
                    $('#CustomShapePopup #custom-shapelayer-label-justification').val(colorOptions.labelJustification);
                    $('#CustomShapePopup #custom-shapelayer-label-font-size').val(colorOptions.labelFontSize);
                    $('#CustomShapePopup #custom-shapelayer-label-font-color').val(colorOptions.labelFontColor);
                    try{$('#CustomShapePopup #custom-shapelayer-label-bg-color')[0].color.fromString(colorOptions.labelBGColor);}catch(e){}
                    try{$('#CustomShapePopup #custom-shapelayer-label-bg-opacity')[0].color.fromString(colorOptions.labelFontColor);}catch(e){}
                    
                    $( "#CustomShapePopup #tabs" ).tabs({
                      disabled: [ 0 ]
                    });
                    $( "#CustomShapePopup #tabs" ).tabs( "option", "active", 1 );
                    
                }
                else {
                    console.log(response);
                }
            });
        }
        
        //Initialize Folder tree for Copy To
        $("#SaveShapeTree")
        
            .jstree({
                "json_data" : {
                    "data": "",
                    "ajax" : {
                        "url" : MA.resources.TreeXML,
                        "data" : function (n) { 
                            return { 
                                id : n.attr ? n.attr("id") : 0, 
                                rand : new Date().getTime(),
                                type: n.attr ? n.attr("NodeType") : 0,
                                types: 'Folder'
                            }; 
                        }
                    }
                },
                "core": { 
                    "animation" : 10, 
                    "strings": 
                        {
                            "loading" : "Loading...",
                            "new_node" : "New Folder" 
                        }
                
                },
                "plugins" : ["themes","json_data","ui","crrm","types"]
                                
            })
            
            .on('load_node.jstree load_node_json.jstree', function () {
                $('#SaveShapeTree li').each(function () {
                    var $li = $(this);
                    if (!userSettings.isCorporateAdmin && ($(this).attr('nodetype') == 'CorporateRoot' || ($(this).attr('nodetype') == 'CorporateFolder' && $(this).attr('create') != 'true'))) {
                        $(this).addClass('disabled').find('> a > .jstree-checkbox').addClass('copyto-disabled');
                    }
                    else if ($(this).attr('nodetype') == 'RoleRoot' || $(this).attr('nodetype') == 'RoleNameFolder') {
                        $(this).addClass('disabled').find('> a > .jstree-checkbox').addClass('copyto-disabled');   
                    }
                    
                    if(folderId == $li.attr('id')) {
                        $li.addClass('selected');
                    }
                }); 
            })
            
            .bind("select_node.jstree", function (e, data) {
                var node = data.rslt.obj;
                $('#SaveShapeTree li').removeClass('selected');
                node.addClass('selected');
            })
            
        ; //End jstree
        
    },
    
    saveV2 : function (plot) {
        var update = false;
        var userId;
        var folderId;
        var territoryId;
        
        //find the shapeLayer in the sidebar
        var $shapeLayer = this.currentLayer;
        
        $('#CustomShapePopup .maPopupLoading').removeClass('hidden');
        
        if(this.currentLayer.length > 0) {
            var terData = $shapeLayer.data('territoryData');
            territoryId = terData.Id;
            folderId = terData.Folder__c;
            userId = terData.User__c;
            update = true;
        }
        else if ($('#CustomShapePopup').data('territoryData')){
            var terData = $('#CustomShapePopup').data('territoryData');
            territoryId = terData.Id;
            folderId = terData.Folder__c;
            userId = terData.User__c;
            update = true;
        }
        
        //check if name and folder
        if(!update) {
            var node = $('#SaveShapeTree').jstree('get_selected');
            if(node.length == 0) {
                //show warning message
                showError($('#CustomShapePopup'), 'Please select a folder.');
                $('#CustomShapePopup .maPopupLoading').addClass('hidden');
                return;
            }
            
            //determine the folder
            if(node.attr('nodetype') == 'PersonalRoot') {
                userId = MA.CurrentUser.Id
            }
            else if(node.attr('nodetype') == 'CorporateRoot') {
                //do nothing
            }
            else {
                folderId = node.attr('id');
            }
        }
        
        //get the name
        var name = $('#CustomShapePopup .shape-name').val();
        if(name == '') {
            //show warning message
            showError($('#CustomShapePopup'), 'Please enter a name.');
            $('#CustomShapePopup .maPopupLoading').addClass('hidden');
            return;
        }
        
        //check if the folder id was changed
        
        
        var shape = $('#CustomShapePopup').data('shape');
        
        
        //create the shapedata
        if(shape != null && shape != undefined) {
            this.buildShapeData(shape);
        }
        else {
            var terData = $('#CustomShapePopup').data('territoryData');
            var geo = terData.Geometries__r.records[0];
            MACustomShapes.shapeData = JSON.parse(geo.sma__Geometry__c);
        }
        
        //build ajax info
        var colorOpts = {
            fillColor : $('#CustomShapePopup .fillcolor').val(),
            borderColor : $('#CustomShapePopup .bordercolor').val(),
            fillOpacity : $('#CustomShapePopup .fillopacity').val(),
            labelEnabled : $('#CustomShapePopup #custom-shapelayer-label-enabled').is(':checked'),
            labelOverride : $('#CustomShapePopup .label-text-override-input').val(),
            labelJustification : $('#CustomShapePopup #custom-shapelayer-label-justification').val(),
            labelFontSize : $('#CustomShapePopup #custom-shapelayer-label-font-size').val(),
            labelFontColor : $('#CustomShapePopup #custom-shapelayer-label-font-color').val(),
            labelBGColor : $('#CustomShapePopup #custom-shapelayer-label-bg-color').val(),
            labelBGOpacity : $('#CustomShapePopup #custom-shapelayer-label-bg-opacity').val()
        };
        
        //grab all the data
        var jsonData = {
            serializedTerritory : JSON.stringify({
                Id : territoryId,
                Name : name,
                sma__Description__c : $('#CustomShapePopup .shape-description').val(),
                sma__User__c : userId,
                sma__Folder__c : folderId,
                sma__Options__c : JSON.stringify({"country":"USA","advancedOptions":{"calculateTerritoryAggregates":false,"dissolveGeometry":true},"colorOptions":colorOpts}),
                sma__CustomGeometry__c : true
            }),
            serializedGeometry : JSON.stringify({
                Name : name + '-geometry',
                sma__Geometry__c : JSON.stringify(this.shapeData)
            })
        };
        
        //make ajax call to save
        $.ajax({
            url: MA.resources.Territory+"?securityToken={!securityToken}&action=saveBoundaryInfo&core.apexpages.devmode.url=0",
            type: 'POST',
            dataType: 'JSON',
            data: jsonData
        }).done(function(res) {
            if (NewLayerNavigationEnabled())
        	{
        	    MALayers.refreshFolder();
        	    growlSuccess($('#growl-wrapper'), 'Successfully saved this shape.',4000);
        	}
        	else
        	{
        	    //grab color options
            	var options = JSON.parse(res.data.sma__Options__c);
            	var colorOptions = options.colorOptions;
            	
            	//add to tree or update
            	if (update)
            	{
            		//update
            		var $node = $('#SQTree li[id="'+res.data.Id+'"]');
            		$node.attr('iconcolor', colorOptions.fillColor);
            		$("#SQTree").jstree('rename_node', '#' + territoryId , res.data.Name);
            		updateIcon($node);
            		growlSuccess($('#growl-wrapper'), 'Successfully updated this shape.',4000);
            	}
            	else
            	{
            	    if( $('#SQTree #' + node.attr('id') + ' > ul ').length > 0 ) {
            		    $("#SQTree").jstree("create","#" + $('#SaveShapeTree').jstree('get_selected').attr('id'),"last",{attr : {id: res.data.Id, iconcolor: colorOptions.fillColor, NodeType: 'PersonalTerritory', rel: 'SavedTerritory', title: res.data.Name}, data: res.data.Name},null,true);
            	    }
				    growlSuccess($('#growl-wrapper'), 'Successfully saved this shape.',4000);
            	}
        	}
        	
        	if(plot) {
            	//remove the old layer and plot a new one
            	var $layer = $('.PlottedShapeLayer[data-id="'+res.data.Id+'"]');
            	if($layer.length > 0) {
            	    $layer.find('.btn-remove').click();
            	}
            	if(shape) {
                	$layer = $('.layer[qid="'+shape.qid+'"]');
                	if($layer.length > 0) {
                	    $layer.find('.btn-remove').click();
                	}
            	}
            	MACustomShapes.drawV2({id: res.data.Id});
        	}
        	
        	ClosePopupWindow();
        	
        }).fail(function(res) {
            growlError($('#growl-wrapper'), 'Unable to save custom shape.',4000);
            console.log('Shape Save Failed',res);
        });
        
    },
    
    updateShapeGeometry : function (options,callback) {
        callback = callback || function(){};
        var shape = options.shape;
        var $layer = options.layer;
        var shapeData = {};
	    if(typeof(shape.getCenter) == 'function') {
            //circle
            //get the center
            var center = shape.getCenter();
            
            shapeData = {
                proximityType : 'Circle',
                center : { lat : center.lat(), lng : center.lng()},
                radius : shape.getRadius(),
                isCustom : true
            }
        }
        else if(typeof(shape.getPath) == 'function') {
            //poly
            var tempData = {
                proximityType : 'Polygon',
                points : [],
                isCustom : true
            }
            
            //loop over the points to get the lat lng
            var points = shape.getPath();
            for (var i =0; i < points.getLength(); i++) {
                var xy = points.getAt(i);
                tempData.points.push({lat: xy.lat(), lng: xy.lng()})
            }
            
            shapeData = tempData;
            tempData = null;
        }
        else if(typeof(shape.getBounds) == 'function') {
            //rectangle
            var tempData = {
                proximityType : 'Rectangle',
                bounds : {},
                isCustom : true
            }
            
            //get the bounds
            var bounds = shape.getBounds();
            var NE = bounds.getNorthEast();
            var SW = bounds.getSouthWest();
            tempData.bounds = {
                NE : {lat : NE.lat(), lng : NE.lng()},
                SW : {lat : SW.lat(), lng : SW.lng()}
            }
            
            shapeData = tempData;
            
        }
        
        console.log($layer,shapeData);
        var mainShapeInfo = $layer.data('popupData') || {};
        $.ajax({
            url: MA.resources.Territory+"?securityToken={!securityToken}&action=saveGeometryInfo&core.apexpages.devmode.url=0",
            type: 'POST',
            dataType: 'JSON',
            data: {
                geometry		: JSON.stringify(shapeData),
                geometryName	: (mainShapeInfo.name || 'custom') + '-geometry',
                territory		: $layer.data('id'),
                removeOldGeo    : true
            }
        }).done(function(res) {
            callback(res);
        }).
        error(function(res) {
            callback(res);
        });
    },
    
    getShapeInfo : function (options) {
        var dfd = jQuery.Deferred();
        $.ajax({
			url: MA.resources.Territory+'?securityToken='+securityToken+'&action=getTerritory',
	        type: 'POST',
	        dataType: 'JSON',
	        data: { id: options.id}
        }).done(function(response) {
            dfd.resolve(response);
        }).error (function (res) {
            dfd.resolve(res.data);
        });
        
        return dfd.promise();
    },
    
    buildShapeData : function (shape) {
        if(typeof(shape.getCenter) == 'function') {
            //circle
            this.shapeType = 'circle';
            
            //get the center
            var center = shape.getCenter();
            
            this.shapeData = {
                proximityType : 'Circle',
                center : { lat : center.lat(), lng : center.lng()},
                radius : shape.getRadius(),
                unit : this.currentLayer.find('.options-circle-unit').val(),
                isCustom : true
            }
        }
        else if(typeof(shape.getPath) == 'function') {
            this.shapeType = 'polygon';
            
            var tempData = {
                proximityType : 'Polygon',
                points : [],
                isCustom : true
            }
            
            //loop over the points to get the lat lng
            var points = shape.getPath();
            for (var i =0; i < points.getLength(); i++) {
                var xy = points.getAt(i);
                tempData.points.push({lat: xy.lat(), lng: xy.lng()})
            }
            
            this.shapeData = tempData;
            tempData = null;
        }
        else if(typeof(shape.getBounds) == 'function') {
            //rectangle
            this.shapeType = 'rectangle';
            
            var tempData = {
                proximityType : 'Rectangle',
                bounds : {},
                isCustom : true
            }
            
            //get the bounds
            var bounds = shape.getBounds();
            var NE = bounds.getNorthEast();
            var SW = bounds.getSouthWest();
            tempData.bounds = {
                NE : {lat : NE.lat(), lng : NE.lng()},
                SW : {lat : SW.lat(), lng : SW.lng()}
            }
            
            this.shapeData = tempData;
            
        }
    },
    
    createLabel : function (geoInfo,options,shape,name) {
        /*var labelMarker = new google.maps.Marker({
            position: new google.maps.LatLng(33.8792120807938, -80.8650508760346),
            map: MA.map,
            icon: ImageMarkerURL + '&text=' + encodeURIComponent('South Carolina'),
            clickable: false
        }));*/
        var type = geoInfo.proximityType;
        
        var ImageMarkerURL = 'https://product-api-prod.cloudbilt.com/marker/png2.php?fontcolor=' + encodeURIComponent(options.labelFontColor)
		            + '&bgcolor=' + encodeURIComponent(options.labelBGColor)
		            + '&bgopacity=' + encodeURIComponent(options.labelBGOpacity)
		            + '&fontsize=' + encodeURIComponent(options.labelFontSize);
        
        var labelText = options.labelOverride == '' ? name : options.labelOverride;
        
        var marker = new google.maps.Marker({
            icon: ImageMarkerURL + '&text=' + encodeURIComponent(labelText),
            clickable: false
        });
        
        if(type == 'Circle') {
            var center = shape.getCenter();
            var bounds = shape.getBounds();
            var NE = bounds.getNorthEast();
            var SW = bounds.getSouthWest();
            if(options.labelJustification == 'right') {
                marker.setPosition(new google.maps.LatLng(center.lat(),NE.lng()));
            }
            else if(options.labelJustification == 'center') {
                marker.setPosition(center);
            }
            else if(options.labelJustification == 'left') {
                marker.setPosition(new google.maps.LatLng(center.lat(),SW.lng()));
            }
        }
        else if (type == 'Polygon') {
            var bounds = new google.maps.LatLngBounds();
            
            var path = shape.getPath();
            var pointsArr = path.getArray();
            
            for(i=0; i < pointsArr.length; i++) {
                var point = pointsArr[i];
                bounds.extend(point);
            }
            var center = bounds.getCenter();
            var NE = bounds.getNorthEast();
            var SW = bounds.getSouthWest();
            if(options.labelJustification == 'right') {
                marker.setPosition(new google.maps.LatLng(center.lat(),NE.lng()));
            }
            else if(options.labelJustification == 'center') {
                marker.setPosition(center);
            }
            else if(options.labelJustification == 'left') {
                
                marker.setPosition(new google.maps.LatLng(center.lat(),SW.lng()));
            }
        }
        else if (type == 'Rectangle') {
            var bounds = shape.getBounds();
            var center = bounds.getCenter();
            var NE = bounds.getNorthEast();
            var SW = bounds.getSouthWest();
            if(options.labelJustification == 'right') {
                
                marker.setPosition(new google.maps.LatLng(center.lat(),NE.lng()));
            }
            else if(options.labelJustification == 'center') {
                marker.setPosition(center);
            }
            else if(options.labelJustification == 'left') {
                marker.setPosition(new google.maps.LatLng(center.lat(),SW.lng()));
            }
            
        }
        
        return marker;
    },
    
    drawV2 : function (options) {
        
        //add custom shape to options and create shapelayer
        options.customShape = true;
        
        var $shapeLayer = drawShapeLayer(options);
    }
    
}

function CopyNode(node) 
{
    if ($('#CopyToTree').data('jstree_instance_id')) {
        $('#CopyToTree').jstree('destroy').empty();
    }
    
    //Initialize Folder tree for Copy To
    $("#CopyToTree")
    
        .on('load_node.jstree load_node_json.jstree', function () {
            $('#CopyToTree li').each(function () {
                if (!userSettings.isCorporateAdmin && ($(this).attr('nodetype') == 'CorporateRoot' || ($(this).attr('nodetype') == 'CorporateFolder' && $(this).attr('create') != 'true'))) {
                    $(this).addClass('disabled').find('> a > .jstree-checkbox').addClass('copyto-disabled');
                }
                else if ($(this).attr('nodetype') == 'RoleRoot' || $(this).attr('nodetype') == 'RoleNameFolder') {
                    $(this).addClass('disabled').find('> a > .jstree-checkbox').addClass('copyto-disabled');   
                }
            }); 
        })
    
        .jstree({
            "json_data" : {
                "data": "",
                "ajax" : {
                    "url" : MA.resources.TreeXML,
                    "data" : function (n) { 
                        return { 
                            id : n.attr ? n.attr("id") : 0, 
                            rand : new Date().getTime(),
                            type: n.attr ? n.attr("NodeType") : 0,
                            types: 'Folder'
                        }; 
                    }
                }
            },
            "checkbox": {
              real_checkboxes: true,
              real_checkboxes_names: function (n) {
                 var nid = 0;
                 $(n).each(function (data) {
                    nid = $(this).attr("nodeid");
                 });
                 return (["check_" + nid, nid]);
              },
              two_state: true
           },
            "core": { 
                "animation" : 10, 
                "strings": 
                    {
                        "loading" : "Loading...",
                        "new_node" : "New Folder" 
                    }
            
            },
            "plugins" : ["themes","json_data","ui","crrm","types","checkbox"]
                            
        })
        
    ; //End jstree    
    
    $('#copynode').attr("copyid", node.attr("id"));
    $('#copynode').attr("copynodetype", node.attr("NodeType"));
    $('#copynode').attr("IconColor", node.attr("IconColor"));
    $('#copynode').html('<b>' + node.attr("copyname") + '</b>');    
    LaunchPopupWindow($('#CopyToPopup'), 300);
}

function DeleteFolderPermission(FolderId)
{
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Removing...');
    
    var answer = confirm("Delete this record?")
    if(answer)
    {
        //Get Folder permissions for Edit Permissions popup
        $.getJSON(MA.resources.Tree,"action=delete_folder_permission&id=" + FolderId,function(json)
        { 
            if(json.success)
            {  
                //remove record from data for searching
                $('#permissions-grid').data('records')[FolderId] = {};
                delete $('#permissions-grid').data('records')[FolderId];

                Debug("Successfully deleted Folder Permission!");    
                search();
            }
            else
            {
                //NotifyError("Error Deleting Folder Permission",json.error);
                Debug("Error Deleting Folder Permission " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) { 
            Debug("<b>Error Deleting Folder Permission</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Deleting Folder Permission",textStatus + " : " + errorThrown); 
        });         
    }
    
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading'); 
}

function CreateNewPermissionPopup()
{
    //set a loadmask over the permissions grid and hide status span for buttons
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status img').hide();
    $('#permissions-grid-status .status span').hide();
    $('#permissions-grid-status .status a').remove();
    
    //Add User / Profile select buttons
    $('#permissions-grid-status .status').append('<a class="button1-blue" onclick="CreateNewPermission(\'User\');">User</a><a class="button1-blue" onclick="CreateNewPermission(\'Profile\');">Profile</a>');  
}

function CreateNewPermission(permissionFor)
{    
    var $autocomplete = $("<input type='text' class='autocomplete' />");
    var autocompleteItems = [];
    if(permissionFor === 'Profile')
    {
        //loop through the stored profiles and add each
        $.each($('#permissions-grid').data('profiles'), function (index, profile) {
            autocompleteItems.push({
                id      : profile.value,
                label   : profile.name,
                value   : profile.name
            });
        });
    }
    else
    {
        //loop through the stored users and add each
        $.each($('#permissions-grid').data('users'), function (index, user) {
            autocompleteItems.push({
                id      : user.value,
                label   : user.name,
                value   : user.name
            });
        });
    }
    
    //set up the autocomplete options
    $autocomplete.data('autocompleteItems', autocompleteItems).autocomplete({
        select: function (event, ui) {
            $autocomplete.data('selectedValue', ui.item.id).data('selectedLabel', ui.item.label);
        },
        search: function () {
            $autocomplete.addClass('searching');
        },
        source: function(request, response) {
            var results = $.ui.autocomplete.filter($autocomplete.data('autocompleteItems'), request.term);

            $autocomplete.removeClass('searching');
            response(results.slice(0, 10));
        }
    })
    .blur(function () {
        //put the selected value back in the textbox (in case it has been changed to something invalid)
        $(this).val($(this).data('selectedLabel') || '');
    });
    
    var $newrow = $('#templates .permissions-row').clone().data('record', { permissionFor: permissionFor });
    //$newrow.data('record').permissionFor = permissionFor;
    
    //Append to our select to the first column
    $newrow.find('.permission-type').text(permissionFor);
    $newrow.find('.permission-for').html('').append($autocomplete);
    //Enable combobox once its been appended
    $newrow.find('.permission-for select').combobox();
    
    //Remove autosaves
    $newrow.find('.permission-read input').removeClass('autosave');
    $newrow.find('.permission-create input').removeClass('autosave');
    $newrow.find('.permission-modify input').removeClass('autosave');
    $newrow.find('.permission-delete input').removeClass('autosave');
    $newrow.find('.permission-setperm input').removeClass('autosave');
    
    //Set save link to finalize row insertion
    $newrow.find('.permission-delete a').on('click', SaveNewPermission).html("<b>{!$Label.MA_Save}</b>");
    $('#permissions-grid').append($newrow);
    
    //Remove buttons from Popup and show the status span again
    $('#permissions-grid-status .status a').remove();
    $('#permissions-grid-status .status img').show();
    $('#permissions-grid-status .status span').show();
    
    //Remove the loadmask over the permissions grid
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
}

function createNewFolder () {
    if($('#CreateFolderPopupV2 .folderName').val() == '') {
        $('#CreateFolderPopupV2 .folderName').addClass('error');
        return;
    }
    $('#CreateFolderPopupV2 .saving-wrapper').show();
    var folderObj = $('#CreateFolderPopupV2').data('FolderObj');
    var ParentId = $(folderObj).attr('id')
    var ParentNodeType = $(folderObj).attr('nodetype');
    var FolderName = $('#CreateFolderPopupV2 .folderName').val();

    var personUser = '0';

    if (ParentNodeType == "PersonalFolder" || ParentNodeType == "PersonalRoot" || ParentNodeType == "RoleUserFolder")
    {                         
        //data.rslt.obj.attr("NodeType", "PersonalFolder");

        if(folderObj.closest('[NodeType = PersonalRoot]')[0] != null)
        {
            personUser = 'user';
        }
        else if(folderObj.closest('[NodeType = RoleUserFolder]')[0] != null)
        {
            personUser = folderObj.closest('[NodeType = RoleUserFolder]').attr("id");
        }
    }

    //append to the end
    var folderPosition = folderObj.find('ul li').length;

    //try to create the folder
    $.getJSON(MA.resources.Tree,"action=new_folder&pid=" + ParentId + "&name=" + encodeURIComponent(FolderName) + "&pos=" + folderPosition + "&NodeType=" + ParentNodeType + "&personUser=" + personUser,function(json)
    {
        if(json.success)
        {
            var $li = $("#SQTree").jstree("create","#" + ParentId,"last",{attr : {id: json.FolderId, NodeType: ParentNodeType, title: FolderName}, data: FolderName},null,true);

            //add other attributes as needed (this is old code, just reproducing what was already there. May not be needed)
            if (ParentNodeType == "PersonalFolder" || ParentNodeType == "PersonalRoot" || ParentNodeType == "RoleUserFolder")
            {                         
                $li.attr("NodeType", "PersonalFolder");
            }
            else if (ParentNodeType == "CorporateFolder" || ParentNodeType == "CorporateRoot")
            {
                $li.attr("NodeType", "CorporateFolder");                   
                $li.attr("create",$(folderObj).attr("create"));
                $li.attr("modify",$(folderObj).attr("modify"));
                $li.attr("delete",$(folderObj).attr("delete"));
                $li.attr("setperm",$(folderObj).attr("setperm"));
            }
            else if (ParentNodeType == "RoleFolder" || ParentNodeType == "RoleRoot" || ParentNodeType == "RoleNameFolder")
            {
                $li.attr("NodeType", "RoleFolder");
            }

            //close the popup window
            ClosePopupWindow();
            var popup = $('#CreateFolderPopupV2').data('popup');
            popup.close();
            $('#CreateFolderPopupV2 .saving-wrapper').hide();

            //scroll to favorite
            $('#SQTree').slimScroll({ scrollBy: $li.position().top-160});
            $li.effect("highlight", {}, 3000);
        }
        else
        {
            //REMOVE CREATED FOLDER DUE TO ERROR HERE
            $('#CreateFolderPopupV2 .saving-wrapper').hide();
            NotifyError("Error Creating Node in Database",json.error);
            Debug("Error Creating Node in Database " + json.error);
        }
    })
}

function SaveNewPermission()
{
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Saving...');
    
    var $newrow = $(this).closest('.permissions-row');
    var PermissionForId = $newrow.find('.permission-for .autocomplete').data('selectedValue');
    var PermissionFor = $newrow.data('record').permissionFor;
           
    if(PermissionForId)
    {
        var NewPermission = { 
                Read__c: $newrow.find('.permission-read input').is(':checked'),
                Create__c: $newrow.find('.permission-create input').is(':checked'),
                Modify__c: $newrow.find('.permission-modify input').is(':checked'),
                Delete__c: $newrow.find('.permission-delete input').is(':checked'),      
                SetPermissions__c: $newrow.find('.permission-setperm input').is(':checked')
        };
        
        if(PermissionFor === 'User')
        {
            NewPermission.User__c = PermissionForId;
        }
        else
        {
            NewPermission.ProfileId__c = PermissionForId;
        }
        
        if($('#foldertoedit').attr("folderid") != 'CorporateRoot')
        {
            NewPermission.Folder__c = $('#foldertoedit').attr("folderid");
        }
        
        $.ajax({
            url: MA.resources.Tree+'?action=save_new_permission',
            type: 'POST',
            dataType: 'JSON',
            data: { NewPermission: JSON.stringify(addNamespace(namespace, NewPermission)) },
            complete: function (response)
            {
                var obj = $.parseJSON(response.responseText);                      
                                
                if(obj.success)
                { 
                    //add record to data for searching
                    $('#permissions-grid').data('records')[obj.MAFP.Id] = obj.MAFP;
                    
                    $newrow = populatePermissionsRow($newrow.data('record',obj.MAFP));
                    
                    Debug("Done creating New Permission " + obj.MAFP.Id + "!");                    
                }
                else
                {
                    NotifyError("Error creating New Permission!",obj.error);
                    Debug("Error creating New Permission!");                    
                }
            }
        });
        
    }
    else
    {
        showError($('#EditPermissionsPopup .loadmask-wrapper'), 'Please select a User/Profile');
    }
    
    $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
}

function EditPermissions(NodeId,CopyName) 
{  
    //grab the permissions grid for easy access
    var $permissionsGrid = $('#permissions-grid').data('records', {});
    $permissionsGrid.data({
        users: {},
        profiles: {},
        doneLoadingUsers: false,
        doneLoadingProfiles: false
    });
            
    //Get Folder permissions for Edit Permissions popup
    $.getJSON(MA.resources.Tree,"action=get_folder_permissions&id=" + NodeId,function(json)
    { 
        if(json.success)
        {
            $.each((json.FolderPermissions || []), function(key, FolderPermission) {     
                //add this permission to the list in memory
                $permissionsGrid.data('records')[FolderPermission.Id] = FolderPermission;                    
            });
        }
        else
        {
            //NotifyError("Error Retreiving Folder Permissions",json.error);
            Debug("Error Retreiving Folder Permissions " + json.error);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Retreiving Folder Permissions</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Retreiving Folder Permissions",textStatus + " : " + errorThrown); 
    });
    
    //get users
    $.getJSON(MA.resources.Admin,"securityToken="+securityToken+"&action=get_user_permissions_batch&offset=0", function userPermissionsResponse (json)
    {
        if(json.success)
        {
            //loop through the returned users and add each as a row
            $.each(json.users, function (index, user) {
            
                //remove namespace
                removeNamespace(namespace, user);
            
                //parse user settings
                try { user.Settings = JSON.parse(user.MapAnythingSettings__c || '{}'); }
                catch (err) { user.Settings = {}; }
                
                //add this user to the list in memory
                $permissionsGrid.data('users')[user.Id] = {
                    name: user.Name + ' ('+user.Profile.Name+')',
                    value: user.Id
                };
                
            });
            
            //if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
            if (json.users.length >= 5000) {
                var newOffset = json.offset + json.users.length;
                $.getJSON(MA.resources.Admin,"securityToken="+securityToken+"&action=get_user_permissions_batch&offset="+newOffset,userPermissionsResponse);
            }
            else {
                $permissionsGrid.data('doneLoadingUsers', true);
            }
        }
        else
        {
            $permissionsGrid.data('doneLoadingUsers', true);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) {
        $permissionsGrid.data('doneLoading', true);
    });
         
    //get profiles
    $('#permissionsfilter-profile').data('autocompleteItems', []);
    $.getJSON(MA.resources.Admin,"securityToken="+securityToken+"&action=get_user_profiles_batch&offset=0", function userProfilesResponse(json)
    {
        if (json.success)
        {                
            //loop through the returned profiles and add each in memory
            $.each(json.profiles, function (index, profile) {
                $permissionsGrid.data('profiles')[profile.Id] = {
                    name: profile.Name,
                    value: profile.Id
                };
            });
            
            //if this call returned 5k records then there might be more and we need to make another call.  otherwise, we're done
            if (json.profiles.length >= 5000) {
                var newOffset = json.offset + json.profiles.length;
                $.getJSON(MA.resources.Admin,"securityToken="+securityToken+"&action=get_user_profiles_batch&offset="+newOffset,userProfilesResponse);
            }
            else {
                $permissionsGrid.data('doneLoadingProfiles', true);
            }
        }
        else
        {
            $permissionsGrid.data('doneLoadingProfiles', true);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) {
        $permissionsGrid.data('doneLoadingProfiles', true);        
    });
         
    //set up a poller to determine when the user permissions have fully loaded
    $permissionsGrid.data(
        'loadingInterval',
        setInterval(function () {
    
            if ($permissionsGrid.data('doneLoadingUsers') && $permissionsGrid.data('doneLoadingProfiles'))
            {
                //clear this interval because we're done
                clearInterval($permissionsGrid.data('loadingInterval'));
                
                //hide loadmask
                hideMessage($('#EditPermissionsPopup .loadmask-wrapper'));
    
                //run a default search to populate the grid
                search();
            }
    
        }, 1000)
    );
    
    //Set defaults and create popup window    
    $('#foldertoedit').attr("folderid",NodeId);    
    $('#foldertoedit').html('<b>' + CopyName + '</b>');
    LaunchPopupWindow($('#EditPermissionsPopup'), 900);
    showLoading($('#EditPermissionsPopup .loadmask-wrapper'), 'Loading...');
}

//populate a permissions row based on the data inside it.  return the row
function populatePermissionsRow($row)
{
    //populate basic record data
    var record = removeNamespace(namespace, $row.data('record'));
    
    if(!(record.ProfileId__c))
    {
        $row.find('.permission-type').text('User');
        $row.find('.permission-for').html('').append($("<a target='_blank'></a>").attr('href', '/' + record.User__c).text(record.User__r.Name));
    }
    else if ($('#permissions-grid').data('profiles')[record.ProfileId__c])
    {
        $row.find('.permission-type').text('Profile');
        $row.find('.permission-for').html($('#permissions-grid').data('profiles')[record.ProfileId__c].name);
    }
    else {
        $row.find('.permission-type').text('Deleted');
        $row.find('.permission-for').html('');
        $row.css('background', '#FFD1D1');
    }
        
    $row.find('.permission-read input').attr('checked', record.Read__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-create input').attr('checked', record.Create__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-modify input').attr('checked', record.Modify__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-delete input').attr('checked', record.Delete__c ? 'checked' : false).not('.autosave').addClass('autosave');
    $row.find('.permission-setperm input').attr('checked', record.SetPermissions__c ? 'checked' : false).not('.autosave').addClass('autosave');  
    $row.find('.permission-delete a').off('click').attr('onclick','').attr('onclick', 'DeleteFolderPermission(\'' + record.Id + '\');').html("{!$Label.MA_Delete}");
        
    //return the row
    return $row;
}

function populateCampaignOptionsRow($row)
{
    //populate basic record data
    var record = $row.data('record');
    var statusOptions = $row.data('statusOptions');
    $row.find('.campaign-name').html($("<a target='_blank'></a>").attr('href', '/'+record.Id).text(record.Name));
    
    //populate status options
    var $statusPicklist = $row.find('.campaign-status select');
    if (statusOptions && statusOptions.length > 0)
    {
        $statusPicklist.find('option').remove();
        $.each(statusOptions, function (index, option) {
            $statusPicklist.append(
                $("<option></option>").attr('value', option).text(option)
            );
        });
    }
    else
    {
        $statusPicklist.replaceWith('No valid statuses');
    }
    
    //return the row
    return $row;
}

function search()
{
    //clear any existing search timeouts
    try { clearTimeout($('#permissions-filters').data('searchTimeout')); } catch (err) { }
    
    //set a loadmask over the permissions grid
    $('#permissions-grid-wrapper').addClass('permissions-grid-loading');
    $('#permissions-grid-status .status span').text('Searching...');
    
    //set a search timeout to perform the search when the user is done setting filters
    $('#permissions-filters').data(
        'searchTimeout',
        setTimeout(function () {
            
            //remove existing data for matching records
            var $permissionsGrid = $('#permissions-grid');
            $permissionsGrid.data('matchingRecords', {});
            
            //perform the search
            var matchCount = 0;
            var matchingRecords = $permissionsGrid.data('matchingRecords');
            $.each($permissionsGrid.data('records'), function (recordId, record) {
            
                //remove namespace
                removeNamespace(namespace, record);
                
                var match = false;
                
                //Match all results based on filters
                if ($('#permissionsfilter-searchtype').val() == 'Both')
                {
                    if($('#permissionsfilter-searchtext').val() == ''){ match = true; }
                    else if(record.User__c != '' && record.User__c != null) 
                    {
                        if(record.User__r.Name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1) { match = true; }
                    }
                    else if(record.ProfileId__c != '' && record.ProfileId__c != null) 
                    {
                        if($permissionsGrid.data('profiles')[record.ProfileId__c].name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1) { match = true; }
                    }
                    
                }
                //Match only User results
                else if($('#permissionsfilter-searchtype').val() == 'User' && record.User__c != '' && record.User__c != null)                 
                {
                    if(record.User__r.Name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1 || $('#permissionsfilter-searchtext').val() == '') { match = true; }
                }
                else if($('#permissionsfilter-searchtype').val() == 'Profile' && record.ProfileId__c != '' && record.ProfileId__c != null)
                {
                    if ($permissionsGrid.data('profiles')[record.ProfileId__c].name.toLowerCase().indexOf($('#permissionsfilter-searchtext').val().toLowerCase()) != -1 || $('#permissionsfilter-searchtext').val() == '' ) { match = true; }
                }
                
                if(match)
                {
                    //add a record in memory for this match
                    matchingRecords[recordId] = record;
                    matchCount++;
                }
            });
            
            //hold on to the match count for user later
            $permissionsGrid.data('matchingRecordsCount', matchCount);
            
            //show page options
            $('#permissions-page option').remove();
            for (var i = 1; i <= Math.ceil(matchCount / pageSize); i++)
            {
                $('#permissions-page').append("<option value='"+i+"'>"+i+"</option>");
            }
            
            //remove the loadmask
            $('#permissions-grid-wrapper').removeClass('permissions-grid-loading');
            
            //load the first page of data
            $('#permissions-page').change();
            
        }, 800)
    );
}

function customMenu(node) {

    var items = null;
    var classList = String(node[0].classList);
    
    /*PersonalRoot, CorporateRoot, RoleRoot, CorporateFolder, PersonalFolder, RoleNameFolder, RoleFolder, RoleUserFolder, CorporateSavedQuery, PersonalSavedQuery, RoleSavedQuery*/
    var NodeType = node.attr("NodeType");
    var NodeId = node.attr("Id"); //Id of Folder or Saved Query
    var NodeIsCustom = node.attr("IsCustom"); /*Custom, NotCustom*/
        
    if (NodeType == "RoleRoot" || NodeType == "RoleNameFolder" )
    {
        return null;
    }
    else if (NodeType == "CorporateRoot" && !IsCorporateAdmin)
    {
        //non-corporate admins have no access to the corporate folder context menu
        return null;
    }
    else if (NodeType == "PersonalFolder" || NodeType == "RoleFolder" )
    {
        items = {
            createSavedQuery: { 
                label: "{!$Label.MA_Create_Saved_Query}",
                submenu: ReturnSubMenu()
            },
            
            createTerritory: {
                label: "{!$Label.MA_Create_Shape_Layer}",
                separator_before: false,
                action: function (obj) 
                {
                    //create popup
                    LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
                    $('#CreateTerritoryPopup').data('folder-id', $(obj).attr('id'));
                }
            },
            createLocation: {
                label: "{!$Label.MA_Create_Favorite_Location}",
                action: function (obj) 
                {
                    //clear previous and refresh init image options
                    ClearFavoriteLocation();
                    initFavLocationPopup();
                    
                    //create popup
                    LaunchPopupWindow($('#FavoriteCreateLocation'), 350);
                    $('#FavoriteCreateLocation').data('folder-id', $(obj).attr('id')).attr('folder-id', $(obj).attr('id'));
                    $('#FavoriteCreateLocation').find('.update-location-instructions').hide();
                    $('#FavoriteCreateLocation').find('.fav-folder-location').text($(obj).attr('title'));
                }
            },
            createDataLayer : {
                label: "Create Data Layer",
                action: function (obj) 
                {
                    console.log('2',obj);
                    //clear previous and refresh init image options
                    MAData.wizard.launchPopup({ folderId: $(obj).attr('id') });
                }
            },
            createItem: {
                label: "{!$Label.MA_Create_Folder}",
                separator_before: true,
                action: function (obj) 
                {
                    //click the node to open the folder
                    if($(obj).hasClass('jstree-closed')) {
                        $(obj).find('a').eq(0).click();
                    }
                    /*$('#CreateFolderPopup .folderName').val('');
                    $('#CreateFolderPopup .folderName').removeClass('error');
                    LaunchPopupWindow($('#CreateFolderPopup'), 350);*/
                    var popup = MA.Popup.showMAPopup({
        				template: $('#templates .CreateFolderPopup').clone(),
                        popupId : 'CreateFolderPopupV2',
        				width : 400,
        				title: 'Create Folder',
        				buttons: [
        					{ 
        						text: '{!$Label.MA_Cancel}',
        						type: 'button-red',
        					},
        					{
        						text: '<b>{!$Label.MA_Save_Close}</b>',
        						type: 'button-blue step1',
        						keepOpen : true,
        						onTap: function(e) {
        							//create the folder
        							createNewFolder();
        						}
        					}
        				]
        			});
                    $('#CreateFolderPopupV2').data('FolderObj', obj);
                    $('#CreateFolderPopupV2').data('popup', popup);
                }
            },
            copyTo: { // The "Copy To..." menu item
                label: "{!$Label.MA_Copy_To}...",
                action: function (obj) { CopyNode(obj); }
            },
            renameItem: { // The "rename" menu item
                label: "{!$Label.MA_Rename}",
                action: function (obj) { this.rename(obj); }
            },
            deleteItem: { // The "delete" menu item
                label: "{!$Label.MA_Delete}",
                action: function (obj) { this.remove(obj); }
            },
            plotAll: {
                label: "{!$Label.MA_Plot_All}",
                separator_before: true,
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: false });
                },
                submenu: {
                    plotHeatMap: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: false });
                        }
                    },
                    plotCluster: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: false });
                        }
                    }
                }
            },
            plotAllVisible: {
                label: "{!$Label.MA_Plot_All_Visible_Area}",
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: true });
                },
                submenu: {
                    plotHeatMapVisible: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: true });
                        }
                    },
                    plotClusterVisible: {
                        label: "Cluster",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: true });
                        }
                    }
                }
            }
        };
    
        //Remove Delete Option if Parent has Children
        if (classList.indexOf("jstree-closed") != -1 || classList.indexOf("jstree-open") != -1)
        {
            delete items.deleteItem;
        }
        
        //Remove Security Option If not Corporate
        if (NodeType == "RoleFolder" || NodeType == "PersonalFolder")
        {
             delete items.Security;
        }
    }
    else if (NodeType == "PersonalDataLayer") {
        items = {
            plotItem: {
                label: "{!$Label.MA_Plot}",
                action: function (obj)  {
                    var options = {
                        id : $(obj).attr('id'),
                        modify : node.parent().closest('li').attr('modify') === 'false' ? false : true,
                        delete : node.parent().closest('li').attr('delete') === 'false' ? false : true,
                        create : node.parent().closest('li').attr('create') === 'false' ? false : true
                    }
                    console.log(options);
                    MADemographicLayer.StoreTempLayer(options.id);
                }
            },
            editItem: {
                label: "{!$Label.MA_Edit}",
                separator_before: true,
                action: function (obj)  {
                    console.log('edit');
                    MAData.wizard.launchPopup({ layerId: $(obj).attr('id'), saveOnly : true });
                }
            },
            cloneItem: {
                label: "{!$Label.MA_Clone}",
                action: function (obj) {
                    MAData.wizard.launchPopup({ layerId: $(obj).attr('id'), folderId: $(obj).parent().closest('li').attr('id'), isClone:true, saveOnly : true });
                }
            },
            copyToItem: {
                label: "{!$Label.MA_Copy_To}...",
                action: function (obj) { CopyNode(obj); }
            },
            deleteItem: {
                label: "{!$Label.MA_Delete}",
                action: function (obj) {
                    var objId = $(obj).attr('id');
                    this.remove(obj);
                    MAData.deleteDataLayer(objId);
                }
            }
        }
    }
    else if (NodeType == "PersonalTerritory")
    {
        items = {
            plotItem: {
                label: "{!$Label.MA_Plot}",
                action: function (obj)  {
                    var options = {
                        id : $(obj).attr('id'),
                        modify : node.parent().closest('li').attr('modify') === 'false' ? false : true,
                        delete : node.parent().closest('li').attr('delete') === 'false' ? false : true,
                        create : node.parent().closest('li').attr('create') === 'false' ? false : true
                    }
                    
                    var isCustom = node.attr('iscustom') === 'false' ? false : true;
                    if(isCustom) {
                        MACustomShapes.drawV2(options)
                    }
                    else {
                        drawShapeLayer(options); 
                    }
                }
            },
            plotOnLoadItem: {
                label: node.is('.jstree-star') ? "{!$Label.MA_Remove_Plot_On_Load}" : "{!$Label.MA_Plot_On_Load}",
                action: function (node) { 
                    AddPlotOnLoadId($(node).attr('id'));
                }
            },
            editItem: {
                label: "{!$Label.MA_Edit}",
                separator_before: true,
                action: function (obj)  {
                    LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
                    clearGeometryInfo();
                    $('#CreateTerritoryPopup').data({
                        'territory-id': $(obj).attr('id')
                    });
                    getboundaryInfo();
                }
            },
            cloneItem: {
                label: "{!$Label.MA_Clone}",
                action: function (obj) {
                    LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
                    clearGeometryInfo();
                    $('#CreateTerritoryPopup').data({
                        'territory-id': $(obj).attr('id'),
                        'folder-id': $(obj).parent().closest('li').attr('id')
                    });
                    getboundaryInfo({ forClone: true });
                }
            },
            copyToItem: {
                label: "{!$Label.MA_Copy_To}...",
                action: function (obj) { CopyNode(obj); }
            },
            deleteItem: {
                label: "{!$Label.MA_Delete}",
                action: function (obj) {
                    var objId = $(obj).attr('id');
                    this.remove(obj);
                    deleteboundary(objId);
                }
            }
        }
        
        //remove edit if custom shape
        if(node.attr('iscustom') == 'true') {
            delete items.editItem;
        }
        
        //Remove options if Permissions are disallowed
        if (!IsCorporateAdmin && node.parent().closest('li').attr('modify') === 'false') {
            delete items.editItem;
        }
        if (!IsCorporateAdmin && node.parent().closest('li').attr('delete') === 'false') {
            delete items.deleteItem;
        }
        if (!IsCorporateAdmin && node.parent().closest('li').attr('create') === 'false') {
            delete items.cloneItem;
        }
    }
    else if (NodeType == "PersonalLocation")
    {
        items = {
            plotItem: {
                label: "{!$Label.MA_Plot}",
                action: function (obj) {
                    var options = {
                        id : $(obj).attr('id')
                    }
                    PlotFavoriteLocation(options);
                }
            },
            editItem: {
                label: "{!$Label.MA_Edit}",
                action: function (obj) {
                    //clear previous and refresh init image options
                    ClearFavoriteLocation();
                    initFavLocationPopup();
                    var options = {
                        locationId: $(obj).attr('id')
                    };
                    getLocationInfo(options);
                    
                    //create popup
                    LaunchPopupWindow($('#FavoriteCreateLocation'), 350);
                    $('#FavoriteCreateLocation').data({
                        'location-id': $(obj).attr('id')
                    });
                    
                    $('#FavoriteCreateLocation').find('.update-location-instructions').show();
                    $('#FavoriteCreateLocation').find('.fav-folder-update').text($(obj).attr('title'));
                }
            },
            deleteItem: {
                label: "{!$Label.MA_Delete}",
                action: function (obj) {
                    var objId = $(obj).attr('id');
                    this.remove(obj);
                    deleteLocation(obj);
                }
            }
        }
        
        //Remove options if Permissions are disallowed
        if (!IsCorporateAdmin && node.parent().closest('li').attr('modify') == 'false') {
            delete items.editItem;
        }
        if (!IsCorporateAdmin && node.parent().closest('li').attr('delete') == 'false') {
            delete items.deleteItem;
        }
    }
    else if (NodeType == "CorporateFolder")
    {
        items = {
            createSavedQuery: { 
                label: "{!$Label.MA_Create_Saved_Query}",
                submenu: ReturnSubMenu()
            },
            createTerritory: {
                label: "{!$Label.MA_Create_Shape_Layer}",
                separator_before: false,
                action: function (obj) 
                {
                    //create popup
                    LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
                    clearGeometryInfo();
                    $('#CreateTerritoryPopup').data('folder-id', $(obj).attr('id'));
                }
            },
            createLocation: {
                label: "{!$Label.MA_Create_Favorite_Location}",
                action: function (obj) 
                {
                    //clear previous and refresh init image options
                    ClearFavoriteLocation();
                    initFavLocationPopup();
                    
                    //create popup
                    LaunchPopupWindow($('#FavoriteCreateLocation'), 350);
                    $('#FavoriteCreateLocation').data('folder-id', $(obj).attr('id')).attr({ 'folder-id': $(obj).attr('id') });
                    $('#FavoriteCreateLocation').find('.update-location-instructions').hide();
                    $('#FavoriteCreateLocation').find('.fav-folder-location').text($(obj).attr('title'));
                }
            },
            createDataLayer : {
                label: "Create Data Layer",
                action: function (obj) 
                {
                    console.log(obj);
                    //clear previous and refresh init image options
                    MAData.wizard.launchPopup({ folderId: NodeType, 'folder-id-actual': $(obj).attr('id') });
                }
            },
            createItem: {
                label: "{!$Label.MA_Create_Folder}",
                separator_before: true,
                action: function (obj) 
                {
                    //click the node to open the folder
                    if($(obj).hasClass('jstree-closed')) {
                        $(obj).find('a').eq(0).click();
                    }
                   /* $('#CreateFolderPopup .folderName').val('');
                    $('#CreateFolderPopup .folderName').removeClass('error');
                    LaunchPopupWindow($('#CreateFolderPopup'), 350);
                    $('#CreateFolderPopup').data('FolderObj', obj);*/
                    var popup = MA.Popup.showMAPopup({
        				template: $('#templates .CreateFolderPopup').clone(),
                        popupId : 'CreateFolderPopupV2',
        				width : 400,
        				title: 'Create Folder',
        				buttons: [
        					{ 
        						text: '{!$Label.MA_Cancel}',
        						type: 'button-red',
        					},
        					{
        						text: '<b>{!$Label.MA_Save_Close}</b>',
        						type: 'button-blue step1',
        						keepOpen : true,
        						onTap: function(e) {
        							//create the folder
        							createNewFolder();
        						}
        					}
        				]
        			});
                    $('#CreateFolderPopupV2').data('FolderObj', obj);
                    $('#CreateFolderPopupV2').data('popup', popup);
                }
            },
            copyTo: { // The "Copy To..." menu item
                label: "{!$Label.MA_Copy_To}...",
                action: function (obj) { CopyNode(obj); }
            },
            renameItem: { // The "rename" menu item
                label: "{!$Label.MA_Rename}",
                action: function (obj) { this.rename(obj); }
            },
            editPermissions: { // The "Copy To..." menu item
                label: "{!$Label.MA_Edit_Permissions}",
                action: function (obj) { EditPermissions(obj.attr("id"),obj.attr("copyname")); }
            },
            deleteItem: { // The "delete" menu item
                label: "{!$Label.MA_Delete}",
                action: function (obj) { this.remove(obj); }
            },
            plotAll: {
                label: "{!$Label.MA_Plot_All}",
                separator_before: true,
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: false });
                },
                submenu: {
                    plotHeatMap: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: false });
                        }
                    },
                    plotCluster: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: false });
                        }
                    }
                }
            },
            plotAllVisible: {
                label: "{!$Label.MA_Plot_All_Visible_Area}",
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: true });
                },
                submenu: {
                    plotHeatMapVisible: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: true });
                        }
                    },
                    plotClusterVisible: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: true });
                        }
                    }
                }
            }
        };
        
        //Remove options if Permissions are disallowed
        if(!IsCorporateAdmin && node.attr("create") === "false")
        {
            delete items.createItem;
            delete items.createSavedQuery;
            delete items.createTerritory;
            delete items.createLocation;
        }
        if(!IsCorporateAdmin && node.attr("modify") === "false")
        {
            delete items.renameItem;
        }
        if(!IsCorporateAdmin && node.attr("setperm") === "false")
        {
            delete items.editPermissions;
        }
        
        //Remove Delete Option if no permission or Parent has Children
        if ((!IsCorporateAdmin && node.attr("delete") === "false") || classList.indexOf("jstree-closed") != -1 || classList.indexOf("jstree-open") != -1)
        {
            delete items.deleteItem;
        }
    }
    else if ((NodeType == "CorporateRoot") || NodeType == "PersonalRoot" /*|| NodeType == "RoleRoot" */|| NodeType == "RoleUserFolder" /*|| NodeType == "RoleNameFolder" */)
    {
        items = {
            createSavedQuery: { 
                label: "{!$Label.MA_Create_Saved_Query}",
                submenu: ReturnSubMenu()
            },
            createTerritory: {
                label: "{!$Label.MA_Create_Shape_Layer}",
                separator_before: false,
                action: function (obj) 
                {
                    //create popup
                    LaunchPopupWindow($('#CreateTerritoryPopup'), 900);
                    clearGeometryInfo();
                    $('#CreateTerritoryPopup').data({ 'folder-id': NodeType, 'folder-id-actual': $(obj).attr('id') });
                }
            },
            createLocation: {
                label: "{!$Label.MA_Create_Favorite_Location}",
                action: function (obj) 
                {
                    //clear previous and refresh init image options
                    ClearFavoriteLocation();
                    initFavLocationPopup();
                    
                    //create popup
                    LaunchPopupWindow($('#FavoriteCreateLocation'), 350);
                    $('#FavoriteCreateLocation').data({ 'folder-id': NodeType, 'folder-id-actual': $(obj).attr('id') }).attr({ 'folder-id': NodeType, 'folder-id-actual': $(obj).attr('id') });
                    $('#FavoriteCreateLocation').find('.update-location-instructions').hide();
                    $('#FavoriteCreateLocation').find('.fav-folder-location').text($(obj).attr('title'));
                }
            },
            createDataLayer : {
                label: "Create Data Layer",
                action: function (obj) 
                {
                    console.log('1',obj);
                    //clear previous and refresh init image options
                    MAData.wizard.launchPopup({ folderId: NodeType, 'folder-id-actual': $(obj).attr('id') });
                }
            },
            createItem: {
                label: "{!$Label.MA_Create_Folder}",
                separator_before: true,
                action: function (obj) 
                {
                    //click the node to open the folder
                    if($(obj).hasClass('jstree-closed')) {
                        $(obj).find('a').eq(0).click();
                    }
                    /*$('#CreateFolderPopup .folderName').val('');
                    $('#CreateFolderPopup .folderName').removeClass('error');
                    LaunchPopupWindow($('#CreateFolderPopup'), 350);
                    $('#CreateFolderPopup').data('FolderObj', obj);*/
                    var popup = MA.Popup.showMAPopup({
        				template: $('#templates .CreateFolderPopup').clone(),
                        popupId : 'CreateFolderPopupV2',
        				width : 400,
        				title: 'Create Folder',
        				buttons: [
        					{ 
        						text: '{!$Label.MA_Cancel}',
        						type: 'button-red',
        					},
        					{
        						text: '<b>{!$Label.MA_Save_Close}</b>',
        						type: 'button-blue step1',
        						keepOpen : true,
        						onTap: function(e) {
        							//create the folder
        							createNewFolder();
        						}
        					}
        				]
        			});
                    $('#CreateFolderPopupV2').data('FolderObj', obj);
                    $('#CreateFolderPopupV2').data('popup', popup);
                }
            },
            plotAll: {
                label: "{!$Label.MA_Plot_All}",
                separator_before: true,
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: false });
                },
                submenu: {
                    plotHeatMap: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: false });
                        }
                    },
                    plotCluster: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: false });
                        }
                    }
                }
            },
            plotAllVisible: {
                label: "{!$Label.MA_Plot_All_Visible_Area}",
                action: function (obj) { 
                    PlotFolder({ id: obj.attr('id'), renderAs: 'Markers', visibleAreaOnly: true });
                },
                submenu: {
                    plotHeatMapVisible: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Heatmap', visibleAreaOnly: true });
                        }
                    },
                    plotClusterVisible: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotFolder({ id: obj.attr('id'), renderAs: 'Cluster', visibleAreaOnly: true });
                        }
                    }
                }
            }
        };
        
        //Remove Security Option If not Corporate
        if (NodeType == "PersonalRoot" || NodeType == "RoleRoot" || NodeType == "RoleUserFolder" || NodeType == "RoleNameFolder")
        {
             delete items.Security;
        }
        
    }
    else if (NodeType == "CorporateSavedQuery" || NodeType == "PersonalSavedQuery" || NodeType == "RoleSavedQuery")
    {
        //determine permissions
        var options = {
            nodeType : NodeType,
            modify : node.attr("modify") === "false" ? false : true,
            delete : node.attr("delete") === "false" ? false : true,
            create : node.closest('[nodetype="CorporateFolder"]').attr('create') != 'true' ? false : true
        };
        
        //parse advanced options
        var advancedOptions = {};
        try{
            advancedOptions = JSON.parse(node.attr('advanced'));
        }
        catch (e) {
            //using for visible area, set to entire map if error or not exist
            advancedOptions = {defaultRenderArea : 'EntireMap'};
        }

        items = {
            plotSavedQuery: {
                label: "{!$Label.MA_Plot}",
                action: function (obj) { 
                    //check if we have advanced options and if this is a visible area query
                    if(advancedOptions.defaultRenderArea === 'VisibleArea') {
                        //plot visible area
                        PlotQuery({ savedQueryId: NodeId }, 'Default', true, options);
                    }
                    else {
                        PlotQuery({ savedQueryId: NodeId }, 'Default', false, options);
                    }
                },
                submenu: {
                    plotHeatMap: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                           if(advancedOptions.defaultRenderArea === 'VisibleArea') {
                                //plot visible area
                                PlotQuery({ savedQueryId: NodeId }, 'Heatmap', true, options);
                            }
                            else {
                                PlotQuery({ savedQueryId: NodeId }, 'Heatmap', false, options);
                            }
                        }
                    },
                    plotCluster: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            if(advancedOptions.defaultRenderArea === 'VisibleArea') {
                                //plot visible area
                                PlotQuery({ savedQueryId: NodeId }, 'Cluster', true, options);
                            }
                            else {
                                PlotQuery({ savedQueryId: NodeId }, 'Cluster', false, options);
                            }
                        }
                    },
                    plotScatter: {
                        label: "Scatter",
                        action: function (obj) { 
                            if(advancedOptions.defaultRenderArea === 'VisibleArea') {
                                //plot visible area
                                PlotQuery({ savedQueryId: NodeId }, 'Scatter', true, options);
                            }
                            else {
                                PlotQuery({ savedQueryId: NodeId }, 'Scatter', false, options);
                            }
                        }
                    }
                }
            },
            plotVisibleSavedQuery: {
                label: "{!$Label.MA_Plot_Visible_Area}",
                action: function (obj) { 
                    PlotQuery({ savedQueryId: NodeId }, 'Default', true, options);
                },
                submenu: {
                    plotHeatMapVisible: {
                        label: "{!$Label.MA_Heat_Map}",
                        action: function (obj) { 
                            PlotQuery({ savedQueryId: NodeId }, 'Heatmap', true, options);
                        }
                    },
                    plotClusterVisible: {
                        label: "{!$Label.MA_Cluster}",
                        action: function (obj) { 
                            PlotQuery({ savedQueryId: NodeId }, 'Cluster', true, options);
                        }
                    },
                    plotScatterVisible: {
                        label: "Scatter",
                        action: function (obj) {
                            PlotQuery({ savedQueryId: NodeId }, 'Scatter', true, options);
                        }
                    }
                }
            },
            plotOnLoad: {
                label: node.is('.jstree-star') ? "Remove Plot On Load" : "Plot On Load",
                action: function (obj) 
                    { 
                        Debug(NodeId + " will now Plot On Load!");
                        AddPlotOnLoadId(NodeId);
                    }
            },
            editSavedQuery: {
                label: ((NodeIsCustom == "true") ? "Edit (Custom Query)" : "Edit"),
                separator_before: true,
                _disabled: (NodeIsCustom == "true"),
                action: function (obj) { 
                    Debug("Edit " + NodeId); 
                    launchQueryEditor(MA.resources.QueryBuilder+pageSuffix+'?q='+NodeId);
                }
            },
            cloneSavedQuery: { 
                label: "{!$Label.MA_Clone}",
                action: function (obj) { 
                    Debug("Clone " + NodeId); 
                    launchQueryEditor(MA.resources.QueryBuilder+pageSuffix+'?q=::queryId::&c=true'.replace('::queryId::', NodeId));   
                }
            },
            copyToSavedQuery: {
                label: "{!$Label.MA_Copy_To}...",
                action: function (obj) { CopyNode(obj); }
            },
            deleteSavedQuery: {
                label: "{!$Label.MA_Delete}",
                action: function (obj) {
                    this.remove(obj); 
                }
            }
        };        
        
        //Remove options if Permissions are disallowed
        if (!IsCorporateAdmin && node.attr("modify") === "false" && NodeType == "CorporateSavedQuery")
        {
            delete items.editSavedQuery;
        }
        if (!IsCorporateAdmin && node.attr("delete") === "false" && NodeType == "CorporateSavedQuery")
        {
            delete items.deleteSavedQuery;
        }
        if (!IsCorporateAdmin && NodeType == "CorporateSavedQuery" && node.closest('[nodetype="CorporateFolder"]').attr('create') != 'true')
        {
            delete items.cloneSavedQuery;
        }
    }

    return items;
}

function visibleAreaBatch (options,callback) {
    console.log(options);
    if(options.rI === options.vI) {
        callback({success:true});
    }
    else {
        if(options.pq.hasClass('DataLayer')) 
        {
            MADemographicLayer.refreshDataLayer($plottedLayer,function(res) {
                options.pq.removeClass('visibleLoading');
                //let's refresh the next query
                options.rI++;
                options.pq = $('#PlottedQueriesContainer .visibleOnly').eq(options.rI);
                console.log('dl',options.pq);
                visibleAreaBatch(options,function (res) {
                    //check if all done
                    if(res.success) {
                        if($('#visibleAreaRefeshMap').hasClass('update')) {
                            $('#visibleAreaRefeshMap').removeClass('refreshing update').addClass('ready').text('Refresh in this area');
                        }
                        else {
                            //map has not moved show finished
                            $('#visibleAreaRefeshMap').removeClass('refreshing button-blue ion-android-refresh').addClass('button-dark finished').text('Done');
    
                            //wait 3 seconds then hide button
                            setTimeout(function() {
                                //if map has moved since we started this process just show the normal button
                                if($('#visibleAreaRefeshMap').hasClass('finished')) {
                                    $('#visibleAreaRefeshMap').removeClass('visible update finished').addClass('ready');
                                }
                            },3000);
                        }
                    }
                });
            });
        }
        else {
            refreshQuery(options.pq).then(function(res) {
                options.pq.removeClass('visibleLoading');
                //let's refresh the next query
                options.rI++;
                options.pq = $('#PlottedQueriesContainer .visibleOnly').eq(options.rI);
                visibleAreaBatch(options,function (res) {
                    //check if all done
                    if(res.success) {
                        if($('#visibleAreaRefeshMap').hasClass('update')) {
                            $('#visibleAreaRefeshMap').removeClass('refreshing update').addClass('ready').text('Refresh in this area');
                        }
                        else {
                            //map has not moved show finished
                            $('#visibleAreaRefeshMap').removeClass('refreshing button-blue ion-android-refresh').addClass('button-dark finished').text('Done');
    
                            //wait 3 seconds then hide button
                            setTimeout(function() {
                                //if map has moved since we started this process just show the normal button
                                if($('#visibleAreaRefeshMap').hasClass('finished')) {
                                    $('#visibleAreaRefeshMap').removeClass('visible update finished').addClass('ready');
                                }
                            },3000);
                        }
                    }
                });
            });
        }
    }
}

function hideVisibleAreaButton () {
    //loop over queries and see if we need to hide the visibe area button
    var qIndex = $('#PlottedQueriesTable .visibleOnly').length;

    if(qIndex >= 1){
        $('#visibleAreaRefeshMap').addClass('visible');
    }
    else {
        $('#visibleAreaRefeshMap').removeClass('visible');
    }
}

function HideSingleRow(obj)
{
    var isShown = $(obj).find('input').attr('checked') === 'checked';
    var $layer = $(obj.closest('.PlottedRowUnit'));
    var records = $layer.data('records');
    
    var newMap = null;
    var total = 0;
    
    if(isShown) {
        newMap = MA.map;
        total = $(obj).find('.totalmarkers-new').text();
    }
    
    $.each(records, function(index, value) {
        if( value.hasOwnProperty('marker') ) {
            value.marker.setMap(newMap);
        }
    });
    
    $(obj).find('.visiblemarkers-new').html(total);
}

function PlotQuery(layer, renderAs, visibleAreaOnly, options)
{
    var refreshThisQuery = false;
    //qid for listview
    var qid = null;
    //default options
    options = $.extend({
        showLayers: true,
        success: function () {}
    }, options || {});

    //Hide water-mark
    $('#PlottedQueriesWrapper .plotted-watermark').hide();
    
    //renderAs can be a single mode as a string or an array of modes.  make it an array for easy processing
    if (!(renderAs instanceof Array)) {
        renderAs = [renderAs];
    }

    //create a new plotted query from the template
    var $plottedQuery;
    if (layer.plottedQuery) {
        
        refreshThisQuery = true;
        //use the plotted query that was passed
        $plottedQuery = layer.plottedQuery;
        delete layer.plottedQuery;
        
        //clear previous data
        try { $plottedQuery.data('distanceLimitCircle').setMap(null); } catch (err) { }
        $plottedQuery.removeData().data(layer).addClass('loading').find('.legend-showhide, .legend, .legend-moreless').hide().filter('.legend').empty();
        //$plottedQuery.find('.drop-menu-wrapper,.glyphicon-remove-circle').css('visibility','hidden');
        $plottedQuery.find('.status').html("{!$Label.MA_Refreshing_query}...");
    }
    else {
        $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data(layer).prependTo($('#PlottedQueriesTable'));
        //$plottedQuery.find('.drop-menu-wrapper,.glyphicon-remove-circle').css('visibility','hidden');
        setTimeout(function () { $('#PlottedQueriesTable').slimScroll({ scrollBy: 0 - $('#PlottedQueriesTable').scrollTop() }); }, 500);
        $plottedQuery.find('.status').html("{!$Label.MA_Running_Query}...");
    }
    
    $plottedQuery.find('.queryIcon').hide();
    $plottedQuery.find('.loading-icon').show();

    //this is legacy support.  trying to move to data('savedQueryId') but data('id') is probably used a lot
    if (layer.savedQueryId) {
        $plottedQuery.data('id', layer.savedQueryId);
    }
    //add the attribute     
    //Add a unique plotted query ID to the attributes when the query is plotted             
    //this links to the listview table that can be viewed.      
    /*if($plottedQuery.attr('qid') === undefined) {
        qid = layer.savedQueryId + Date.now().getTime();
    } else {
        qid = $plottedQuery.attr('qid');
    }*/
    
    var attr = $plottedQuery.attr('qid');
    if (typeof attr !== typeof undefined && attr !== '') {
        qid = $plottedQuery.attr('qid');
        //you needed the data not attr
        $plottedQuery.data('qid',qid);
        $plottedQuery.attr('qid', qid);
    }
    else {
        qid = layer.savedQueryId + Date.now().getTime();
        $plottedQuery.data('qid',qid);
        $plottedQuery.attr('qid', qid);
    }
    
    try {
        //BEGIN MA ANALYTICS
        jQuery.ajax({
            url: '/apex/MATreeAJAXResources?action=store_layer_analytics&track=true&subtype=Marker Layer&id=' + layer.savedQueryId,
            type: 'GET',
            dataType: 'JSON',
        }).done ( function (res) {
            //console.log(res);
            if( NewLayerNavigationEnabled() ) {
                MALayers.loadRecent();
            }
        }).error ( function(err) {
            //console.log(err);
        });
        //END MA ANALYTICS
    } catch (err) {
        console.log(err);
    }

    //add listview settings object      
    $plottedQuery.data('listViewSettings', { 
        pageNumber: 1, 
        pageSize: 10, 
        selectedIds: [], 
        startIndex: 0,
        selectedIds: [],
        currentSort: { columnToSort: '', sort: '' },
        filterCount: 0,
        queryCount: 0,
        filters: []
    });        
    //add a recordList array        
    $plottedQuery.data('recordList', []);
    
    //add basic info
    $plottedQuery.data('componentIndex', ++MA.componentIndex);
    if (layer.savedQueryId) {
        $plottedQuery.find('.basicinfo-name').text($('#SQTree #'+layer.savedQueryId+' a').clone().children().remove().end().text());        //the added complication is just used to get the top-level text element (the actual structure has an ins element that has extra text in it)
        $plottedQuery.find('.basicinfo-baseobjectname').text($('#SQTree #'+layer.savedQueryId).attr('title'));
    }
    else {
        $plottedQuery.find('.basicinfo-name').text(layer.name || 'Map It');
        $plottedQuery.find('.basicinfo-baseobjectname').text("{!$Label.MA_Plotting}");
        //hide the mod edit dots
        $plottedQuery.find('.query-options').hide();
        //adjust sizing for aesthetics
        $plottedQuery.find('.visibility-wrapper').css('width','60px');
        $plottedQuery.find('.basicinfo').css({'width':'65%','max-width':'65%'});
    }
    
    //check if visible area query
    if(visibleAreaOnly) {
        //add check for this query
        $plottedQuery.find('#select-VisibleArea').attr('checked',true);

        //show refresh query button
        $('#visibleAreaRefeshMap').addClass('visible');

        $plottedQuery.addClass('visibleOnly');
    }
    else {
        $plottedQuery.removeClass('visibleOnly');
        //remove check for this query
        $plottedQuery.find('#select-VisibleArea').removeAttr('checked');
    }

    //add on click buttons
    if(refreshThisQuery == false) {
        //update this query if visible area is changed
        $plottedQuery.on('change','#select-VisibleArea',function() {
            var checked = $(this).attr('checked') == 'checked' ? true : false;
            if(checked) {
                //plot visible area
                $plottedQuery.data('visibleAreaOnly',true);
            }
            else {
                //plot all
                $plottedQuery.data('visibleAreaOnly',false);
            }
            refreshQuery($plottedQuery);
        });
        
        $plottedQuery.on('change','#select-hide',function () {
            var checked = $(this).attr('checked') == 'checked' ? true : false;
            //update drop menu depending on what is rendered
            if(checked == true) {
                //loop over list and render selections
                var list = $plottedQuery.find('.item-selectable.sudo-active');
                var l = list.length;
                var renderIndex = 0;
                var doneRender = false
                
                if(l != 0) {
                    renderQuery($plottedQuery, $(list[renderIndex]).removeClass('sudo-active').find('a').attr('data-renderAs'), function () {
                        renderIndex++;
                        if(renderIndex != l) {
                            renderQuery($plottedQuery, $(list[renderIndex]).removeClass('sudo-active').find('a').attr('data-renderAs'), function () {
                                renderIndex++;
                                if(renderIndex != l) {
                                    renderQuery($plottedQuery, $(list[renderIndex]).removeClass('sudo-active').find('a').attr('data-renderAs'), function () {
                                        renderIndex++;
                                        if(renderIndex != l) {
                                            renderQuery($plottedQuery, $(list[renderIndex]).removeClass('sudo-active').find('a').attr('data-renderAs'), function () {
                                                renderIndex++;
                                                if(renderIndex != l) {
                                                    //should not get here will rewrite when more time
                                                }
                                                else {
                                                    doneRender = true;
                                                }  
                                            });
                                        }
                                        else {
                                            doneRender = true;
                                        } 
                                    });
                                }
                                else {
                                    doneRender = true;
                                }  
                            });
                                }
                        else {
                            doneRender = true;
                        }
                    });
                }
                else {
                    doneRender = true;
                }

                var intvar = setInterval(function(){ 
                    if(doneRender) {
                        clearInterval(intvar);
                        $plottedQuery.removeClass('loading');
                        updateQueryInfo($plottedQuery);
                        $plottedQuery.find('.queryIcon').show();
                        $plottedQuery.find('.loading-icon').hide();

                        //listview refresh when hiding entire query
                        // tabOptions = {
                        //     layerId: $plottedQuery.data('qid'),
                        //     isSelectedTab: $plottedQuery.data('qid') === 'SelectedTab',
                        //     isExport: false
                        // };
                        // MAListView.DrawTab(tabOptions);
                    }
                },500);
            }
            else {
                //loop over list and render selections
                var list = $plottedQuery.find('.item-selectable.active');
                $plottedQuery.attr('ignore-sudo-class',true);
                var l = list.length;
                var renderIndex = 0;
                var doneUnrender = false;
                unrenderQuery($plottedQuery, $(list[renderIndex]).addClass('sudo-active').find('a').attr('data-renderAs'), function () {
                    renderIndex++;
                    if(renderIndex != l) {
                        unrenderQuery($plottedQuery, $(list[renderIndex]).addClass('sudo-active').find('a').attr('data-renderAs'), function () {
                            renderIndex++;
                            if(renderIndex != l) {
                                unrenderQuery($plottedQuery, $(list[renderIndex]).addClass('sudo-active').find('a').attr('data-renderAs'), function () {
                                    renderIndex++;
                                    if(renderIndex != l) {
                                        unrenderQuery($plottedQuery, $(list[renderIndex]).addClass('sudo-active').find('a').attr('data-renderAs'), function () {
                                            renderIndex++;
                                            if(renderIndex != l) {
                                                //should not get here will rewrite when more time
                                            }
                                            else {
                                                doneUnrender = true;
                                            }  
                                        });
                                    }
                                    else {
                                        doneUnrender = true;
                                    } 
                                });
                            }
                            else {
                                doneUnrender = true;
                            }  
                        });
                            }
                    else {
                        doneUnrender = true;
                    }
                });


                var intvar = setInterval(function(){ 
                    if(doneUnrender) {
                        clearInterval(intvar);
                        $plottedQuery.removeClass('loading');
                        $plottedQuery.removeAttr('ignore-sudo-class');
                        updateQueryInfo($plottedQuery);
                        $plottedQuery.find('.queryIcon').show();
                        $plottedQuery.find('.loading-icon').hide();

                        //listview refresh when hiding entire query
                        // tabOptions = {
                        //     layerId: $plottedQuery.data('qid'),
                        //     isSelectedTab: $plottedQuery.data('qid') === 'SelectedTab',
                        //     isExport: false
                        // };
                        // MAListView.DrawTab(tabOptions);
                    }
                },500);

                
            }
        });

        //update heatmap options
        $plottedQuery.on('click','.updateHeatmap',function() {

            //update the heatmap layer
            try{
                //check that radius and intensity are numbers
                if(isNaN($plottedQuery.find('#heatIntensity').val()) || isNaN($plottedQuery.find('#heatRadius').val())) {
                    NotifyError('Heatmap Error.','"Max Intensity" and "Radius" values must be valid numbers.')
                    return false;
                }

                //update the plottedQuery with new values
                var heatmapOptions = $plottedQuery.data('advancedOptions').all;
                heatmapOptions.heatmapDissipating = $plottedQuery.find('#heatDissipate').is(':checked') == true ? 'true' : 'false';
                heatmapOptions.heatmapOpacity = $plottedQuery.find('.heatmapOpacity').val();
                heatmapOptions.heatmapRadius = $plottedQuery.find('#heatRadius').val();
                heatmapOptions.heatmapMaxIntensity = $plottedQuery.find('#heatIntensity').val();

                $plottedQuery.data('heatmapLayer').set('maxIntensity', parseFloat(heatmapOptions.heatmapMaxIntensity));
                $plottedQuery.data('heatmapLayer').set('radius', parseFloat(heatmapOptions.heatmapRadius));
                $plottedQuery.data('heatmapLayer').set('opacity', parseFloat(heatmapOptions.heatmapOpacity));
                $plottedQuery.data('heatmapLayer').set('dissipating', $plottedQuery.find('#heatDissipate').is(':checked') );
            }
            catch (e) {
                //do nothing
            }

            try {
                //save
                $.ajax({
                    url: "/services/data/v32.0/query?q=SELECT sma__AdvancedOptions__c FROM sma__MASavedQry__c where id='"+$plottedQuery.data('id')+"'",
                    type: 'GET',
                    dataType: 'JSON',
                    data: {},
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', "OAuth " + MA.SessionId);
                        xhr.setRequestHeader('Accept', "application/json");
                        //usually not needed but when you are
                        xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
                        xhr.setRequestHeader('Access-Control-Allow-Methods', 'GET');
                    },
                    success: function (response)
                    {
                        if(response.records.length > 0) {
                            //parse the response
                            var record = JSON.parse(response.records[0].sma__AdvancedOptions__c);

                            //update the record
                            record.heatmapDissipating = $plottedQuery.find('#heatDissipate').is(':checked') == true ? 'true' : 'false';
                            record.heatmapOpacity = $plottedQuery.find('.heatmapOpacity').val();
                            record.heatmapRadius = $plottedQuery.find('#heatRadius').val();
                            record.heatmapMaxIntensity = $plottedQuery.find('#heatIntensity').val();

                            //stringigy the field data for sForce
                            var data = JSON.stringify(record);

                            //now save the changes to database
                            var patchObj = {
                                "sma__AdvancedOptions__c" : data
                            }
                            $.ajax({
                                url: "/services/data/v32.0/sobjects/sma__MASavedQry__c/"+$plottedQuery.data('id')+"",
                                type: 'PATCH',
                                dataType: 'JSON',
                                contentType: "application/json",
                                data: JSON.stringify(patchObj),
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader('Authorization', "OAuth " + MA.SessionId);
                                    xhr.setRequestHeader('Accept', "application/json");
                                },
                                success: function (response)
                                {
                                    //nothing to do if successful
                                },
                                error: function (response) {
                                    NotifyError('Save Error', 'The heatmap changes were unable to be permenatly saved for '+$plottedQuery.data("savedQueryName")+'.');
                                    MA.log(response);
                                }
                            });

                        }
                    },
                    error: function (response) {
                        MA.log('Unable to save heatmap options',response);
                    }
                });
            }
            catch (e) {
                MA.log('Unable to get heatmap options',e)
            }
        });

        $plottedQuery.on('mouseenter','.drop-menu-wrapper',function(event) {
            var $button = $(this);
            var menuItemPos = $button.position();
            //get position to show menu
            var topPos = menuItemPos.top + 25; //+25px for button size

            if($button.is('.query-visibility')){
                $plottedQuery.find('.renderButtons').css('top',topPos);
                $plottedQuery.find('.plotted-visibile-icon, .renderButtons').addClass('active');
            }
            else if ($button.is('.query-options')) {
                $plottedQuery.find('.query-menu-options').css('top',topPos);
                $plottedQuery.find('.plotted-menu-icon, .query-menu-options').addClass('active');
            }
        });
        $plottedQuery.on('mouseleave','.drop-menu-wrapper',function(event) {
            $('.drop-down-menu, .btn-lg').removeClass('active');
        });

        //store original mode if we go back below 500
        $plottedQuery.attr('data-origrender',renderAs[0]);

        if((!IsCorporateAdmin && options.nodeType == 'CorporateSavedQuery' && options.modify == false) || ($plottedQuery.data('recordIds') != null && $plottedQuery.data('recordIds').length == 1))
        {
            $plottedQuery.find('.edit-query').remove();
        }
        else {
            $plottedQuery.on('click','.edit-query',function(event) {
                launchQueryEditor(MA.resources.QueryBuilder+pageSuffix+'?q='+$plottedQuery.data('savedQueryId')+'&qi='+$plottedQuery.index());
            });
        }

        if($plottedQuery.data('recordIds') != null && $plottedQuery.data('recordIds').length == 1)
        {
            $plottedQuery.find('.refresh-query').remove();
        }
        else {
            $plottedQuery.on('click','.refresh-query',function(event) {
                //hide icon, show loading
                $plottedQuery.find('.queryIcon').hide();
                $plottedQuery.find('.loading-icon').show();

                refreshQuery($plottedQuery);
            });
        }

        $plottedQuery.on('click','.fit-query',function(event) {
            ZoomToFit({ queries: [$plottedQuery] });
        });
    }
    
    //show plotted queries
    if (options.showLayers) {
        SlideToPlottedQueries();
    }
    
    //populate default data
    $.extend($plottedQuery.data(), {
        recordsToGeocode: [],
        numGeocodeRequestsOut: 0,
        numSuccessfulGeocodes: 0,
        numFailedGeocodes: 0,
        visibleAreaOnly: visibleAreaOnly || false,
        proximityObjects: []
    });
    
    //analyze the query to get the total number of records
    analyzeQuery({
        plottedQuery: $plottedQuery.addClass('testing'),
        callback: function (success, records) {
            //status
            $plottedQuery.find('.status').html("{!$Label.MA_Analyzing_Query}...");
            UpdateAddToCampaignButton();
            
            //add the color/image to the plotted query if this is a static marker query
            if ($plottedQuery.data('markerMetadata').ColorAssignmentType == 'Static')
            {
                var iconColor = $plottedQuery.data('markerMetadata').IconColor;
                if (iconColor.indexOf('image:') == 0)
                {
                    //image
                    if (imgLoaderDimensions[iconColor.split('image:')[1]]) {
                        $plottedQuery.find('.color-box').replaceWith('<img class="queryIcon" style="display:none; width: 20px;" src="'+MA.SitePrefix+'/servlet/servlet.FileDownload?file='+iconColor.split('image:')[1]+'" />');
                    }
                }
                else
                {
                    //color
                    var $magIcon = $('#templates .svg-mag-glass').clone().wrap('<div/>').parent().html()
                            .replace(/__FILL_COLOR__/g, iconColor.split(':')[0]);
                    $plottedQuery.find('.color-box').replaceWith($magIcon);
                }
            }
            else if ($plottedQuery.data('markerMetadata').ColorAssignmentType == 'Dynamic-Label') {
                $plottedQuery.find('.color-box').replaceWith('<span style="font-size: 24px;vertical-align: middle;margin-right: 4px;color:#217AA6;display:none;" class="MAIcon ion-chatbox queryIcon"></span>');
            }
            
            //set a timeout to refresh the query if needed
            var refreshInterval = $plottedQuery.data('refreshInterval');
            if (refreshInterval) {
                var refreshIntervalParts = refreshInterval.split(' ');
                var refreshUnit = refreshIntervalParts[1];
                var refreshTimeoutValue = parseInt(refreshIntervalParts[0]) * (refreshUnit == 'sec' ? 1000 : 60000);
                setTimeout(function () { refreshQuery($plottedQuery, refreshTimeoutValue); }, refreshTimeoutValue);
            }
            
            //loop through the returned record ids and send them out for processing in batches
            var recordBatch = [];
            var recordList = [];
            $.each(records, function (index, record) {
                
                record.tooltip1Value = null;
            	record.tooltip2Value = null;
            	record.tooltip3Value = null;
            	record.tooltip4Value = null;
            	record.tooltip5Value = null;
            	record.tooltip6Value = null;
            	record.tooltip7Value = null;
            	record.tooltip8Value = null;
        				            	
                if (recordBatch.length < 2000)
                {
                    recordBatch.push(index);
                    // recordList.push({ layerId: qid, recordId: record.contentKey.split('-')[1], isVisible: true });
                }
                else
                {
                    //this batch is full.  send it to be processed
                    processBatch($plottedQuery, recordBatch);
                    
                    //move on to the next batch
                    recordBatch = [];
                    recordBatch.push(index);
                    // recordList.push({ layerId: qid, recordId: record.contentKey.split('-')[1], isVisible: true });
                }
            });
            
            //send the last batch if needed
            if (recordBatch.length > 0){
                processBatch($plottedQuery, recordBatch);
            }
            
            //all of the batches have been sent for processing.  start a poller that will periodically check if processing is complete
            $plottedQuery.data(
                'processingInterval', 
                setInterval(function () {
                
                    //loop through all records.  we're done if everything has been processed
                    var processingComplete = true;
                    var numRecords = 0;
                    var numProcessed = 0;
                    $.each($plottedQuery.data('records'), function (index, record) {
                        if (!record.isProcessed) {
                            processingComplete = false;
                        }
                        else {
                            numProcessed++;
                        }
                        numRecords++;
                    });
                    
                    //keep track of the total number of records for use later
                    $plottedQuery.data('numRecords', numRecords);
                    
                    //status
                    $plottedQuery.find('.status').html("{!$Label.MA_Processing}: " + numProcessed + " {!$Label.MA_of} " + numRecords);
                    
                    //if we're done processing, we need to send geocode requests for those records that do not have lat/long information
                    if (processingComplete)
                    {
                         $("#listview-accesstab").addClass("show-lv-accesstab");
                        clearInterval($plottedQuery.data('processingInterval'));
                        
                        //status
                        var needGeocodeCounter = $plottedQuery.data('recordsToGeocode').length;
                        $plottedQuery.data('numGeocodeRequestsNeeded', needGeocodeCounter).data('numGeocodeRequestsCompleted', 0).find('.status').html("{!$Label.MA_Geocoding}: 0 of " + needGeocodeCounter);
                        
                        //build a finish function to be called when geocoding is complete
                        function geocodingComplete(){
                            clearInterval($plottedQuery.data('geocodingInterval'));
                                    
                            //status
                            $plottedQuery.find('.status').html("{!$Label.MA_Collecting_Bad_Addresses}: ");
                            
                            //populate the bad address window with any bad address from this query
                            updateMissingAddressContent($plottedQuery);
                            
                            //status
                            $plottedQuery.find('.status').html("{!$Label.MA_Creating_Markers}: ");
                            
                            var addressFields = $plottedQuery.data('addressFields');
                            
                            //create markers in batches
                            var markerCount = 0;
                            var batchMarkerCount = 0;
                            setTimeout(function doCreateMarkers () {
                                var done = true;

                                $.each($plottedQuery.data('records'), function (index, record) {
                                    if (!record.marker && MA.Util.testLatLng(record.markerLatitude, record.markerLongitude)) {
                                        
                                        recordList.push({ layerId: qid, recordId: record.contentKey.split('-')[1], isVisible: true });
                                        
                                        record.tooltip1Value = null;
        				            	record.tooltip2Value = null;
        				            	record.tooltip3Value = null;
        				            	record.tooltip4Value = null;
        				            	record.tooltip5Value = null;
        				            	record.tooltip6Value = null;
        				            	record.tooltip7Value = null;
        				            	record.tooltip8Value = null;
                                        
                                        
                                        if ($plottedQuery.data('tooltips')[0])
                                        {
                                            if($plottedQuery.data('tooltips')[0].RelationshipName != null) {
                                                
                                                //blb changed 8/6/2015 8:58AM EST
                                                //var relation = record.record[$plottedQuery.data('tooltips')[0].FieldName].split('.');
                                                var relation = $plottedQuery.data('tooltips')[0].FieldName.split('.');
                                                record.tooltip1Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[0].FieldName)) {
                                                
                                                record.tooltip1Value = record.record[$plottedQuery.data('tooltips')[0].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[1])
                                        {
                                            if($plottedQuery.data('tooltips')[1].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[1].FieldName.split('.');
                                                record.tooltip2Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[1].FieldName)) {

                                                record.tooltip2Value = record.record[$plottedQuery.data('tooltips')[1].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[2])
                                        {
                                            if($plottedQuery.data('tooltips')[2].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[2].FieldName.split('.');
                                                record.tooltip3Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[2].FieldName)) {

                                                record.tooltip3Value = record.record[$plottedQuery.data('tooltips')[2].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[3])
                                        {
                                            if($plottedQuery.data('tooltips')[3].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[3].FieldName.split('.');
                                                record.tooltip4Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[3].FieldName)) {

                                                record.tooltip4Value = record.record[$plottedQuery.data('tooltips')[3].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[4])
                                        {
                                            if($plottedQuery.data('tooltips')[4].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[4].FieldName.split('.');
                                                record.tooltip5Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[4].FieldName)) {

                                                record.tooltip5Value = record.record[$plottedQuery.data('tooltips')[4].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[5])
                                        {
                                            if($plottedQuery.data('tooltips')[5].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[5].FieldName.split('.');
                                                record.tooltip6Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[5].FieldName)) {

                                                record.tooltip6Value = record.record[$plottedQuery.data('tooltips')[5].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[6])
                                        {
                                            if($plottedQuery.data('tooltips')[6].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[6].FieldName.split('.');
                                                record.tooltip7Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[6].FieldName)) {

                                                record.tooltip7Value = record.record[$plottedQuery.data('tooltips')[6].FieldName];

                                            }
                                        }
                                        
                                        if ($plottedQuery.data('tooltips')[7])
                                        {
                                            if($plottedQuery.data('tooltips')[7].RelationshipName != null) {

                                                var relation = $plottedQuery.data('tooltips')[7].FieldName.split('.');
                                                record.tooltip8Value = record.record[relation[0]] != undefined ? record.record[relation[0]][relation[1]] : '';

                                            } else if (record.record.hasOwnProperty($plottedQuery.data('tooltips')[7].FieldName)) {

                                                record.tooltip8Value = record.record[$plottedQuery.data('tooltips')[7].FieldName];

                                            }
                                        }
                                        
                                        /*
                                        record.tooltip1Value = extractTooltipValue($plottedQuery.data('tooltips')[0], record);
        				            	record.tooltip2Value = extractTooltipValue($plottedQuery.data('tooltips')[1], record);
        				            	record.tooltip3Value = extractTooltipValue($plottedQuery.data('tooltips')[2], record);
        				            	record.tooltip4Value = extractTooltipValue($plottedQuery.data('tooltips')[3], record);
        				            	record.tooltip5Value = extractTooltipValue($plottedQuery.data('tooltips')[4], record);
        				            	record.tooltip6Value = extractTooltipValue($plottedQuery.data('tooltips')[5], record);
        				            	record.tooltip7Value = extractTooltipValue($plottedQuery.data('tooltips')[6], record);
        				            	record.tooltip8Value = extractTooltipValue($plottedQuery.data('tooltips')[7], record);
        				            	*/
        				            	
        				            	
        				            	record.street = extractValue(record.record, addressFields.Street);
        				            	record.city = extractValue(record.record, addressFields.City);
        				            	record.state = extractValue(record.record, addressFields.State);
        				            	record.zip = extractValue(record.record, addressFields.Zip);
        				            	record.country = extractValue(record.record, addressFields.Country);
        				            	
        				            	
        				            	
        				            	
                                        
                                        record.marker = CreateMarkerFromRecord(record);
                                        record.clusterMarker = CreateMarkerFromRecord(record, {isForCluster:true});
                                        record.scatterMarker = CreateMarkerFromRecord(record, {isForScatter:true});
                                        record.marker.qid = qid;
                                        markerCount++;
                                        batchMarkerCount++;
                                    }
                                    
                                    if (markerCount >= (userSettings.maxQuerySize || MA.defaults.maxQuerySize)) { 
                                        return false;
                                    }
                                    else if (batchMarkerCount >= 100) {
                                        done = false;
                                        batchMarkerCount = 0;
                                        $plottedQuery.find('.status').html("{!$Label.MA_Creating_Markers}: " + markerCount);
                                        setTimeout(doCreateMarkers, 10);
                                        return false;
                                    }
                                });
                                
                                //if we're done creating markers then move on to rendering
                                if (done) {
                                
                                    //populate marker labels
                                    $plottedQuery.data('recordList', recordList);
                                    $plottedQuery.data('numMarkers', markerCount);
                                    
                                    $plottedQuery.find('.legend-row').each(function () {
                                        $(this).find('.visiblemarkers').text('0');
                                        $(this).find('.of').text('of');
                                        $(this).find('.totalmarkers').text($(this).data('numMarkers'));
                                        
                                        //mark and show this legend row based on whether or not it has markers (used for the show more/less functionality)
                                        if ($(this).data('numMarkers') > 0){
                                            $(this).show();
                                        }
                                        else {
                                            $(this).addClass('empty');
                                        }
                                    });
                                    
                                    //update legend show/hide features based on the data
                                    if ($plottedQuery.find('.legend-row').length > 0) {
                                        $plottedQuery.find('.legend-showhide').show();
                                    }
                                    if ($plottedQuery.find('.legend-row.empty').length > 1) {
                                        $plottedQuery.find('.legend-moreless').show();
                                    }

                                    //handle default modes in the render queue
                                    while (renderAs.indexOf('Default') != -1) {
                                        if ($plottedQuery.data('advancedOptions') && $plottedQuery.data('advancedOptions').defaultRenderMode) {
                                            renderAs.splice(renderAs.indexOf('Default'), 1, $plottedQuery.data('advancedOptions').defaultRenderMode == 'Default' ? 'Markers' : $plottedQuery.data('advancedOptions').defaultRenderMode);
                                        }
                                        else {
                                            renderAs.splice(renderAs.indexOf('Default'), 1, 'Markers');
                                        }
                                    }

                                    //if there are more than 500 markers, replace Markers with Clusters in the render queue
                                    if (markerCount > {!AutomaticClusterThreshold}) {
                                        if (renderAs.indexOf('Markers') != -1 && renderAs.indexOf('Cluster') != -1) {
                                            renderAs.splice(renderAs.indexOf('Markers'), 1);
                                            $plottedQuery.attr('data-showcluster', true);
                                        }
                                        else if (renderAs.indexOf('Markers') != -1) {
                                            renderAs.splice(renderAs.indexOf('Markers'), 1, 'Cluster');
                                            $plottedQuery.attr('data-showcluster', true);
                                        }
                                    }
                                    else {
                                        //now under, do original
                                        if(($plottedQuery.attr('data-origrender') == 'Default' || $plottedQuery.attr('data-origrender') == 'Markers') && $plottedQuery.attr('data-showcluster') == 'true') {
                                            //do not remove cluster if we added it manually
                                            renderAs.splice(renderAs.indexOf('Cluster'), 1, 'Markers');
                                            $plottedQuery.attr('data-showcluster', false);
                                        }
                                    }
                                    
                                    //For layers that have no real legend...
                                    if($plottedQuery.find('.legend-row').length === 0 && renderAs[0] === 'Markers') {
                                        
                                        var rowMarker = $plottedQuery.data('markerMetadata').IconColor || '';
                                        //MATestStuff.test = $plottedQuery;
                                        //Build the single row legend.
                                        
                                        var legendRowHTML = '<tr class="legend-row other" style="" onclick="HideSingleRow(this);"><td class="legend-checkbox-wrapper">'
                                                          + '<input type="checkbox" class="legend-checkbox" checked="checked" id="legend-checkbox-0" data-rule="3">'
                                                          + '<label for="legend-checkbox-0"></label></td><td class="legend-text">All</td>'
                                                          + '<td class="visiblemarkers-new">'+markerCount+'</td>'
                                                          + '<td class="of">of</td>'
                                                          + '<td class="totalmarkers-new">'+markerCount+'</td>'
                                                          + '<td class="legend-color" data-color="'+rowMarker+'"><img src="https://product-api-prod.cloudbilt.com/marker/marker.php?marker='+rowMarker.replace('#', '')+'" height="16px"></td></tr>';
                                                          
                                        $plottedQuery.find('table.legend').append(legendRowHTML);
                                        
                                        $plottedQuery.find('table.legend').show();
                                        $plottedQuery.find('.legend-showhide').show();
                                    }

                                    //render the query in each mode that was requested
                                    setTimeout(function doRender() {
                                        var mode = renderAs.shift();

                                        //status
                                        $plottedQuery.find('.status').html("{!$Label.MA_Rendering} " + mode);
                                        
                                        //render
                                        renderQuery($plottedQuery, mode, function () {
                                            
                                            //done?
                                            if (renderAs.length > 0) {
                                                
                                                //no, continue rendering
                                                setTimeout(doRender);
                                            }
                                            else {
                                            
                                                //yes, move on
                                                $plottedQuery.removeClass('loading');
                                                $plottedQuery.find('.queryIcon').show();
                                                $plottedQuery.find('.loading-icon').hide();
                                                //$plottedQuery.find('.drop-menu-wrapper,.glyphicon-remove-circle').css('visibility','visible');
                                                
                                                //if this is a Record query, we need to zoom to the record and potentially place a prox circle
                                                if ($plottedQuery.data('recordIds'))
                                                {
                                                    if ($plottedQuery.data('recordIds').length == 1) {
                                                        var mapItRecord;
                                                        
                                                        //update the name of this plotted query to include a link to the first record (should only be one record)
                                                        $.each($plottedQuery.data('records'), function (index, record) {
                                                            $plottedQuery.find('.basicinfo-name').html((layer.name || 'Map It') + ' - <a href="/'+record.record.Id+'" target="_blank">'+extractTooltipValue($plottedQuery.data('tooltips')[0], record)+'</a>');
                                                            $plottedQuery.find('.basicinfo-baseobjectname').text($plottedQuery.data('baseObjectLabel'));
                                                            mapItRecord = record;
                                                            return false;
                                                        });
                                                    
                                                        if ($('.mapit-proximity-on').is(':checked'))
                                                        {
                                                            //this is a map it query and we need to put a prox circle on the marker
                                                            try {
                                                                addProximityLayer({ 
                                                                    proximityType: 'Circle', 
                                                                    latitude: mapItRecord.markerLatitude, 
                                                                    longitude: mapItRecord.markerLongitude, 
                                                                    record: mapItRecord,
                                                                    success: function () {
                                                                        //ZoomToFit();  //this is now handled by the ma options handlers
                                                                        ChangeVisibilityWhenCircleIsAdded();
                                                                    } 
                                                                });
                                                            }
                                                            catch (err) {
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //no need for a prox circle, just zoom to fit
                                                            //ZoomToFit();  //this is now handled by the ma options handlers
                                                            //if (map.zoomLevel > 15) map.set("zoomLevel", 15); //zoom out if too close   
                                                        }
                                                    }
                                                }
                                                
                                                //update the saved query name and the base object label
                                                if ($plottedQuery.data('savedQueryId')) {
                                                    $plottedQuery.find('.basicinfo-name').html($plottedQuery.data('savedQueryName'));
                                                }
                                                $plottedQuery.find('.basicinfo-baseobjectname').html($plottedQuery.data('baseObjectLabel'));
                                                
                                                //reload any popups that this may have affected
                                                refreshPopups();
                                                
                                                //success callback
                                                options.success();
                                            }
                                        });
                                    
                                    });

                                    //if done then re-plot query
                                    MAListView.Sort('13', $plottedQuery.data('qid'));
                                    MAListView.ConstructTab($plottedQuery.data('qid'));
                                    
                                }
                                
                            }, 20);
                        }
                        
                        //keep sending requests until we're up to 10 or there's nothing left to geocode
                        var initialRequestCounter = 0;
                        var recordsToGeocode = $plottedQuery.data('recordsToGeocode');
                        if (recordsToGeocode.length == 0)
                        {
                            geocodingComplete();
                        }
                        else if (recordsToGeocode.length < 15) {
                            $plottedQuery.data({ numGeocodeRequestsNeeded: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length });
                            $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));

                            var itemsToUpdate = [];
                            var recordMap = {};
                            $.each(recordsToGeocode, function (i, record) {
                                recordMap[record.record.Id] = record;
                            });

                            var numSuccess = 0;
                            var numFail = 0;
                            var doGeo = function () {
                                var record = recordsToGeocode.splice(0, 1)[0];
                                MA.Geocoding.geocode({ address: record.markerAddress }, function (response) {
                                    if (!response.success) { response.result = { IsBadAddress: true }; }
                                    $.extend(record, {
                                        isBadAddress    : response.result.IsBadAddress,
                                        latitude        : response.result.Latitude,
                                        longitude       : response.result.Longitude,
                                        markerLatitude  : response.result.Latitude,
                                        markerLongitude : response.result.Longitude
                                    });

                                    //keep track of this item for updating the db (also need parent record id if address information is inherited)
                                    var item = { Operation: 'Geocode', Priority: 1, RequestData: { recordId: record.record.Id, address: record.markerAddress }, ResponseData: response.result };
                                    var addressObject = MA.Util.g(record.plottedQuery.data(), 'coordinateFields.AddressObject') || 'SAME';
                                    if (addressObject != 'SAME') {
                                        item.RequestData.addressObjectId = record.record[addressObject];
                                    }
                                    itemsToUpdate.push(item);

                                    //keep track of success rate
                                    if (recordMap[item.RequestData.recordId].isBadAddress) {
                                        numFail++;

                                    }
                                    else {
                                        recordMap[item.RequestData.recordId].latLng = new google.maps.LatLng(response.result.Latitude, response.result.Longitude);
                                        
                                    }
                                    $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - 1);
                                    $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                    
                                    if (recordsToGeocode.length > 0) {
                                        doGeo();
                                    }
                                    else {
                                        $plottedQuery.data({ numSuccessfulGeocodes: numSuccess, numFailedGeocodes: numFail });
                                        $plottedQuery.find('.status').html('Saving Geocodes...');
                                        doSave();
                                    }
                                });
                            };
                            var doSave = function () {
                                $.post(MA.resources.Geocode+pageSuffix+'?core.apexpages.devmode.url=0', { action: 'updateRecordsFromQueueItems', serializedItems: JSON.stringify(itemsToUpdate), baseObjectId: $plottedQuery.data('baseObjectId') }, function (response) {
                                    if (response.success) {
                                        $.each(response.updatedRecords, function (i, record) {
                                            $.extend(recordMap[record.Id].record, record);
                                        });
                                    }
                                    else
                                    {
                                        //still proceed, but log an error that we couldn't write back to the database
                                        MA.log('Unable to write back to the database', response);
                                    }
                                    geocodingComplete();
                                }, 'json').fail(function () { callback({ success: true, numSuccess: numSuccess, numFail: numFail }); MA.log('Unable to write back to the database'); });
                            };

                            doGeo();
                        }
                        else if (parseInt('{!geocodeThreads}') > 0)
                        {
                            //add threads if needed
                            if (MA.Geocoding.threads.length == 0) {
                                MA.Geocoding.addThreads();
                            }

                            $plottedQuery.data({ numGeocodeRequestsNeeded: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length, numGeocodeRequestsOut: recordsToGeocode.length });
                            $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));

                            var itemsToUpdate = [];
                            var recordMap = {};
                            $.each(recordsToGeocode, function (i, record) {
                                recordMap[record.record.Id] = record;
                            });

                            var numSuccess = 0;
                            var numFail = 0;
                            $.each(recordsToGeocode, function (i, record) {
                                MA.Geocoding.threadedGeocode({ address: record.markerAddress, callback: function (request) {

                                    //populate the record with coordinate data
                                    $.extend(record, {
                                        isBadAddress    : request.result.IsBadAddress,
                                        latitude        : request.result.Latitude,
                                        longitude       : request.result.Longitude,
                                        markerLatitude  : request.result.Latitude,
                                        markerLongitude : request.result.Longitude
                                    });

                                    //keep track of this item for updating the db (also need parent record id if address information is inherited) - FYI, this is using the queue structure just so we don't have to rewrite the save routine.  Might want to change this later
                                    var item = { Operation: 'Geocode', Priority: 1, RequestData: { recordId: record.record.Id, address: record.markerAddress }, ResponseData: request.result };
                                    var addressObject = MA.Util.g(record.plottedQuery.data(), 'coordinateFields.AddressObject') || 'SAME';
                                    if (addressObject != 'SAME') {
                                        item.RequestData.addressObjectId = record.record[addressObject];
                                    }
                                    itemsToUpdate.push(item);

                                    //keep track of success rate
                                    if (record.isBadAddress) {
                                        numFail++;

                                    }
                                    else {
                                        record.latLng = new google.maps.LatLng(request.result.Latitude, request.result.Longitude);
                                        
                                    }
                                    $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - 1);
                                    $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut')) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                }});
                            });

                            //interval to wait for completion
                            var saveRequestsOut = 0;
                            var geoInterval = setInterval(function ()
                            {
                                //if geocoding is complete, show feedback to user
                                if ($plottedQuery.data('numGeocodeRequestsOut') == 0) {
                                    $plottedQuery.find('.status').html('Saving Geocodes...');
                                }

                                //check for completion
                                if ($plottedQuery.data('numGeocodeRequestsOut') == 0 && itemsToUpdate.length == 0 && saveRequestsOut == 0)
                                {
                                    //done geocoding and saving
                                    clearInterval(geoInterval);
                                    $plottedQuery.data({ numSuccessfulGeocodes: numSuccess, numFailedGeocodes: numFail });
                                    geocodingComplete();
                                }
                                else if (itemsToUpdate.length > 90 || (itemsToUpdate.length > 0 && $plottedQuery.data('numGeocodeRequestsOut') == 0))
                                {
                                    //time to send the next save batch because we have > 90 items to update or we're done geocoding (so we should send a batch even if there are < 90)
                                    saveRequestsOut++;
                                    $.post(MA.resources.Geocode+pageSuffix+'?core.apexpages.devmode.url=0', { action: 'updateRecordsFromQueueItems', serializedItems: JSON.stringify(itemsToUpdate.splice(0, 90)), baseObjectId: $plottedQuery.data('baseObjectId') }, function (response) {
                                        if (response.success) {
                                            $.each(response.updatedRecords, function (i, record) {
                                                $.extend(recordMap[record.Id].record, record);
                                            });
                                        }
                                        else
                                        {
                                            //still proceed, but log an error that we couldn't write back to the database
                                            MA.log('Unable to write back to the database', response);
                                        }
                                        saveRequestsOut--;
                                    }, 'json').fail(function () { saveRequestsOut--; MA.log('Unable to write back to the database'); });
                                }
                            }, 1000);
                        }
                        else
                        {
                            /* Non-Queue Code
                            MA.Geocoding.geocodeMultipleRecords(
                                { records: recordsToGeocode, baseObjectId: $plottedQuery.data('baseObjectId') },
                                function done (numSuccess, numFail) {
                                    $plottedQuery.data({ numSuccessfulGeocodes: numSuccess, numFailedGeocodes: numFail });
                                    geocodingComplete();
                                },
                                function step (count) {
                                    $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + count + ' of ' + recordsToGeocode.length);
                                }
                            );
                            */

                            while (recordsToGeocode.length > 0 && initialRequestCounter < 10)
                            {
                                initialRequestCounter++;
                                var recordsToSend = recordsToGeocode.splice(0, 50);
                                $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + recordsToSend.length);
                                geocodeMultipleRecords(recordsToSend, $plottedQuery.data('baseObjectId'), function handleGeocode (numSuccess, numFail) {
                                    $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') - numSuccess - numFail);
                                    $plottedQuery.find('.status').html("{!$Label.MA_Geocoding}: " + ($plottedQuery.data('numGeocodeRequestsNeeded') - $plottedQuery.data('numGeocodeRequestsOut') - recordsToGeocode.length) + ' of ' + $plottedQuery.data('numGeocodeRequestsNeeded'));
                                    $plottedQuery.data('numSuccessfulGeocodes', $plottedQuery.data('numSuccessfulGeocodes') + numSuccess);
                                    $plottedQuery.data('numFailedGeocodes', $plottedQuery.data('numFailedGeocodes') + numFail);
                                    
                                    //send out a new request if there are any.  move on to rendering if we're done
                                    if (recordsToGeocode.length > 0) {
                                        var nextRecordsToSend = recordsToGeocode.splice(0, 50);
                                        $plottedQuery.data('numGeocodeRequestsOut', $plottedQuery.data('numGeocodeRequestsOut') + nextRecordsToSend.length);
                                        geocodeMultipleRecords(nextRecordsToSend, $plottedQuery.data('baseObjectId'), handleGeocode);
                                    }
                                    else if ($plottedQuery.data('numGeocodeRequestsOut') == 0) {
                                        geocodingComplete();
                                    }
                                });//end geocode record
                            }//end while
                        }
                    }
                }, 500)
            ); 
        }//analyze callback
    });//analyzeQuery
    
    //check if we need to hide the refresh area buttoon
    hideVisibleAreaButton();
    
    return $plottedQuery;
}

//options: { id: obj.attr('id'), visibleAreaOnly: false }
function PlotFolder(options)
{
    //console.log('doClick',options.doClick);
    
    //send a request to get the ids of all saved queries in this folder
    $.ajax({
        url: MA.resources.Tree+'?action=get_folder_queries',
        type: 'POST',
        dataType: 'JSON',
        data: { id: options.id },
        success: function (response)
        {
            //plot each query
            $.each(response.data, function (index, query) {
                //check if this was a general plot all click (markers)
                if(options.renderAs == 'Markers') {
                    //plot the saved maker method
                    if(query.sma__AdvancedOptions__c != null) {
                        try {
                            var advOpt = JSON.parse(query.sma__AdvancedOptions__c);
                            PlotQuery({ savedQueryId: query.Id }, advOpt.defaultRenderMode, options.visibleAreaOnly, { showLayers: false });
                        }
                        catch (e) {
                            //just plot markers
                            PlotQuery({ savedQueryId: query.Id }, options.renderAs, options.visibleAreaOnly, { showLayers: false });
                        }
                    }
                    else {
                        PlotQuery({ savedQueryId: query.Id }, options.renderAs, options.visibleAreaOnly, { showLayers: false });
                    }
                }
                else {
                    PlotQuery({ savedQueryId: query.Id }, options.renderAs, options.visibleAreaOnly, { showLayers: false });
                }
            });
            
            //show the layers pane
            if(options.doClick !== undefined) {
                if(options.doClick === true) {
                    $('#tabs-nav-plotted').click();
                }
            } else {
                $('#tabs-nav-plotted').click();
            }
            $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
        },
        error: function (response) {}
    });
    
    //send a request to get the ids of all saved territories in this folder
    $.ajax({
        url: MA.resources.Tree+'?action=get_folder_territories',
        type: 'POST',
        dataType: 'JSON',
        data: { id: options.id },
        success: function (response)
        {
            //plot each query
            $.each(response.data || [], function (index, territory) {
                if(territory.sma__CustomGeometry__c) {
                    MACustomShapes.drawV2({ id: territory.Id })
                }
                else {
                    drawShapeLayer({ id: territory.Id });
                }
            });
            $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
        },
        error: function (response) {}
    });
    
    //send a request to get the ids of all saved favorites in this folder
    $.ajax({
        url: MA.resources.Tree+'?action=get_folder_favorites',
        type: 'POST',
        dataType: 'JSON',
        data: { id: options.id },
        success: function (response)
        {
            //plot each query
            $.each(response.data || [], function (index, favorite) {
                PlotFavoriteLocation({ id: favorite.Id });
            });
            $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
        },
        error: function (response) {}
    });
}

function ReturnSubMenu()
{
    return BaseObjectsForSubMenu;
}

function DoOnCompleteNewForSavedQry(NodeName,NodeId,baseObjectLabel,ParentNodeId,pNodeType,pIsCustom,pQueryType,pRel,pIsDynamic,advancedOptions)
{
    //Make New Node
    Debug("DoOnCompleteNewForSavedQry");
    if (NewLayerNavigationEnabled())
    {
        MALayers.refreshFolder();
        $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
    }
    else
    {
        $("#SQTree").jstree("create","#" + ParentNodeId,"last",{attr : {id: NodeId, advanced: advancedOptions,NodeType: pNodeType, rel: pRel, IsCustom: pIsCustom, title: baseObjectLabel, querytype: pQueryType+(pIsDynamic ? '-Dynamic' : '')}, data: NodeName, QueryType:pQueryType+(pIsDynamic ? '-Dynamic' : '')},null,true);
    }
    
    //Hide Popup
    ClosePopupWindow();
}

function DoOnCompleteEditSavedQry(NodeName,NodeId,colorAssignmentType,isDynamic,advancedOptions)
{
    //Edit Existing Node
    if (NewLayerNavigationEnabled())
    {
        MALayers.refreshFolder();
        $('div#PlottedQueriesWrapper').find('div.plotted-watermark').hide();
    }
    else
    {
        $("#SQTree").jstree('rename_node', '#' + NodeId , NodeName);
        $("#SQTree #"+NodeId)
            .attr('rel', colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery')
            .attr('advanced',advancedOptions)
            .attr('querytype', (colorAssignmentType == 'Static' ? 'Standard' : 'Legend') + (isDynamic ? '-Dynamic' : ''));
        
    }
    
    
    //Hide Popup
    ClosePopupWindow();
}

/////////////////////////
/////////////////////////

        

       function ToggleMissingAddressContent(obj)
       {
            if ($(obj).html() == "{!$Label.MA_Show}")
            {
                $(obj).html("{!$Label.MA_Hide}");
            }
            else
            {
                $(obj).html("{!$Label.MA_Show}");
            }
            
            $(obj).parent().next().slideToggle('slow', function() {
                // Animation complete.
            });
       }
       
        function ExportMissingAddresses(exportAll)
        {
            //get the list of addresses we need to export depending on whether or not we're exporting all
            var $addressesToExport = exportAll
                ? $('#MissingAddressesContent .missingaddress')
                : $('#MissingAddressesContent .missingaddress-checkbox:checked').closest('.missingaddress');
                
            //loop through the addresses and compile a clean list to send
            var missingAddresses = [];
            var uniqueMissingAddressesMap = {};
            $addressesToExport.each(function () {
            
                //make sure we haven't already added this record 
                if (uniqueMissingAddressesMap[$(this).data('exportData').recordId]) { return; }
                
                //add this record
                uniqueMissingAddressesMap[$(this).data('exportData').recordId] = true;
                missingAddresses.push($(this).data('exportData'));
                
            });
                
            //console.log('missingAddresses:', missingAddresses);
            
            //create an export form and post it
            $("<form method='POST' action='"+MA.resources.MissingAddressExport+"' target='_blank'></form>").append(
                $("<input type='hidden' name='serializedMissingAddresses' />").attr('value', JSON.stringify(missingAddresses))
            ).appendTo('body').submit().remove();
        }
  
        function UpdateAddToCampaignButton()
        {
            Debug("Running UpdateAddToCampaignButton");
        
            var showButton = false;
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 

                if ($(this).data('baseObjectName') == 'Contact' || $(this).data('baseObjectName') == 'Lead')
                {
                    showButton = true;
                }
            });
            
            if (showButton) { $('#AddToCampaignButton').show(400); }
            else { $('#AddToCampaignButton').hide(400); }
        }
        
        function AddVisibleToCampaign(records)
        {
            //start building lists of valid contact/lead ids to add to a campaign
            var contactIds = [];
            var leadIds = [];
        
            //was a specific record id passed?
            if (typeof records == 'string')
            {
                //yes, so just use that id
                var recordId = records;
                if (recordId.substring(0, 3) == '003') { contactIds.push(recordId); }
                else if (recordId.substring(0, 3) == '00Q') { leadIds.push(recordId); }
            }
            else if (records) 
            {
                $.each(records, function (index, record) {
                    if (record.record.Id.substring(0, 3) == '003') { contactIds.push(record.record.Id); }
                    else if (record.record.Id.substring(0, 3) == '00Q') { leadIds.push(record.record.Id); }
                });
            }
            else
            {
                //no, so loop through all plotted queries looking for visible leads and contacts
                $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
                
                    //loop through the visible markers for this query
                    $.each($(this).data('records'), function(index, record) { 
                        if ((record.isVisible || record.isClustered || record.isScattered) && record.record.Id.substring(0, 3) == '003')    //contact
                        {
                            contactIds.push(record.record.Id);
                        }
                        else if ((record.isVisible || record.isClustered || record.isScattered) && record.record.Id.substring(0, 3) == '00Q')   //lead
                        {
                            leadIds.push(record.record.Id);
                        }
                    });
                });
            }
            
            //make sure we got some valid ids
            if (contactIds.length > 0 || leadIds.length > 0)
            {
                LaunchPopupWindow($('#AddToCampaignPopup'), 800);
                
                //store the contact and lead ids for use later
                $('#AddToCampaignPopup').data({
                    contactIds  : contactIds,
                    leadIds     : leadIds
                });
                
                //show a loading message on the popup
                $('#addtocampaign-options-wrapper').hide();
                $('#addtocampaign-select-wrapper').show();
                $('#addtocampaign-filter-name').val('');
                $('#addtocampaign-select-selectiondetails span.link.clearselections').click();
                showLoading($('#addtocampaign-select-grid-wrapper'), 'Loading Campaigns...');
                
                //send a request to get the available campaigns
                $.getJSON(MA.resources.Tooltip+"?action=get_campaigns", function (response) {
                    if (response.success)
                    {
                        var campaigns = {};
                        $.each(response.campaigns, function (index, campaign) {
                            campaigns[campaign.Id] = $.extend(campaign, {isSelected: false});
                        });
                        $('#addtocampaign-select-grid').data('records', campaigns);
                        
                        grid_Search.call($('#addtocampaign-select-grid'));
                    }
                });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible contacts or leads');
            }
        }
        
        function AddToCampaign_Step2()
        {
            //show loading
            showLoading($('#addtocampaign-select-wrapper'));
            
            //validation
            if (!($('#addtocampaign-select-selectiondetails').data('numSelected') > 0))
            {
                //need to select a campaign, show error
                showError($('#addtocampaign-select-wrapper'), 'You must select one or more campaigns before proceeding');
                return;
            }
            
            //show step 2
            hideMessage($('#addtocampaign-select-wrapper'));
            $('#addtocampaign-select-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
            $('#addtocampaign-options-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
            
            //show loading
            showLoading($('#addtocampaign-options-wrapper'), 'Loading Statuses...');
            
            //send request for campaign options
            var campaignIds = [];
            var campaignsMap = {};
            $.each($('#addtocampaign-select-grid').data('records'), function (id, record) {
                if (record.isSelected) { 
                    campaignIds.push(id);
                    campaignsMap[id] = record; 
                }
            });
            $.getJSON(MA.resources.Tooltip+"?action=get_campaign_statuses", { serializedCampaignIds: JSON.stringify(campaignIds) }, function (response) {
                if (response.success)
                {
                    var $grid = $('#addtocampaign-options-grid');
                    
                    //populate the options grid
                    $grid.find('.campaign-options-row').remove();
                    $.each(campaignsMap, function (id, record) {
                        
                        var $row = populateCampaignOptionsRow($('#templates .campaign-options-row').clone().data('record', record).data('statusOptions', response.campaignStatuses[id]));
                        $grid.append($row);
                        
                    });
                    
                    //hide the loading indicator
                    hideMessage($('#addtocampaign-options-wrapper'));
                }
                else
                {
                    showError($('#addtocampaign-options-wrapper'), 'Unable to load statuses');
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                showError($('#addtocampaign-options-wrapper'), 'Unable to request statuses');
            });
        }
        
        function AddToCampaign_Step1()
        {
            //go back to step 1
            $('#addtocampaign-select-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
            $('#addtocampaign-options-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function AddToCampaign_Finish()
        {
            //show loading
            showLoading($('#addtocampaign-options-wrapper'), 'Adding...');
            
            //prepare request data
            var requestData = {
                serializedContactIds    : JSON.stringify($('#AddToCampaignPopup').data('contactIds')),
                serializedLeadIds       : JSON.stringify($('#AddToCampaignPopup').data('leadIds'))
            };
            
            //send request to add members to each selected campaign
            $('#addtocampaign-options-grid').data('numRequestsOut', 0);
            $('#addtocampaign-options-grid').data('numRequestsSuccessful', 0);
            $('#addtocampaign-options-grid').data('numRequestsFailed', 0);
            $('#addtocampaign-options-grid .campaign-options-row').each(function () {
                if ($(this).find('.campaign-status select').length > 0) {
                    
                    var $campaignOptionRow = $(this);
                    var contactIds = [];
                    var leadIds = [];
                    
                    //loop over the contacts and send in batches
                    $.each($('#AddToCampaignPopup').data('contactIds'), function (index, contactId) {
                        contactIds.push(contactId);
                        
                        //send out this batch if it's ready
                        if (contactIds.length >= 200) {
                            AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
                        } 
                    });
                    
                    //loop over the leads and send in batches
                    $.each($('#AddToCampaignPopup').data('leadIds'), function (index, leadId) {
                        leadIds.push(leadId);
                        
                        //send out this batch if it's ready
                        if (contactIds.length + leadIds.length >= 200) {
                            AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
                        } 
                    });
                    
                    //send out the last batch if needed
                    if (contactIds.length + leadIds.length > 0) {
                        AddToCampaign_SendBatch(contactIds, leadIds, $campaignOptionRow.data('record').Id, $campaignOptionRow.find('.campaign-status select').val(), $campaignOptionRow.find('.campaign-override input').is(':checked'));
                    }
                }
            });
            
            //status update
            showLoading($('#addtocampaign-options-wrapper'), 'Adding...' + $('#addtocampaign-options-grid').data('numRequestsOut') + ' batches remaining');
            
            //set up an interval to poll for completion of all of the requests
            $('#addtocampaign-options-grid').data(
                'addToCampaignInterval',
                setInterval(function () {
                
                    if ($('#addtocampaign-options-grid').data('numRequestsOut') > 0)
                    {
                        showLoading($('#addtocampaign-options-wrapper'), 'Adding...' + $('#addtocampaign-options-grid').data('numRequestsOut') + ' batches remaining');
                    }
                    else
                    {
                        //done adding, show results
                        clearInterval($('#addtocampaign-options-grid').data('addToCampaignInterval'));
                        var msgFunction = $('#addtocampaign-options-grid').data('numRequestsFailed') == 0 ? showSuccess : showWarning;
                        msgFunction(
                            $('#addtocampaign-options-wrapper'), 
                            $('#addtocampaign-options-grid').data('numRequestsSuccessful') + ' batches successful, ' + $('#addtocampaign-options-grid').data('numRequestsFailed') + ' failures',
                            2000,
                            function () {
                                ClosePopupWindow();
                            }
                        );
                    }
                
                }, 500)
            );
        }
        
        function AddToCampaign_SendBatch(contactIds, leadIds, campaignId, campaignStatus, overrideExistingMemberStatus)
        {
            //build request data
            var requestData = {
                serializedContactIds            : JSON.stringify(contactIds),
                serializedLeadIds               : JSON.stringify(leadIds),
                campaignId                      : campaignId,
                campaignStatus                  : campaignStatus,
                overrideExistingMemberStatus    : overrideExistingMemberStatus
            };
            
            //send request
            $('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') + 1);
            $.getJSON(MA.resources.Tooltip+"?action=add_to_campaign", requestData, function (response) {
                if (response.success)
                {
                    //increment successful batch count
                    $('#addtocampaign-options-grid').data('numRequestsSuccessful', $('#addtocampaign-options-grid').data('numRequestsSuccessful') + 1);
                }
                else
                {
                    //increment failed batch count
                    $('#addtocampaign-options-grid').data('numRequestsFailed', $('#addtocampaign-options-grid').data('numRequestsFailed') + 1);
                }
                
                //decrement pending batch count
                $('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') - 1);
            })
            .error(function(jqXHR, textStatus, errorThrown) {
                //increment failed batch count and decrement pending batch count
                $('#addtocampaign-options-grid').data('numRequestsFailed', $('#addtocampaign-options-grid').data('numRequestsFailed') + 1);
                $('#addtocampaign-options-grid').data('numRequestsOut', $('#addtocampaign-options-grid').data('numRequestsOut') - 1);
            });
            
            //clear out the contacts and leads
            contactIds.length = 0;
            leadIds.length = 0;
        }
        
        function ChangeOwnerOfVisible()
        {
            //loop through all plotted queries looking for visible records
            var recordIds = [];
            $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
            
                //loop through the visible markers for this query
                $.each($(this).data('records'), function(index, record) { 
                    if (record.isVisible || record.isClustered || record.isScattered) {
                        recordIds.push(record.record.Id);
                    }
                });
            });
            
            //go...
            ChangeOwner(recordIds);
        }
        
        function ChangeOwner(recordIds)
        {     
            //make sure we got some valid ids
            if (recordIds && recordIds.length > 0)
            {
                LaunchPopupWindow($('#ChangeOwnerPopup'), 800);
                
                //store the record ids for later use
                $('#ChangeOwnerPopup').data({
                    recordIds: recordIds
                });
                
                //show a loading message on the popup
                $('#changeowner-options-wrapper').hide();
                $('#changeowner-select-wrapper').show();
                $('#changeowner-filter-name').val('');
                $('#changeowner-options-wrapper input[type="checkbox"]').attr('checked', 'checked');
                showLoading($('#changeowner-select-grid-wrapper'), 'Loading Users...');
                
                //send a request to get the available users
                $.getJSON(MA.resources.Tooltip+"?action=get_users", function (response) {
                    if (response.success)
                    {
                        var users = {};
                        $.each(response.users, function (index, user) {
                            users[user.Id] = user;
                        });
                        $('#changeowner-select-grid').data('records', users);
                        
                        grid_Search.call($('#changeowner-select-grid'));
                    }
                });
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible markers');
            }
        }
        
        function ChangeOwner_Step1()
        {
            //go back to step 1
            $('#changeowner-select-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
            $('#changeowner-options-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function ChangeOwner_Finish()
        {
            //show loading
            showLoading($('#changeowner-options-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Updating Records...');
            
            //loop through records and send out batches
            var recordIds = [];
            $.each($('#ChangeOwnerPopup').data('recordIds'), function (index, recordId) {
                recordIds.push(recordId);
                            
                //send out this batch if it's ready
                if (recordIds.length > 200)
                {
                    ChangeOwner_SendBatch(recordIds);
                }
            });
            
            //send the last batch if needed
            if (recordIds.length > 0) {
                ChangeOwner_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($('#changeowner-options-wrapper'), 'Updating...' + $('#changeowner-options-wrapper').data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $('#changeowner-options-wrapper').data(
                'batchInterval',
                setInterval(function () {
                
                    if ($('#changeowner-options-wrapper').data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($('#changeowner-options-wrapper').data('batchInterval'));
                        
                        //show status message and then close the popup
                        if ($('#changeowner-options-wrapper').data('failureCount') == 0)
                        {
                            showSuccess($('#changeowner-options-wrapper'), $('#changeowner-options-wrapper').data('successCount') + ' records updated, 0 failures.', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                        else
                        {
                            showWarning($('#changeowner-options-wrapper'), $('#changeowner-options-wrapper').data('successCount') + ' records updated, ' + $('#changeowner-options-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                    }
                    else
                    {
                        //status update
                        showLoading($('#changeowner-options-wrapper'), 'Updating...' + $('#changeowner-options-wrapper').data('batchCount') + ' batches remaining');
                    }
                
                }, 1000)
            );
        }
        
        function ChangeOwner_SendBatch(recordIds)
        {
            //prepare request data
            var requestData = {
                serializedRecordIds : JSON.stringify(recordIds),
                ownerId             : $('#changeowner-select-grid').data('selectedRecord').Id,
                transferNotes       : $('#changeowner-notes').is(':checked'),
                transferAttachments : $('#changeowner-attachments').is(':checked'),
                transferTasks       : $('#changeowner-tasks').is(':checked'),
                transferEvents      : $('#changeowner-events').is(':checked')
            };
            
            //send request to change ownership
            $.getJSON(MA.resources.Tooltip+"?action=change_owner", requestData, function (response) {
                if (response.success)
                {
                    //count the number of successful/failed responses
                    var failures = 0;
                    var successes = 0;
                    $.each(response.results, function (index, result) {
                        if (result.success) {
                            successes++;
                        }
                        else {
                            failures++;
                        }
                    });
                    
                    //decrement the batches we have out
                    $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
                    $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + failures);
                    $('#changeowner-options-wrapper').data('successCount',$('#changeowner-options-wrapper').data('successCount') + successes);
                }
                else
                {
                    //decrement the batches we have out
                    $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
                    $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + recordIds.length);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                //decrement the batches we have out
                $('#changeowner-options-wrapper').data('batchCount', $('#changeowner-options-wrapper').data('batchCount') - 1);
                $('#changeowner-options-wrapper').data('failureCount',$('#changeowner-options-wrapper').data('failureCount') + recordIds.length);
            });
            
            //increment the batches that we have out and restart the id list
            $('#changeowner-options-wrapper').data('batchCount',$('#changeowner-options-wrapper').data('batchCount') + 1);
            recordIds.length = 0;
        }
        
        function UpdateFieldOfVisible(records)
        {
            $('#UpdateFieldPopup .field-selection').show();
            $('#UpdateFieldPopup .fieldUpdateMessage').hide();
            LaunchPopupWindow($('#UpdateFieldPopup'), 300, true);
            $('#UpdateFieldPopup').data('records', records);
            $('#UpdateFieldPopup .updatefield-query').html('<option value="--Select--">--Select--</option>').combobox().next().find('input').val('--Select--');
            $('#UpdateFieldPopup .updatefield-field-wrapper').hide();
            $('#UpdateFieldPopup .updatefield-value-wrapper').hide();
            
            //loop through the supplied records and populate the saved queries that they are included in
            $.each(records, function (index, record) {
                if ($('#UpdateFieldPopup .updatefield-query option[value="'+record.plottedQuery.index()+'"]').length == 0) {
                    $('#UpdateFieldPopup .updatefield-query').append($('<option />').attr('value', record.plottedQuery.index()).text(record.plottedQuery.data('savedQueryName')));
                }  
            });
            
            //if there is only one query option then select it
            if ($('#UpdateFieldPopup .updatefield-query option').length == 2) {
                $('#UpdateFieldPopup .updatefield-query').val($('#UpdateFieldPopup .updatefield-query option:last-child').attr('value')).change().next().find('input').val($('#UpdateFieldPopup .updatefield-query option:last-child').text());
            }
        }
        function UpdateField_QueryChanged()
        {
            //hide the value div and show loading for the field
            $('#UpdateFieldPopup .updatefield-field').html("<option value='--Select--'>--Select--</option>").combobox().next().append('<div class="loadmask" />').find('input').val('Loading...');
            $('#UpdateFieldPopup .updatefield-value-wrapper').fadeOut(400);
            
            //show or hide the field depending on whether or not a query is selected
            if ($('#UpdateFieldPopup .updatefield-query').val() == '--Select--') {
                $('#UpdateFieldPopup .updatefield-field-wrapper').fadeOut(400);
            }
            else {
                $('#UpdateFieldPopup .updatefield-field-wrapper').fadeIn(400);
                
                //send request for field options
                $.ajax({
                    url: MA.resources.Tooltip+'?action=get_editable_fields',
                    type: 'POST',
                    dataType: 'JSON',
                    data: {
                        baseObject: $('#PlottedQueriesTable > *').eq(parseInt($('#UpdateFieldPopup .updatefield-query').val())).data('baseObjectName')
                    },
                    success: function (response)
                    {
                        if (response.success)
                        {
                            $.each(response.editableFields, function (index, field) {
                                $('#UpdateFieldPopup .updatefield-field').append($('<option />').attr('value', field.value).text(field.label));
                            });
                            $('#UpdateFieldPopup .updatefield-field').next().find('input').val('--Select--');
                            $('#UpdateFieldPopup .updatefield-field').next().find('.loadmask').remove();
                        }
                        else
                        {
                        }
                    },
                    error: function (response)
                    {
                        MALog(response);
                    }
                });
            }
        }
        function UpdateField_FieldChanged()
        {
            if ($('#UpdateFieldPopup .updatefield-field').val() == '--Select--') {
                $('#UpdateFieldPopup .updatefield-value-wrapper').fadeOut(400);
            }
            else {
                $('#UpdateFieldPopup .updatefield-value-wrapper').fadeIn(400);
                $('#UpdateFieldPopup .updatefield-value').html('<span style="font-size: 10px; font-style: italic; color: #C0C0C0;">Loading...</span>');
                
                //send request to get information about this field
                $.ajax({
                    url: MA.resources.Tooltip+'?action=get_editable_field',
                    type: 'POST',
                    dataType: 'JSON',
                    data: {
                        baseObject: $('#PlottedQueriesTable > *').eq(parseInt($('#UpdateFieldPopup .updatefield-query').val())).data('baseObjectName'),
                        fieldName: $('#UpdateFieldPopup .updatefield-field').val() 
                    },
                    success: function (response)
                    {
                        if (response.success)
                        {
                            $('#UpdateFieldPopup .updatefield-value').data('fieldMetadata', response.editableField);
                            UpdateField_RenderValueField();
                        }
                        else
                        {
                        }
                    },
                    error: function (response)
                    {
                        MALog(response);
                    }
                });
            }
        }
        function UpdateField_Finish()
        {
            //show loading
            var $status = $('#UpdateFieldPopup > .loadmask-wrapper');
            showLoading($status.data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Updating Records...');
            
            //loop through records and send out batches
            var recordIds = [];
            $.each($('#UpdateFieldPopup').data('records'), function (index, record) {
                if (record.plottedQuery.index() == $('#UpdateFieldPopup .updatefield-query').val()) {
                    recordIds.push(record.record.Id);
                    
                    //send out this batch if it's ready
                    if (recordIds.length > 200) {
                        UpdateField_SendBatch(recordIds);
                    }
                }
            });
            
            //send the last batch if needed
            if (recordIds.length > 0) {
                UpdateField_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($status, 'Updating...' + $status.data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $status.data(
                'batchInterval',
                setInterval(function () {
                    if ($status.data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($status.data('batchInterval'));
                        
                        //show status message and then close the popup
                        if($status.data('failureMessage')) {
                            showWarning($status, $status.data('successCount') + ' records updated, ' + $status.data('failureCount') + ' failure(s).', 10, function () {
                                $('#UpdateFieldPopup .fieldUpdateMessage .success-msg').html('<div>'+$status.data('successCount') + ' records updated, ' + $status.data('failureCount') + ' failure(s).</div>')
                                $('#UpdateFieldPopup .fieldUpdateMessage .error-info').html($status.data('failureMessage'));
                                $status.removeData('failureMessage');
                                $('#UpdateFieldPopup .field-selection').hide();
                                $('#UpdateFieldPopup .fieldUpdateMessage').fadeIn();
                            });
                        }
                        else if ($status.data('failureCount') == 0)
                        {
                            showSuccess($status, $status.data('successCount') + ' records updated, 0 failures.', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                        else
                        {
                            showWarning($status, $status.data('successCount') + ' records updated, ' + $status.data('failureCount') + ' failure(s).', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                    }
                    else
                    {
                        //status update
                        showLoading($status, 'Updating...' + $status.data('batchCount') + ' batches remaining');
                    }
                
                }, 1000)
            );
        }
        
        function UpdateField_SendBatch(recordIds)
        {
            var $status = $('#UpdateFieldPopup > .loadmask-wrapper');
        
            //prepare request data
            var requestData = {
                serializedRecordIds : JSON.stringify(recordIds),
                fieldName           : $('#UpdateFieldPopup .updatefield-field').val(),
                newValue            : UpdateField_ExtractValueField()
            };
            
            //send request to change ownership
            $.getJSON(MA.resources.Tooltip+"?action=update_field", requestData, function (response) {
                if (response.success)
                {
                    //count the number of successful/failed responses
                    var failures = 0;
                    var successes = 0;
                    var failureMessage = '';
                    $.each(response.results, function (index, result) {
                        if (result.success) {
                            successes++;
                        }
                        else {
                            if(result.errors) {
                                var err = result.errors[0]; 
                                failureMessage += '<div>'+err.statusCode+':</div><div style="padding-left: 15px;"> '+err.message+'</div></br>'
                            }
                            failures++;
                        }
                    });
                    //decrement the batches we have out
                    $status.data('batchCount', $status.data('batchCount') - 1);
                    $status.data('failureCount', $status.data('failureCount') + failures);
                    $status.data('successCount', $status.data('successCount') + successes);
                    $status.data('failureMessage',failureMessage);
                }
                else
                {
                    //decrement the batches we have out
                    $status.data('batchCount', $status.data('batchCount') - 1);
                    $status.data('failureCount',$status.data('failureCount') + recordIds.length);
                    //check what type of error message
                    $status.data('failureMessage',response.details);
                    //$status.data('failureMessage');
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.data('failureCount',$status.data('failureCount') + recordIds.length);
                $status.data('failureMessage',textStatus);
            });
            
            //increment the batches that we have out and restart the id list
            $status.data('batchCount',$status.data('batchCount') + 1);
            recordIds.length = 0;
        }
        function UpdateField_RenderValueField()
        {
            var $valueCell = $('#UpdateFieldPopup .updatefield-value');
            var fieldMetadata = $valueCell.data('fieldMetadata');
            var editType = displayTypeMetadata[fieldMetadata.DisplayType] ? displayTypeMetadata[fieldMetadata.DisplayType].editType : '';
            var renderType = displayTypeMetadata[fieldMetadata.DisplayType] ? displayTypeMetadata[fieldMetadata.DisplayType].renderType : '';
        
            switch (editType)
            {
                case 'string':
                
                    $valueCell.html("<input type='text' />").find('input').focus();
                    break;
                    
                case 'number':
            
                    $valueCell.html("<input type='text' />").find('input').focus();
                    break;
            
                case 'textarea':
                
                    $valueCell.html($("<textarea />")).find('textarea').focus().select();
                    break;
                
                case 'picklist':
                
                    var $picklistOptions = $('<select class="combobox" />');
                    $.each(fieldMetadata.PicklistOptions, function (index, option) {
                        $picklistOptions.append($('<option />').attr('value', option.value).text(option.label));
                    });
                    
                    $valueCell.html($picklistOptions).find('.combobox').combobox().next().find('input').focus().select();
                    break;
                    
                case 'multipicklist':
                    
                    var $picklistOptions = $('<select class="multiselect" />');
                    $.each(fieldMetadata.PicklistOptions, function (index, option) {
                        $picklistOptions.append($('<option />').attr('value', option.value).text(option.label));
                    });
                         
                    $valueCell.html($picklistOptions).find('.multiselect').multiselect({
                        noneSelectedText: 'Click here to select options',
                        selectedList: 2
                    }).multiselectfilter().multiselect('uncheckAll');
                    break;
            
                case 'boolean':
                
                    $valueCell.html("<input type='checkbox' />").find('input').focus();
                    break;
                    
                case 'date':
                
                    $valueCell.html("<input type='text' class='date' />").find('input').datepicker({ dateFormat: formatUserLocaleDate({datepicker   : true}) }).focus();
                    break;
            
                case 'reference':
                
                    var $lookup = $('<input type="text" class="autocomplete" />');
                    $valueCell.html($lookup).find('input').focus();
                    
                    $lookup.autocomplete({
                        focus: function (event, ui) {
                            $lookup.val(ui.item.label);
                            return false;
                        },
                        select: function (event, ui) {
                            $lookup.val(ui.item.label).data('selectedItem', ui.item);
                            event.stopPropagation();
                            return false;
                        },
                        search: function () {
                            $lookup.addClass('searching');
                        },
                        source: function(request, response) {
                            $.ajax({
                                url: MA.resources.Tooltip+'?action=get_lookup_options',
                                type: 'POST',
                                dataType: 'JSON',
                                data: {
                                    baseObject: fieldMetadata.BaseObject,
                                    fieldName: fieldMetadata.ActualFieldName,
                                    term: request.term
                                },
                                success: function (successResponse)
                                {
                                    if (!successResponse.success)
                                    {
                                        response([]);
                                        return;
                                    }
                                    
                                    response(successResponse.lookupOptions);
                                },
                                error: function () 
                                {
                                    response([]);
                                },
                                complete: function ()
                                {
                                    $lookup.removeClass('searching');
                                }
                            });
                        }
                    });
                    break;
                    
                default:

                    //no matching type so do nothing
                    $valueCell.html('<span style="font-size: 10px; font-style: italic; color: #C0C0C0;">Invalid Field Type...</span>');
                    return;
            }
        }
        function UpdateField_ExtractValueField()
        {
            var $valueCell = $('#UpdateFieldPopup .updatefield-value');
            var fieldMetadata = $valueCell.data('fieldMetadata');
            var editType = displayTypeMetadata[fieldMetadata.DisplayType] ? displayTypeMetadata[fieldMetadata.DisplayType].editType : '';
        
            switch (editType)
            {
                case 'string':
                
                    return $valueCell.find('input').val();
                    break;
                    
                case 'number':
            
                    return $valueCell.find('input').val();
                    break;
            
                case 'textarea':
                
                    return $valueCell.find('textarea').val();
                    break;
                
                case 'picklist':
                
                    return $valueCell.find('select').val();
                    break;
                    
                case 'multipicklist':
                    
                    return $valueCell.find('.multiselect').multiselect('getChecked').map(function () {
                        return this.value;
                    }).get().join(';');
                    break;
            
                case 'boolean':
                
                    return $valueCell.find('input').is(':checked');
                    break;
                    
                case 'date':
                
                    return $valueCell.find('input').val();
                    
                    break;
            
                case 'reference':
                
                    try {
                        return $valueCell.find('.autocomplete').data('selectedItem').value;
                    }
                    catch (err) {
                        return '';
                    }
                    break;
                    
                default:

                    //no matching type so return blank
                    return '';
            }
        }
        
        function NewTask(recordIdMap)
        {
            LaunchPopupWindow($('#NewTaskPopup'), 800);
            
            //store the record ids for later use
            $('#NewTaskPopup').data({
                recordIdMap: recordIdMap
            });
            
            //clear out any existing data
            $('#newtask-details-wrapper').hide();
            $('#newtask-assignto-wrapper').show();
            $('#newtask-filter-name').val('');
            $('#newtask-details-wrapper input, #newtask-details-wrapper textarea').val('');
            $('#newtask-assignto-type-static').click();
            showLoading($('#newtask-select-grid-wrapper'), 'Loading Users...');
            
            //send a request to get the available users
            $.getJSON(MA.resources.Tooltip+"?action=get_users", function (response) {
                if (response.success)
                {
                    var users = {};
                    $.each(response.users, function (index, user) {
                        users[user.Id] = user;
                    });
                    $('#newtask-select-grid').data('records', users);
                    
                    grid_Search.call($('#newtask-select-grid'));
                }
            });
            
            //send a request to get the available user lookup fields for these base objects
            var $baseObjTable = $('#newtask-assignto-type-dynamic-table').html('<tr><th>Base Object</th><th>Task Owner</th></tr>');
            $.getJSON(MA.resources.Tooltip+"?action=get_lookup_fields", { baseObjects: JSON.stringify(Object.keys(recordIdMap)), relatedObjects: JSON.stringify(['User']) }, function (response) {
                if (response.success)
                {
                    $.each(response.lookupOptions, function (baseObject, options) {
                        var $row = $('<tr><td class="label" /><td class="value"><select class="field" /></td></tr>').appendTo($baseObjTable);
                        $row.find('.label').text(recordIdMap[baseObject].baseObjectLabel);
                        
                        var $fieldOptions = $row.find('.field');
                        $.each(options, function (index, option) {
                            $fieldOptions.append($('<option/>').attr('value', option.value).text(option.label));
                        });
                    });
                }
            });
        }
        
        function NewTask_Step1()
        {
            //go back to step 1
            $('#newtask-assignto-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
            $('#newtask-details-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewTask_Step2()
        {
            //show step 2
            $('#newtask-assignto-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
            $('#newtask-details-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewTask_Finish()
        {
            //show loading
            showLoading($('#newtask-details-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Adding Tasks...');
            
            //loop through records and send out batches
            $.each($('#NewTaskPopup').data('recordIdMap'), function (baseObjectName, map) 
            {
                var recordIds = [];
                $.each(map.recordIds, function (index, recordId) {
                    recordIds.push(recordId);
                                
                    //send out this batch if it's ready
                    if (recordIds.length > 200)
                    {
                        NewTask_SendBatch(recordIds, baseObjectName, map.baseObjectLabel);
                    }
                });
                
                //send the last batch if needed
                if (recordIds.length > 0) {
                    NewTask_SendBatch(recordIds, baseObjectName, map.baseObjectLabel);
                }
            });
            
            //done sending batches, update status message
            showLoading($('#newtask-details-wrapper'), 'Adding...' + $('#newtask-details-wrapper').data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $('#newtask-details-wrapper').data(
                'batchInterval',
                setInterval(function () {
                
                    if ($('#newtask-details-wrapper').data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($('#newtask-details-wrapper').data('batchInterval'));
                        
                        //show status message and then close the popup
                        if ($('#newtask-details-wrapper').data('failureCount') == 0)
                        {
                            showSuccess($('#newtask-details-wrapper'), $('#newtask-details-wrapper').data('successCount') + ' records added, 0 failures.', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                        else
                        {
                            showWarning($('#newtask-details-wrapper'), $('#newtask-details-wrapper').data('successCount') + ' records added, ' + $('#newtask-details-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                    }
                    else
                    {
                        //status update
                        showLoading($('#newtask-details-wrapper'), 'Adding...' + $('#newtask-details-wrapper').data('batchCount') + ' batches remaining');
                    }
                
                }, 1000)
            );
        }
        
        function NewTask_SendBatch(recordIds, baseObjectName, baseObjectLabel)
        {
            //prepare request data
            var requestData = {
                serializedRecordIds : JSON.stringify(recordIds),
                assignmentType      : $('[name="newtask-assignto-type"]:checked').val(),
                baseObjectName      : baseObjectName,
                subject             : $('#newtask-details-subject').val(),
                dueDate             : $('#newtask-details-duedate').val(),
                description         : $('#newtask-details-description').val()
            };
            
            //add assignment type data
            if (requestData.assignmentType == 'Static') {
                requestData.ownerId = $('#newtask-select-grid').data('selectedRecord').Id;
            }
            else {
                $('#newtask-assignto-type-dynamic-table tr').each(function () {
                    if ($(this).find('.label').text() == baseObjectLabel) {
                        requestData.ownerField = $(this).find('.value select').val();
                        return;
                    }
                });
            }
            
            //send request to add tasks
            $.getJSON(MA.resources.Tooltip+"?action=add_tasks", requestData, function (response) {
                if (response.success)
                {
                    //count the number of successful/failed responses
                    var failures = 0;
                    var successes = 0;
                    $.each(response.results, function (index, result) {
                        if (result.success) {
                            successes++;
                        }
                        else {
                            failures++;
                        }
                    });
                    
                    //decrement the batches we have out
                    $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
                    $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + failures);
                    $('#newtask-details-wrapper').data('successCount',$('#newtask-details-wrapper').data('successCount') + successes);
                }
                else
                {
                    //decrement the batches we have out
                    $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
                    $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + recordIds.length);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                //decrement the batches we have out
                $('#newtask-details-wrapper').data('batchCount', $('#newtask-details-wrapper').data('batchCount') - 1);
                $('#newtask-details-wrapper').data('failureCount',$('#newtask-details-wrapper').data('failureCount') + recordIds.length);
            });
            
            //increment the batches that we have out and restart the id list
            $('#newtask-details-wrapper').data('batchCount',$('#newtask-details-wrapper').data('batchCount') + 1);
            recordIds.length = 0;
        }
        
        function NewEvent(recordIdMap)
        {
            LaunchPopupWindow($('#NewEventPopup'), 800);
            
            //store the record ids for later use
            $('#NewEventPopup').data({
                recordIdMap: recordIdMap
            });
            
            //clear out any existing data
            $('#newevent-details-wrapper').hide();
            $('#newevent-assignto-wrapper').show();
            $('#newevent-filter-name').val('');
            $('#newevent-details-wrapper input, #newevent-details-wrapper textarea').val('');
            $('#newevent-assignto-type-static').click();
            
            //set default values
            var startMoment = moment();
            var endMoment = moment().add('hours', 1);
            $('#newevent-details-startdate').val(startMoment.format(dateFormat.replace(/y/g, 'Y').replace(/d/g, 'D')));
            $('#newevent-details-starthour').val(startMoment.format('h'));
            $('#newevent-details-startminute').val(startMoment.format('mm'));
            $('#newevent-details-startperiod').val(startMoment.format('A'));
            $('#newevent-details-enddate').val(endMoment.format(dateFormat.replace(/y/g, 'Y').replace(/d/g, 'D')));
            $('#newevent-details-endhour').val(endMoment.format('h'));
            $('#newevent-details-endminute').val(endMoment.format('mm'));
            $('#newevent-details-endperiod').val(endMoment.format('A'));
            
            //show loading
            showLoading($('#newevent-select-grid-wrapper'), 'Loading Users...');
            
            //send a request to get the available users
            $.getJSON(MA.resources.Tooltip+"?action=get_users", function (response) {
                if (response.success)
                {
                    var users = {};
                    $.each(response.users, function (index, user) {
                        users[user.Id] = user;
                    });
                    $('#newevent-select-grid').data('records', users);
                    
                    grid_Search.call($('#newevent-select-grid'));
                }
            });
            
            //send a request to get the available user lookup fields for these base objects
            var $baseObjTable = $('#newevent-assignto-type-dynamic-table').html('<tr><th>Base Object</th><th>Event Owner</th></tr>');
            $.getJSON(MA.resources.Tooltip+"?action=get_lookup_fields", { baseObjects: JSON.stringify(Object.keys(recordIdMap)), relatedObjects: JSON.stringify(['User']) }, function (response) {
                if (response.success)
                {
                    $.each(response.lookupOptions, function (baseObject, options) {
                        var $row = $('<tr><td class="label" /><td class="value"><select class="field" /></td></tr>').appendTo($baseObjTable);
                        $row.find('.label').text(recordIdMap[baseObject].baseObjectLabel);
                        
                        var $fieldOptions = $row.find('.field');
                        $.each(options, function (index, option) {
                            $fieldOptions.append($('<option/>').attr('value', option.value).text(option.label));
                        });
                    });
                }
            });
        }
        
        function NewEvent_Step1()
        {
            //go back to step 1
            $('#newevent-assignto-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
            $('#newevent-details-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewEvent_Step2()
        {
            //go to step 2
            $('#newevent-assignto-wrapper').css('min-height', 'auto').slideUp(300, function () { $(this).css('min-height', ''); });
            $('#newevent-details-wrapper').css('min-height', 'auto').slideDown(300, function () { $(this).css('min-height', ''); });
        }
        
        function NewEvent_Finish()
        {
            //validation (this kind of validation doesn't work with alt locales so I'm removing it for now)
            var startMoment = moment($('#newevent-details-startdate').val() + ' ' + $('#newevent-details-starthour').val() + ':' + $('#newevent-details-startminute').val() + ' ' + $('#newevent-details-startperiod').val(), dateFormat.replace(/y/g, 'Y').replace(/d/g, 'D') + 'h:mm A');
            var endMoment = moment($('#newevent-details-enddate').val() + ' ' + $('#newevent-details-endhour').val() + ':' + $('#newevent-details-endminute').val() + ' ' + $('#newevent-details-endperiod').val(), dateFormat.replace(/y/g, 'Y').replace(/d/g, 'D') + 'h:mm A');
            if (!(startMoment.isValid() && endMoment.isValid())) {
                showError($('#newevent-details-wrapper'), 'Invalid Dates');
                return;
            }
            
            //show loading
            showLoading($('#newevent-details-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Adding Events...');
            
            //loop through records and send out batches
            $.each($('#NewEventPopup').data('recordIdMap'), function (baseObjectName, map) 
            {
                var recordIds = [];
                $.each(map.recordIds, function (index, recordId) {
                    recordIds.push(recordId);
                                
                    //send out this batch if it's ready
                    if (recordIds.length > 200)
                    {
                        NewEvent_SendBatch(recordIds, baseObjectName, map.baseObjectLabel);
                    }
                });
                
                //send the last batch if needed
                if (recordIds.length > 0) {
                    NewEvent_SendBatch(recordIds, baseObjectName, map.baseObjectLabel);
                }
            });
            
            //done sending batches, update status message
            showLoading($('#newevent-details-wrapper'), 'Adding...' + $('#newevent-details-wrapper').data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $('#newevent-details-wrapper').data(
                'batchInterval',
                setInterval(function () {
                
                    if ($('#newevent-details-wrapper').data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($('#newevent-details-wrapper').data('batchInterval'));
                        
                        //show status message and then close the popup
                        if ($('#newevent-details-wrapper').data('failureCount') == 0)
                        {
                            showSuccess($('#newevent-details-wrapper'), $('#newevent-details-wrapper').data('successCount') + ' records added, 0 failures.', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                        else
                        {
                            showWarning($('#newevent-details-wrapper'), $('#newevent-details-wrapper').data('successCount') + ' records added, ' + $('#newevent-details-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                    }
                    else
                    {
                        //status update
                        showLoading($('#newevent-details-wrapper'), 'Adding...' + $('#newevent-details-wrapper').data('batchCount') + ' batches remaining');
                    }
                
                }, 1000)
            );
        }
        
        function NewEvent_SendBatch(recordIds, baseObjectName, baseObjectLabel)
        {
            //prepare request data
            var requestData = {
                serializedRecordIds : JSON.stringify(recordIds),
                assignmentType      : $('[name="newevent-assignto-type"]:checked').val(),
                baseObjectName      : baseObjectName,
                subject             : $('#newevent-details-subject').val(),
                startDate           : moment($('#newevent-details-startdate').val() + ' ' + $('#newevent-details-starthour').val() + ':' + $('#newevent-details-startminute').val() + ' ' + $('#newevent-details-startperiod').val(), UserContext.dateFormat.replace('yyyy', 'YYYY').replace(/d/g, 'D') + ' h:mm A').format(formatUserLocaleDate({ moment: true })),
                endDate             : moment($('#newevent-details-enddate').val() + ' ' + $('#newevent-details-endhour').val() + ':' + $('#newevent-details-endminute').val() + ' ' + $('#newevent-details-endperiod').val(), UserContext.dateFormat.replace('yyyy', 'YYYY').replace(/d/g, 'D') + ' h:mm A').format(formatUserLocaleDate({ moment: true })),
                description         : $('#newevent-details-description').val()
            };
            
            //add assignment type data
            if (requestData.assignmentType == 'Static') {
                requestData.ownerId = $('#newevent-select-grid').data('selectedRecord').Id;
            }
            else {
                $('#newevent-assignto-type-dynamic-table tr').each(function () {
                    if ($(this).find('.label').text() == baseObjectLabel) {
                        requestData.ownerField = $(this).find('.value select').val();
                        return;
                    }
                });
            }
            
            //send request to add tasks
            $.getJSON(MA.resources.Tooltip+"?action=add_events", requestData, function (response) {
                if (response.success)
                {
                    //count the number of successful/failed responses
                    var failures = 0;
                    var successes = 0;
                    $.each(response.results, function (index, result) {
                        if (result.success) {
                            successes++;
                        }
                        else {
                            failures++;
                        }
                    });
                    
                    //decrement the batches we have out
                    $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
                    $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + failures);
                    $('#newevent-details-wrapper').data('successCount',$('#newevent-details-wrapper').data('successCount') + successes);
                }
                else
                {
                    //decrement the batches we have out
                    $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
                    $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + recordIds.length);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                //decrement the batches we have out
                $('#newevent-details-wrapper').data('batchCount', $('#newevent-details-wrapper').data('batchCount') - 1);
                $('#newevent-details-wrapper').data('failureCount',$('#newevent-details-wrapper').data('failureCount') + recordIds.length);
            });
            
            //increment the batches that we have out and restart the id list
            $('#newevent-details-wrapper').data('batchCount',$('#newevent-details-wrapper').data('batchCount') + 1);
            recordIds.length = 0;
        }
        
        function ChatterPost(recordIds)
        {
            LaunchPopupWindow($('#ChatterPostPopup'), 800);
            
            //store the record ids for later use
            $('#ChatterPostPopup').data({
                recordIds: recordIds
            });
            
            //clear out any existing data
            $('#chatterpost-content').val('');
            hideMessage($('#chatterpost-content-wrapper'));
        }
        
        function ChatterPost_Finish()
        {
            //show loading
            showLoading($('#chatterpost-content-wrapper').data({ batchCount: 0, successCount: 0, failureCount: 0 }), 'Posting...');
            
            //loop through records and send out batches
            var recordIds = [];
            $.each($('#ChatterPostPopup').data('recordIds'), function (index, recordId) {
                recordIds.push(recordId);
                            
                //send out this batch if it's ready
                if (recordIds.length > 200)
                {
                    ChatterPost_SendBatch(recordIds);
                }
            });
            
            //send the last batch if needed
            if (recordIds.length > 0) {
                ChatterPost_SendBatch(recordIds);
            }
            
            //done sending batches, update status message
            showLoading($('#chatterpost-content-wrapper'), 'Posting...' + $('#chatterpost-content-wrapper').data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $('#chatterpost-content-wrapper').data(
                'batchInterval',
                setInterval(function () {
                
                    if ($('#chatterpost-content-wrapper').data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($('#chatterpost-content-wrapper').data('batchInterval'));
                        
                        //show status message and then close the popup
                        if ($('#chatterpost-content-wrapper').data('failureCount') == 0)
                        {
                            showSuccess($('#chatterpost-content-wrapper'), $('#chatterpost-content-wrapper').data('successCount') + ' posts, 0 failures.', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                        else
                        {
                            showWarning($('#chatterpost-content-wrapper'), $('#chatterpost-content-wrapper').data('successCount') + ' posts, ' + $('#chatterpost-content-wrapper').data('failureCount') + ' failure(s).', 2000, function () {
                                ClosePopupWindow();
                            });
                        }
                    }
                    else
                    {
                        //status update
                        showLoading($('#chatterpost-content-wrapper'), 'Posting...' + $('#chatterpost-content-wrapper').data('batchCount') + ' batches remaining');
                    }
                
                }, 1000)
            );
        }
        
        function ChatterPost_SendBatch(recordIds)
        {
            //prepare request data
            var requestData = {
                serializedRecordIds : JSON.stringify(recordIds),
                content             : $('#chatterpost-content').val()
            };
            
            //send request to add tasks
            $.getJSON(MA.resources.Tooltip+"?action=chatter_post", requestData, function (response) {
                if (response.success)
                {
                    //count the number of successful/failed responses
                    var failures = 0;
                    var successes = 0;
                    $.each(response.results, function (index, result) {
                        if (result.success) {
                            successes++;
                        }
                        else {
                            failures++;
                        }
                    });
                    
                    //decrement the batches we have out
                    $('#chatterpost-content-wrapper').data('batchCount', $('#chatterpost-content-wrapper').data('batchCount') - 1);
                    $('#chatterpost-content-wrapper').data('failureCount',$('#chatterpost-content-wrapper').data('failureCount') + failures);
                    $('#chatterpost-content-wrapper').data('successCount',$('#chatterpost-content-wrapper').data('successCount') + successes);
                }
                else
                {
                    //decrement the batches we have out
                    $('#chatterpost-content-wrapper').data('batchCount', $('#chatterpost-content-wrapper').data('batchCount') - 1);
                    $('#chatterpost-content-wrapper').data('failureCount',$('#chatterpost-content-wrapper').data('failureCount') + recordIds.length);
                }
            })
            .error(function(jqXHR, textStatus, errorThrown) { 
                //decrement the batches we have out
                $('#chatterpost-content-wrapper').data('batchCount', $('#chatterpost-content-wrapper').data('batchCount') - 1);
                $('#chatterpost-content-wrapper').data('failureCount',$('#chatterpost-content-wrapper').data('failureCount') + recordIds.length);
            });
            
            //increment the batches that we have out and restart the id list
            $('#chatterpost-content-wrapper').data('batchCount',$('#chatterpost-content-wrapper').data('batchCount') + 1);
            recordIds.length = 0;
        }
        
        function updateChatterSubscriptions(shouldFollow, records)
        {
            //show a status message
            var $status = growlLoading($('#growl-wrapper'), 'Updating Subscriptions...')
                .data({ batchCount: 0, failureCount: 0 });
        
            //loop through all plotted queries looking for visible records
            var recordIds = [];
            $.each(records, function(index, record) { 
            
                //make sure this objects supports chatter
                if (record.plottedQuery.data('supportsChatter')) {
                    recordIds.push(record.record.Id);
                    
                    //send out this batch if it's ready
                    if (recordIds.length > 200) {
                        sendChatterSubscriptionsBatch($status, recordIds, shouldFollow);
                    }
                }
            });
            
            //send the last batch if needed
            if (recordIds.length > 0) {
                sendChatterSubscriptionsBatch($status, recordIds, shouldFollow);
            }
            
            //done sending batches, update status message
            $status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $status.data(
                'batchInterval',
                setInterval(function () {
                
                    if ($status.data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($status.data('batchInterval'));
                        
                        //show success
                        $status = growlSuccess($status, 'Updates Successful');
                    }
                
                }, 1000)
            );
        }
        
        function sendChatterSubscriptionsBatch($status, recordIds, shouldFollow)
        {
            //send request
            var recordCount = recordIds.length;
            $.getJSON(MA.resources.Tooltip+"?action=update_chatter_subscriptions", { serializedRecordIds: JSON.stringify(recordIds), shouldFollow: shouldFollow }, function (response) {
                if (response.success)
                {
                    
                }
                else
                {
                    $status.data('failureCount', $status.data('failureCount') + recordCount);
                }
                
                //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
            })
            .error(function () {
                //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Updating...' + $status.data('batchCount') + ' batches remaining');
            });
            
            //increment the batches that we have out and restart the id list
            $status.data('batchCount', $status.data('batchCount') + 1);
            recordIds.length = 0;
        }
        
        function ClearCoordinates_Prompt(records)
        {
            LaunchPopupWindow($('#ClearCoordinatesPopup'), 500);
            $('#ClearCoordinatesPopup').data('records', records);
        }
        
        function ClearCoordinatesForVisible(includeVerifiedCoordinates)
        {
            //show a status message
            var $status = growlLoading($('#growl-wrapper'), 'Clearing...')
                .data({ batchCount: 0, failureCount: 0 });
            
            //create a map of plotted queries to records
            var queryRecordMap = {};
            $.each($('#ClearCoordinatesPopup').data('records'), function (index, record) {
                if (includeVerifiedCoordinates || record.verifiedLatitude == '') {
                    queryRecordMap[record.savedQueryId] = queryRecordMap[record.savedQueryId] || [];
                    queryRecordMap[record.savedQueryId].push(record);
                }
            });
        
            //loop through the plotted queries map and process the records
            var queriesToClear = [];
            var queriesToUpdate = [];
            var recordCount = 0;
            $.each(queryRecordMap, function (queryId, records) { 
            
                //create a new QueryToClear that contains the information to be sent in the request
                var queryToClear = {
                    recordIds: [],
                    coordinateFields: records[0].plottedQuery.data('coordinateFields')
                };
                queriesToClear.push(queryToClear);
                
                //create a new QueryToUpdate that contains information about the markers that are being removed.  this is used to update the plotted query later
                var queryToUpdate = { 
                    plottedQuery: records[0].plottedQuery, 
                    recordsToRemove: {} 
                };
                queriesToUpdate.push(queryToUpdate);
            
                //loop through the visible markers for this query
                $.each(records, function(index, record) { 

                    //either send this Id or the address parent Id depending on how the coordinate fields are configured
                    if (queryToClear.coordinateFields.Latitude.indexOf('.') == -1) {
                        //there is no '.' in the coordinate field so this is not cross-object.  just use the record id
                        queryToClear.recordIds.push(record.record.Id);
                    }
                    else {
                        //there is a '.' so we want the Id of the parent.  get to the parent by using what is before the '.' in the coordinate field 
                        queryToClear.recordIds.push(record.record[queryToClear.coordinateFields.Latitude.split('.')[0]].Id);
                    }
                    
                    //keep track of the markers that will need to be removed from the map and the record count
                    //THERE IS AN ISSUE HERE IF WE'RE USING CROSS-OBJECT ADDRESSES AND THE OBJECT FAILS TO UPDATE.  WE WON'T KNOW WHICH MARKER FAILED.  IGNORING THIS FOR NOW
                    queryToUpdate.recordsToRemove[record.record.Id] = record;
                    recordCount++;
                    
                    //send out this batch if it's ready
                    if (recordCount > 200)
                    {
                        ClearCoordinates_SendBatch($status, queriesToClear, recordCount, queriesToUpdate);
                        recordCount = 0;
                    }
                });
            });
            
            //send the last batch if needed
            if (recordCount > 0) {
                ClearCoordinates_SendBatch($status, queriesToClear, recordCount, queriesToUpdate);
            }
            
            //done sending batches, update status message
            $status.find('span').text('Clearing...' + $status.data('batchCount') + ' batches remaining');
            
            //set an interval to track when all the batches have returned
            $status.data(
                'batchInterval',
                setInterval(function () {
                
                    if ($status.data('batchCount') == 0) 
                    {
                        //clear this interval because we're done
                        clearInterval($status.data('batchInterval'));
                        
                        //status update
                        $status = growlLoading($status, 'Removing Markers');
                        
                        //remove the needed markers from the map by looping over the queries to update
                        $.each(queriesToUpdate, function (index, queryToUpdate) {
                        
                            //loop over the markers in this query, add them to our list to remove from the map, and actually remove them from the plotted query
                            var markerCount = 0;
                            var shouldRedrawCanvas = false;
                            var $plottedQuery = queryToUpdate.plottedQuery;
                            $.each(queryToUpdate.recordsToRemove, function (recordId, record) {
                                markerCount++;
                                RemoveMarker(record.marker, { updateQueryInfo: false });
                            });
                            
                            //update query info
                            updateQueryInfo(queryToUpdate.plottedQuery);
                        });
                        
                        //show success
                        $status = growlSuccess($status, 'Done');
                    }
                
                }, 1000)
            );
        }
        
        function ClearCoordinates_SendBatch($status, queriesToClear, recordCount, queriesToUpdate)
        {
            //send request
            $.getJSON(MA.resources.Tooltip+"?action=clear_coordinates", { serializedQueriesToClear: JSON.stringify(queriesToClear) }, function (response) {
                if (response.success)
                {
                    //remove any markers that we couldn't update from the list of markers to remove
                    $.each(response.results, function (index, result) {
                        if (!result.success) {
                            $.each(queriesToUpdate, function (index, queryToUpdate) {
                                delete queryToUpdate[result.id];
                            });
                        }
                    });
                }
                else
                {
                    $status.data('failureCount', $status.data('failureCount') + recordCount);
                }
                
                //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Clearing...' + $status.data('batchCount') + ' batches remaining');
            })
            .error(function () {
                //decrement the batches we have out
                $status.data('batchCount', $status.data('batchCount') - 1);
                $status.find('span').text('Clearing...' + $status.data('batchCount') + ' batches remaining');
            });
            
            //increment the batches that we have out
            $status.data('batchCount', $status.data('batchCount') + 1);
            
            //clear out all of our ids
            $.each(queriesToClear, function (index, queryToClear) {
                queryToClear.recordIds.length = 0;
            });
        }

var MaxExportSize;
var MaxQuerySize = 2000;

function StartUpJS()
{
    //handle resizing the window
    $(window).resize(function () {
        function doResize() {
            var mapHeight = $('#mapdiv').height();
            var sidebarHeight = $('div#sidebar-content').height();
            $("#mapdiv, #mapdiv #right-shadow, #mapcontainer, .bodyDiv, .MALoading, .noSidebarCell, .oRight, .sidebarCell").css('height', Math.max(485, $(window).height() - $('#mapdiv').offset().top - 40) + "px");
            $('#sidebarCell').css('maxHeight', Math.max(485, $(window).height() - $('#mapdiv').offset().top - 40) + "px");
            $('#SQTree, #PlottedQueriesTable, #routesCalendar, #Routing-Table, #poiResults').css('height', 'auto');
            $('#SQTree').css('max-height', mapHeight - 135);
            $('#PlottedQueriesTable').css('max-height', mapHeight - 165);
            $('#routesCalendar').css('max-height', mapHeight - 205);
            $('#Routing-Table').css('max-height', mapHeight - 250);
            $('#poiResults').css('max-height', mapHeight - 225);
            $('div#foldersearch-results-contents').css('min-height', sidebarHeight - 80);
            $('div#foldersearch-results-contents').css('max-height', mapHeight - 110);
            try { routesTabSlider.redrawSlider() } catch (err) {};
        }
        doResize();
        setTimeout(doResize, 200);  //resize again later because sometimes it doesn't take
    }).resize();

    //create map
    MA.map = new google.maps.Map(document.getElementById('mapdiv'), {
        center: { lat: 36.98500309285596, lng: -97.8662109375},
        zoom: 5,
        panControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        zoomControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        mapTypeControl: false,
        scaleControl: true
    });

    //remove standard POI functionality
    MA.map.setOptions({
        styles: [
            { featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'off' }] },
            { featureType: 'transit', elementType: 'labels', stylers: [{ visibility: 'off' }] },
            { featureType: 'landscape', elementType: 'labels', stylers: [{ visibility: 'off' }] }
        ]
    });

    //handle streetview controls
    MA.map.getStreetView().setOptions({
        addressControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        panControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER },
        zoomControlOptions: { position: google.maps.ControlPosition.RIGHT_CENTER }
    });

    //handle bounds changing (various purposes)
    google.maps.event.addListener(MA.map, 'bounds_changed', function (e) {
        MA.Map.Search.autocomplete.setBounds(MA.map.getBounds());
        MAShapeLayer.ZoomOrDragEvent(e);
        
        //remove finished class from button and add update class
        $('#visibleAreaRefeshMap').removeClass('finished button-dark').addClass('update ion-android-refresh button-blue');

        //if not refreshing change text
        if(!$('#visibleAreaRefeshMap').hasClass('refreshing')) {
            $('#visibleAreaRefeshMap').text('Refresh in this area');
        }
        
        //check if any visible area queries and button is not already visible or refreshing
        if($('#PlottedQueriesContainer .visibleOnly').length >= 1 && !$('#visibleAreaRefeshMap').hasClass('visible')) {
            //show the button 
            $('#visibleAreaRefeshMap').addClass('visible');
        }
    });
    

    //add keydragzoom functionality
    MA.map.enableKeyDragZoom();

    //create canvas overlay that will be used for position support
    MA.Map.offsetOverlay = new google.maps.OverlayView();
    MA.Map.offsetOverlay.draw = function() {};
    MA.Map.offsetOverlay.setMap(MA.map);

    //spiderfier to hold markers
    MA.Map.spiderfier = new OverlappingMarkerSpiderfier(MA.map, { keepSpiderfied: true });
    MA.Map.spiderfier.addListener('click', function (marker, e) {
        if (marker.spiderfied || MA.Map.spiderfier.markersNearMarker(marker, true).length == 0) {
            marker_Click.call(marker, { markerType: 'Marker' });
        }
    });
    MA.Map.spiderfier.addListener('spiderfy', function (markersAffected, markersNotAffected) {
        $.each(markersAffected, function (i, marker) {
            marker.spiderfied = true;
        });
    });
    MA.Map.spiderfier.addListener('unspiderfy', function (markersAffected, markersNotAffected) {
        $.each(markersAffected, function (i, marker) {
            marker.spiderfied = false;
        });
    });
    
    //add drawing controls to the map
    MA.Map.Drawing.manager = new google.maps.drawing.DrawingManager({
        drawingControl: false,
        drawingControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER,
            drawingModes: [
                google.maps.drawing.OverlayType.POLYGON,
                google.maps.drawing.OverlayType.CIRCLE,
                google.maps.drawing.OverlayType.RECTANGLE
            ]
        },
        polygonOptions: {
            fillColor: '#22CC22',
            fillOpacity: 0.6,
            strokeColor: '#000000',
            strokeWeight: 4,
            editable: false
        },
        circleOptions: {
            fillColor: '#223388',
            fillOpacity: 0.6,
            strokeColor: '#882233',
            strokeWeight: 4,
            editable: false
        },
        rectangleOptions: {
            fillColor: '#FFC96B',
            fillOpacity: 0.6,
            strokeColor: '#000000',
            strokeWeight: 4,
            editable: false
        }
    });
    MA.Map.Drawing.manager.setMap(MA.map);

    //handle drawing a shape
    google.maps.event.addListener(MA.Map.Drawing.manager, 'overlaycomplete', function (overlayCompleteEvent) 
    {
        switch (overlayCompleteEvent.type) {
            case google.maps.drawing.OverlayType.POLYLINE:

                alert('POLYLINE!!!');

            break;
            case google.maps.drawing.OverlayType.POLYGON:
                var $proxLayer = addProximityLayer();
                overlayCompleteEvent.overlay.qid = $proxLayer.data('qid');
                $proxLayer.data('proxObject', overlayCompleteEvent.overlay);
                $proxLayer.find('.proximitytype').val('Polygon').change().attr('disabled','disabled');
                $proxLayer.find('.link.showoptions').click();
                ChangeVisibilityWhenCircleIsAdded();

                //handle shape-specific events
                overlayCompleteEvent.overlay.getPaths().forEach(function (path) {
                    google.maps.event.addListener(path, 'insert_at', ChangeVisibilityWhenCircleIsAdded);
                    google.maps.event.addListener(path, 'set_at', ChangeVisibilityWhenCircleIsAdded);
                    google.maps.event.addListener(path, 'remove_at', ChangeVisibilityWhenCircleIsAdded);
                });
                
                try {  totango.track('Draw Boundary (Polygon)', 'MapAnything'); } catch(err) { }

            break;
            case google.maps.drawing.OverlayType.CIRCLE:

                var $proxLayer = addProximityLayer();
                overlayCompleteEvent.overlay.qid = $proxLayer.data('qid');
                $proxLayer.data('proxObject', overlayCompleteEvent.overlay);
                $proxLayer.find('.options-circle-radius').val(overlayCompleteEvent.overlay.getRadius());
                $proxLayer.find('.options-circle-unit').val('METERS');
                $proxLayer.find('.options-circle-address').val('Lat: '+overlayCompleteEvent.overlay.getCenter().lat()+'\nLong: '+overlayCompleteEvent.overlay.getCenter().lng());
                $proxLayer.find('.link.showoptions').click();
                $proxLayer.find('.proximitytype').attr('disabled','disabled');

                //handle shape-specific events
                google.maps.event.addListener(overlayCompleteEvent.overlay, 'center_changed', ChangeVisibilityWhenCircleIsAdded);
                google.maps.event.addListener(overlayCompleteEvent.overlay, 'radius_changed', ChangeVisibilityWhenCircleIsAdded);
                
                try {  totango.track('Draw Boundary (Circle)', 'MapAnything'); } catch(err) { }

            break;
            case google.maps.drawing.OverlayType.RECTANGLE:

                var $proxLayer = addProximityLayer({ fillColor: '#FFC96B', borderColor: '#000000' });
                overlayCompleteEvent.overlay.qid = $proxLayer.data('qid');
                $proxLayer.find('.proximitytype').val('Polygon').change().attr('disabled','disabled');
                $proxLayer.data('proxObject', overlayCompleteEvent.overlay);
                $proxLayer.find('.link.showoptions').click();
                ChangeVisibilityWhenCircleIsAdded();
                
                //quick fix for polygon color defaults
                $proxLayer.find('.color-wrapper .fillcolor')[0].color.fromString('#FFCC66');
                $proxLayer.find('.color-wrapper .bordercolor')[0].color.fromString('#000000');

                //handle shape-specific events
                google.maps.event.addListener(overlayCompleteEvent.overlay, 'bounds_changed', ChangeVisibilityWhenCircleIsAdded);
                
                try {  totango.track('Draw Boundary (Rectangle)', 'MapAnything'); } catch(err) { }

            break;
        }

        //handle events
        google.maps.event.addListener(overlayCompleteEvent.overlay, 'click', function (e) {
            proximityLayer_Click({ position: e.latLng, type: overlayCompleteEvent.type, shape: this });
        });
        google.maps.event.addListener(overlayCompleteEvent.overlay, 'rightclick', function (e) {
            Shape_Context.call(this, e);
        });
        
        
        if($('#sidebar-content #tabs-nav-plotted').hasClass('tab-open'))
         {
          //do nothing tab already selected
         }
         else
         {
          //click tab to show results
               $('a[href="#tab-plotted"]').click();
         }

        //reset drawing mode
        MA.Map.Drawing.manager.setDrawingMode(null);
        $('#StopDrawingButton, #DrawPolygonButton, #DrawCircleButton, #DrawRectangleButton').removeClass('activeDrawingTool');
        $('#StopDrawingButton').addClass('activeDrawingTool');
    });
    
    //handle clicking the map
    google.maps.event.addListener(MA.map, 'click', function (e)
    {
        //check for nextclick handlers
        if (MA.events['nextclick'].length > 0) {
            MA.fire('nextclick', e);
            return;
        }

        //remove info bubble
        MA.Map.InfoBubble.hide();

        //hide context menus
        try { $('#mapcontainer').contextMenu('hide'); } catch (err) {}
        try { $.vakata.context.hide(); } catch (err) {}
    });
    
    //handle right-clicking the map
    google.maps.event.addListener(MA.map, 'rightclick', function (e) {
        Map_Context.call(this, e);
    });


    //modify the street view close button
    var streetView = MA.map.getStreetView();
    //disable the original close button
    streetView.setOptions({ enableCloseButton: false });
    //append new close button
    var closeButton = document.querySelector('#closeStreetView');
    streetView.controls[ google.maps.ControlPosition.RIGHT_TOP ].push( closeButton );
    //add new listener
    google.maps.event.addDomListener(closeButton, 'click', function(){
        streetView.setVisible(false);
    });

    
    //stop propagation of right clicks in the sidebar to avoid the map context menu displaying (unless another context menu target is clicked)
    $('#sidebar').on('contextmenu', function (e) {
        if ($(e.target).closest('.svg-marker-waypoint, .flag').length == 0) {
            e.stopPropagation();
        }
    });
    
    //map is now available for use so fire the mapready event
    MA.fire('mapready');
          
    /*Initialize Tabs*/
    $('#tabs-nav').tabs({
        remote:true,
        activate: function (event, ui)
        {
            //resize the window to make sure dimensions are correct
            $(window).resize();
        }
    }); 
    $('#tabs-SavedQry').tabs({remote:true}); 
    
    $('#Routing-Table .waypoints').sortable({
        placeholder: 'ui-state-placeholder',
        forcePlaceholderSize: true,
        cursor: 'move',
        items: '.waypoint-row',
        handle: '.index',
        update: function(ev,ui) {
            
            //relabel
            OrderNumbersOnWaypoints();
        }
    });

    
    $('#TreeTab').click(function(){
        SlideToTree();
    });
    
    $('#PlottedQueriesTab').click(function(){
        SlideToPlottedQueries();
    });  
    
    $('#DirectionsInputTab').click(function(){
        SlideToLocations();
    });
    
    $('#DirectionsOutputTab').click(function(){
        SlideToDirectionsOutput();
    });  
    
    $('#DirectionsOptionsTab').click(function(){
        SlideToDirectionsOptions();
    });

    $('#SQTree ul').children().css('font-weight', 'bold').find('li').css('font-weight','normal');          
                
     $.ajaxSetup ({  
        cache: false  
    });

    $('#AddressesNotFoundButton').click(function() {
        ShowAddressNotFoundPopup();
    });    
    $('#FavoriteLocationsButton').click(function() {
        FavoriteLocationsPopup();
        $('#FavTree').jstree('refresh')
        $('.favtree li:first a .jstree-icon').click();
        $('#FavoriteLocationsPopup .allfav-check').prop('checked', false);
    }); 
    $('#RemoveFavoriteLocationsButton').click(function() {
        RemovePlotFavLocation();
    }); 
    $('#ExportButton').click(function() {
        LaunchPopupWindow($('#ExportPopup'), 600);
    });
    $('#ZoomToFitButton').click(function() {
        try {  totango.track('Zoom to Fit', 'MapAnything'); } catch(err) { }
        ZoomToFit();
    });
    $('#SetAsHomeButton').click(function() {
        try {  totango.track('Set Default View', 'MapAnything'); } catch(err) { }
        SetDefaultMapLocation();
    });
    $('#ShowDebugWindowButton').click(function() {
        LaunchPopupWindow($('#DebugWindowPopup'), 600);
    });
    
    /*Map View Buttons*/
    $('.mapview-button').click(function() {
        //map.set("baseMapType", map[$(this).attr('data-baseMapType')]);
        $(this).closest('.menubutton').find('> span').html($(this).attr('data-label'));
    });
    
    /*Initialize Notification Container*/
    $("#container").notify({
        speed: 200,
        expires: false
    });
    
    
    /*Initialize Sidebar Actions*/
    $('#sidebar-button').click(function()
        {
            $('#sidebar').animate(
                {width:'toggle'}, 
                100, 
                function() {
                }
            );
        }
    );
    
    //Get Base Object for Sub Menu
    $.getJSON(MA.resources.Tree,"action=populate_base_objects",function(json)
    { 
        if(json.success)
        {
            //http://www.mennovanslooten.nl/blog/post/62
            
            BaseObjectsForSubMenu = [];
            $.each(json.records, function (i, record) {
                
                //remove namespace
                removeNamespace(namespace, record);
            
                var SubMenuItem = new Object();
                SubMenuItem["label"] = record.Name__c;
                SubMenuItem["action"] =  (function(value) {
                
                    return function(obj) {
                        launchQueryEditor(
                            MA.resources.QueryBuilder+pageSuffix+'?b=::baseObjectId::&f=::folderId::&ft=::folderType::'
                                .replace('::baseObjectId::', value.Id)
                                .replace('::folderId::', obj.attr('Id'))
                                .replace('::folderType::', obj.attr('NodeType'))
                        );
                    }
                })(record);
                
                BaseObjectsForSubMenu.push(SubMenuItem);
            });
            
            //if we dont have any base objects, display a message for the user
            if (BaseObjectsForSubMenu.length == 0)
            {
                BaseObjectsForSubMenu = [{ label: 'No base objects available' }];
            }
            
            //check on loading screen
            $('.MALoading .base-object-loading').addClass('success');
        }
        else
        {
            //NotifyError("Error Populating Context Menu:Base Object List",json.error);
            Debug("Error Populating Context Menu:Base Object List" + json.error);
            BaseObjectsForSubMenu = [{ label: 'Unknown Error' }];
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Populating Context Menu:Base Object List</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Populating Context Menu:Base Object List",textStatus + " : " + errorThrown); 
    });
    
    $.getJSON(MA.resources.User,"action=get_user_prefs&id=" + UserId,function(json)
    {
        if(json.success)
        {
            /*********
             *  trying to get rid of these various global vars and just use userSettings, but I haven't looked around for all the uses yet
             ******/ 
        
            //namespace handling
            var record = removeNamespace(namespace, json.record);
            
            //currency settings
            if(json.Currency)
            {
                //store currency information for later use (aggregates and potential other areas);
                userSettings.currency = json.Currency;
                userSettings.userCurrency = record.DefaultCurrencyIsoCode;
                $.each(json.Currency, function (index, currency) {
                    if(currency.IsoCode == record.DefaultCurrencyIsoCode) {
                        userSettings.userConverstionRate = currency.ConversionRate;
                    }
                });
            }
            else {
                userSettings.userCurrency = MA.CurrencyTypes['{!userCurrency}'];
            }
            
            //basic settings
            IsCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            userSettings.isCorporateAdmin = record.EditMapAnythingOrgWirdeQueries__c;
            
            //default map settings
            userSettings.defaultMapSettings = {};
            if (record.MADefaultLatitude__c != null && record.MADefaultLongitude__c != null)
            {
                $.extend(userSettings.defaultMapSettings, {
                    latitude    : parseFloat(record.MADefaultLatitude__c),
                    longitude   : parseFloat(record.MADefaultLongitude__c)
                });
                
                setTimeout(GoToHomePosition, 1000); //this is an attempt to fix a redraw issue on load
            }
            
            //default proximity settings
            var unitMap = {
                'Miles'     : 'MILES'
            };
            userSettings.defaultProximitySettings = {
                radius  : (record.DefaultProximityRadius__c || 100),
                unit    : (record.PreferredTypeOfMeasurement__c || 'MILES').toUpperCase()
            };
            
            //max query size
            if (record.MAMaxQuerySize__c != null)
            {
                MaxQuerySize = parseInt(record.MAMaxQuerySize__c);
                userSettings.maxQuerySize = parseInt(record.MAMaxQuerySize__c);
                
                if (MaxQuerySize > MA.limits.maxQuerySize)
                {
                    userSettings.maxQuerySize = MaxQuerySize = MA.limits.maxQuerySize;
                }
            }
            else
            {
                userSettings.maxQuerySize = MaxQuerySize = MA.defaults.maxQuerySize;
            }
            
            //default zoom level
            if (record.MADefaultZoomLevel__c != null) {
                MA.map.setZoom(userSettings.defaultMapSettings.zoomLevel = parseInt(record.MADefaultZoomLevel__c));
            }
            
            //default map type
            if (record.MADefaultType__c != null)
            {
                userSettings.defaultMapSettings.mapType = record.MADefaultType__c;
                $('.MapViewTable td').each(function () {
                    if ($(this).attr('data-basemaptype') == userSettings.defaultMapSettings.mapType) {
                        MA.Map.updateMapType(userSettings.defaultMapSettings.mapType);
                    }
                });
            }
            
            //export settings
            if (record.AllowMapAnythingExports__c == false)
            {
                $('#ExportsButton').hide();
                MaxExportSize = 0;
                
                userSettings.maxExportSize = 0;
            }
            else
            {
                if (record.MAMaxExportSize__c == null)
                {
                    MaxExportSize = 1000000;
                    userSettings.maxExportSize = 1000000;
                }
                else
                {
                    MaxExportSize = parseInt(record.MAMaxExportSize__c);
                    userSettings.maxExportSize = parseInt(record.MAMaxExportSize__c);
                }
                
            }
            
            //get rid of this
            if (record.DefaultProximityRadius__c == null)
            {
                if(notPrintEmailPage) { document.getElementById("ProximityRadius").value = "50"; }
            }
            else
            {
                if(notPrintEmailPage) { document.getElementById("ProximityRadius").value = record.DefaultProximityRadius__c; }
            }
            if (record.PreferredTypeOfMeasurement__c == null)
            {
                if(notPrintEmailPage) { document.getElementById("ProximityRadiusMeasurementType").value = "MILES"; }
            }
            else
            {
                var MesType = record.PreferredTypeOfMeasurement__c;
                
                if (MesType == "Miles" || MesType == "Feet" || MesType == "Yards")
                {
                    $('#UnitType').val('mi');
                }
                else
                {
                    $('#UnitType').val('km');
                }
                
                if(notPrintEmailPage) { document.getElementById("ProximityRadiusMeasurementType").value = MesType.toUpperCase(); }
            }
            
            //new style user settings.  make sure settings are defined
            if(typeof record.MapAnythingSettings__c == 'undefined' || record.MapAnythingSettings__c == null || record.MapAnythingSettings__c == "") {
                record.MapAnythingSettings__c = '{}';
            }
            
            //try to parse and use settings
            try 
            {
                //try to parse user settings
                var MASettingsObj;
                try {
                    MASettingsObj = JSON.parse(record.MapAnythingSettings__c);
                }
                catch (err) {
                    MASettingsObj = {};
                }
                    
                //extend our user settings object with these settings (will be used later)
                $.extend(userSettings, MASettingsObj);
                
                //Build list view settings page
                buildListViewColumnHTML();
                
                //init walkme
                var enableWalkMe = MASettingsObj.EnableWalkMe == null ? true : MASettingsObj.EnableWalkMe;
                if (UserContext.language == 'en_US' && enableWalkMe) {
                    var walkme = document.createElement('script');
                    walkme.type = 'text/javascript';
                    walkme.async = true;
                    walkme.src = 'https://d3b3ehuo35wzeh.cloudfront.net/users/1362a6cb11f14973aaab3b6706d16414/walkme_1362a6cb11f14973aaab3b6706d16414_https.js';
                    var firstScript = document.getElementsByTagName('script')[0];
                    firstScript.parentNode.insertBefore(walkme, firstScript);
                }

                //update the checkbox
                if(!enableWalkMe){
                    $('#walkme-checkbox').removeAttr('checked');
                }
                
                //console.log(MASettingsObj);
                
                if (MA.Util.p("layerid") != "")
                {
                    if(MASettingsObj.PlotOnLoadQueries)
                    {
                       MASettingsObj.PlotOnLoadQueries.push(MA.Util.p("layerid"));
                    }
                    else
                    {
                        MASettingsObj.PlotOnLoadQueries = [];
                        MASettingsObj.PlotOnLoadQueries.push(MA.Util.p("layerid"));
                    }
                }
                

                //plot on load queries
                if(MASettingsObj.PlotOnLoadQueries)
                {
                    $.each(MASettingsObj.PlotOnLoadQueries, function(index, id)
                    {
                        //validate that this query still exists (this is a quick fix to avoid deleted queries from trying to plot)
                        $.ajax({
                            url: MA.resources.Query+pageSuffix+"?securityToken="+securityToken+"&action=validatePlotOnLoadItem&core.apexpages.devmode.url=0",
                            type: 'POST',
                            dataType: 'JSON',
                            data:{
                                id: id
                            },
                            success: function (response) {
                                if (response.success) {
                                    $("#" + id).addClass('jstree-star');
                                    switch (response.data.type.removeStart(namespace + '__')) 
                                    {
                                        case 'MASavedQry__c':
                                            PlotQuery({ savedQueryId: id }, 'Default');
                                            break;
                                        case 'MATerritory__c':
                                            var terData = response.data;
                                            //check if prop exists
                                            if (terData.isCustom == 'true') {
                                                MACustomShapes.drawV2({ id : id })
                                            }
                                            else {
                                                drawShapeLayer({ id : id });
                                            }
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            },
                            error: function (response) {
                                MALog('Query Validation Error');
                            }
                        });
                    });
                }
                
                //route defaults
                userSettings.RouteDefaults = userSettings.RouteDefaults || $.extend({}, MA.defaults.userSettings.RouteDefaults);
                $('#RouteMode').val(userSettings.RouteDefaults.mode);
                $('#UnitType').val(userSettings.RouteDefaults.unit);
                $('.timedefaults-routetype').val(userSettings.RouteDefaults.type);
                $('.timedefaults-routestart').val(userSettings.RouteDefaults.start);
                $('.timedefaults-routeend').val(userSettings.RouteDefaults.end);
                $('.timedefaults-appointmentduration').val(userSettings.RouteDefaults.duration);
                userSettings.RouteDefaults.displayTrafficTime = userSettings.RouteDefaults.displayTrafficTime == 'false' ? false : true || true;
                $('#displaytraffictime').attr('checked',userSettings.RouteDefaults.displayTrafficTime);
                try {
                    if (userSettings.RouteDefaults.startLocation.indexOf('~~') != -1) {
                        $('.timedefaults-startlocation').val(userSettings.RouteDefaults.startLocation.split('~~')[1]).attr('data-id', userSettings.RouteDefaults.startLocation.split('~~')[0]).addClass('active');
                    }
                    if (userSettings.RouteDefaults.endLocation.indexOf('~~') != -1) {
                        $('.timedefaults-endlocation').val(userSettings.RouteDefaults.endLocation.split('~~')[1]).attr('data-id', userSettings.RouteDefaults.endLocation.split('~~')[0]).addClass('active');
                    }
                }
                catch (err) {}
                if ((userSettings.RouteDefaults.startLocationId || '') != '') {
                    $('.timedefaults-startlocation')
                        .val(userSettings.RouteDefaults.startLocationLabel)
                        .addClass('active')
                        .attr({ 'data-id': userSettings.RouteDefaults.startLocationId, 'readonly': 'true', 'title': userSettings.RouteDefaults.startLocationLabel })
                        .data('selectedLabel', userSettings.RouteDefaults.startLocationLabel)
                    ;
                }
                if ((userSettings.RouteDefaults.endLocationId || '') != '') {
                    $('.timedefaults-endlocation')
                        .val(userSettings.RouteDefaults.endLocationLabel)
                        .addClass('active')
                        .attr({ 'data-id': userSettings.RouteDefaults.endLocationId, 'readonly': 'true', 'title': userSettings.RouteDefaults.endLocationLabel })
                        .data('selectedLabel', userSettings.RouteDefaults.endLocationLabel)
                    ;
                }
                ClearDirections();
                
                //handle changing route defaults
                //$('#Routing-Settings select').change(StoreMASettings);
                $('#Routing-Settings .timedefaults-startlocation, #Routing-Settings .timedefaults-endlocation')
                    
                    .autocomplete({
                        search: function () {
                            $(this).addClass('searching');
                        },
                        response: function () {
                            $(this).removeClass('searching');
                        },
                        source: function (request, response) {

                            var searchTerm = request.term;
                            $.ajax({
                                url: MA.resources.Waypoint+'?securityToken={!securityToken}&action=getDefaultLocationOptions&core.apexpages.devmode.url=0',
                                type: 'POST',
                                dataType: 'JSON',
                                data: {
                                    term: searchTerm
                                },
                                success: function (lookupOptionsResponse) {
                                    
                                    var options = [];
                                    $.each(lookupOptionsResponse.data, function (index, data) { 
                                        options.push({
                                            label: data.Name,
                                            value: data.Id
                                        });
                                    });
                                    
                                    response(options);
                                }
                            });
                        },
                        minLength: 1,
                        select: function( event, ui) {
                            
                            try
                            {
                                if ($(this).hasClass('timedefaults-startlocation'))
                                {
                                    try {  totango.track('Set Default Start Location', 'MapAnything'); } catch(err) { }
                                }
                                else
                                {
                                    try {  totango.track('Set Default End Location', 'MapAnything'); } catch(err) { }
                                }
                            }
                            catch (ex) {}
                            
                            
                            
                            $(this)
                                .val(ui.item.label)
                                .addClass('active')
                                .attr({ 'data-id': ui.item.value, 'readonly': 'true', 'title': ui.item.label })
                                .data({'selectedLabel':ui.item.label,'selectedValue':ui.item.value})
                            ;
                            //StoreMASettings();
                        }
                    })

                    .blur(function () {
                        //put the selected value back in the textbox (in case it has been changed to something invalid)
                        if($(this).val()!='' && $(this).attr('data-id') != null) {
                            $(this).val($(this).data('selectedLabel') || '')
                                .addClass('active')
                                .attr({ 'data-id': ($(this).data('selectedValue') || ''), 'readonly': 'true', 'title': ($(this).data('selectedLabel') || '') })
                            ;
                        }
                        else {
                            $(this).val('')
                                .removeClass('active')
                                .removeAttr('data-id readonly title')
                                .removeData('selectedValue').removeData('selectedLabel')
                            ;
                        }
                    })

                    .click(function () {
                        if ($(this).is('.active')) {
                            $(this)
                                .val('')
                                .removeClass('active')
                                .removeAttr('data-id readonly title')
                                //.removeData('selectedLabel')
                            ;
                            //StoreMASettings();
                        }
                    })
                ;
                    
                //map it proximity
                if (typeof MASettingsObj.MapItProximityOn != 'undefined' && MASettingsObj.MapItProximityOn)
                {
                    $('.mapit-proximity-on').attr('checked', 'checked');
                }
                    
                //map lock
                if (userSettings.MapLockSettings && userSettings.MapLockSettings.topLeft)
                {
                    new google.maps.Polyline({
                        path: [
                            new google.maps.LatLng(userSettings.MapLockSettings.topLeft.latitude, userSettings.MapLockSettings.topLeft.longitude),
                            new google.maps.LatLng(userSettings.MapLockSettings.topLeft.latitude, userSettings.MapLockSettings.bottomRight.longitude),
                            new google.maps.LatLng(userSettings.MapLockSettings.bottomRight.latitude, userSettings.MapLockSettings.bottomRight.longitude),
                            new google.maps.LatLng(userSettings.MapLockSettings.bottomRight.latitude, userSettings.MapLockSettings.topLeft.longitude),
                            new google.maps.LatLng(userSettings.MapLockSettings.topLeft.latitude, userSettings.MapLockSettings.topLeft.longitude)
                        ],
                        layerType: 'maplock',
                        strokeColor: "#FF0000",
                        strokeWeight: 4,
                        strokeOpacity: 1
                    });
                    ZoomToFit();
                }
                
                if (userSettings.ButtonSetSettings && userSettings.ButtonSetSettings.Id && userSettings.ButtonSetSettings.Id.length >= 15)
                {
                    //we have a button set defined so send a request to get the details
                    $.ajax({
                        url: MA.resources.Admin+'?securityToken='+securityToken+'&action=get_buttonset',
                        type: 'POST',
                        dataType: 'JSON',
                        data: {
                            id: userSettings.ButtonSetSettings.Id
                        },
                        success: function (response) 
                        {
                            if (response.success)
                            {
                                var buttonSet = removeNamespace(namespace, response.result);
                                userSettings.ButtonSetSettings.tooltipLayout = JSON.parse(buttonSet.TooltipLayout__c || '[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Check In","Type":"Standard Action"}]]},{"Label":"Admin","Columns":[[{"Label":"Set Verified Location","Type":"Standard Action"}],[{"Label":"Clear Coordinates","Type":"Standard Action"}],[{"Label":"Change Owner","Type":"Standard Action"}]]},{"Label":"Activities","Columns":[[{"Label":"Log a Call","Type":"Standard Action"}],[{"Label":"Send Email","Type":"Standard Action"}],[{"Label":"New Event","Type":"Standard Action"},{"Label":"Add to Campaign","Type":"Standard Action"}]]}]');
                                userSettings.ButtonSetSettings.myPositionLayout = JSON.parse(buttonSet.MyPositionLayout__c || '[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]');
                                userSettings.ButtonSetSettings.poiLayout = JSON.parse(buttonSet.POILayout__c || '[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]');
                                userSettings.ButtonSetSettings.massActionLayout = JSON.parse(buttonSet.MassActionLayout__c || '[{"Label":"Mass Actions","Buttons":[{"Label":"Add to Campaign","Type":"Standard Action"},{"Label":"Change Owner","Type":"Standard Action"},{"Label":"Update Field","Type":"Standard Action"},{"Label":"Clear Coordinates","Type":"Standard Action"},{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Add to Trip","Type":"Standard Action"}]},{"Label":"Activities","Buttons":[{"Label":"Log a Call","Type":"Standard Action"},{"Label":"Send Email","Type":"Standard Action"},{"Label":"New Task","Type":"Standard Action"},{"Label":"New Event","Type":"Standard Action"}]},{"Label":"Chatter","Buttons":[{"Label":"Follow","Type":"Standard Action"},{"Label":"Unfollow","Type":"Standard Action"}]}]');
                                userSettings.ButtonSetSettings.dataLayerLayout = JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"},{"Label":"Street View","Type":"Standard Action"}],[{"Label":"Create Record","Type":"Standard Action"}]]}]');
                            }
                            else { 
                            }
                        },
                        error: function (response)
                        {
                            MALog(response);
                        }
                    });
                }
                else {
                    
                    //no button set defined so use defaults
                    userSettings.ButtonSetSettings = {
                        tooltipLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Check In","Type":"Standard Action"}]]},{"Label":"Admin","Columns":[[{"Label":"Set Verified Location","Type":"Standard Action"}],[{"Label":"Clear Coordinates","Type":"Standard Action"}],[{"Label":"Change Owner","Type":"Standard Action"}]]},{"Label":"Activities","Columns":[[{"Label":"Log a Call","Type":"Standard Action"}],[{"Label":"Send Email","Type":"Standard Action"}],[{"Label":"New Event","Type":"Standard Action"},{"Label":"Add to Campaign","Type":"Standard Action"}]]}]'),
                        myPositionLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"}],[]]}]'),
                        poiLayout: JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[],[]]}]'),
                        massActionLayout: JSON.parse('[{"Label":"Mass Actions","Buttons":[{"Label":"Add to Campaign","Type":"Standard Action"},{"Label":"Change Owner","Type":"Standard Action"},{"Label":"Update Field","Type":"Standard Action"},{"Label":"Clear Coordinates","Type":"Standard Action"},{"Label":"Remove Marker","Type":"Standard Action"},{"Label":"Add to Trip","Type":"Standard Action"}]},{"Label":"Activities","Buttons":[{"Label":"Log a Call","Type":"Standard Action"},{"Label":"Send Email","Type":"Standard Action"},{"Label":"New Task","Type":"Standard Action"},{"Label":"New Event","Type":"Standard Action"}]},{"Label":"Chatter","Buttons":[{"Label":"Follow","Type":"Standard Action"},{"Label":"Unfollow","Type":"Standard Action"}]}]'),
                        dataLayerLayout : JSON.parse('[{"Label":"Actions","Columns":[[{"Label":"Add to Trip","Type":"Standard Action"}],[{"Label":"Set Proximity Center","Type":"Standard Action"},{"Label":"Street View","Type":"Standard Action"}],[{"Label":"Create Record","Type":"Standard Action"}]]}]')
                    };
                    
                }
                    
                //Weather
                if (userSettings.ShowWeather)
                {
                    //show the weather menu
                    $('.menubutton.weather').show(); 
                }
            }
            catch (err) {
                MALog(err);
            }
            
            //mark complete
            OnUserLoadEventCompletd = true;
            
            //check on loading screen
            $('.MALoading .user-pref-loading').addClass('success');
            
            
            //DO WE HAVE A DEFAULT FOLDER OPTION?
            //console.log('hasOwnProperty',userSettings.hasOwnProperty('DefaultFolder'));
            if(userSettings.hasOwnProperty('DefaultFolder')) {
                //console.log('value',userSettings.DefaultFolder);
                if(userSettings.DefaultFolder !== null && userSettings.DefaultFolder !== undefined && userSettings.DefaultFolder !== '') {
                    //console.log(userSettings.DefaultFolder);
                    if(NewLayerNavigationEnabled()) {
                        MALayers.loadDefaultFolder(userSettings.DefaultFolder);
                    }
                }
            }

        }
        else
        {
            Debug("Error Querying User, " + json.error);
            DisplayPropertiesOfObject(json.error,0);
            HideLoadingDialog();
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) { 
        Debug("<b>Error Querying User</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Querying User",textStatus + " : " + errorThrown); 
    });
    
    MA.options = JSON.parse($('[id$=":serializedOptions"]').val());
    
    //plot layers
    if (MA.options.layers && MA.options.layers.length > 0) {
    
        $.each(MA.options.layers || [], function (index, layer) {
            switch(layer.layerType)
            {
                case 'Query':
                    
                    layer.el = PlotQuery($.extend(layer, { id: 'OptionsLayer' + MA.componentIndex++ }), 'Markers', false, { success: function () { layer.done = true; } });
                    
                break;
            }
        });
        
        //set an interval to zoom to fit when all layers have been plotted
        var layersInterval = setInterval(function () {
            
            var done = true;
            $.each(MA.options.layers, function (index, layer) {
                if (!layer.done) {
                    done = false;
                }
            });
            
            if (done) {
                clearInterval(layersInterval);
                
                //special zoom to fit for just these layers (we don't want to include plot on load items...right?)
                try {
                    var queries = [];
                    $.each(MA.options.layers, function (index, layer) {
                        if (layer.el && layer.el.data('records')) {
                            queries.push(layer.el);
                        }
                    });
                    ZoomToFit({ queries: queries });
                    
                    //zoom out if too close
                    if (map.zoomLevel > 15) map.set("zoomLevel", 15);
                }
                catch (err) {
                    //this most likely means that there are no features on the map so just do nothing
                }
            }
            
        }, 500);
    }
    
    //check on loading screen
    $('.MALoading .map-loading').addClass('success');       
}


function ChangeDrawingManagerMode(mode)
{
    //turn off all layers
    $('#StopDrawingButton, #DrawPolygonButton, #DrawCircleButton, #DrawRectangleButton').removeClass('activeDrawingTool');
    
    switch(mode) 
    {
        case 'hand':
            
            MA.Map.Drawing.manager.setDrawingMode(null);
            $('#StopDrawingButton').addClass('activeDrawingTool');
            break;
        case 'polygon':
            
            MA.Map.Drawing.manager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
            $('#DrawPolygonButton').addClass('activeDrawingTool');
            break;
        case 'circle':
            
            MA.Map.Drawing.manager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);
            $('#DrawCircleButton').addClass('activeDrawingTool');
            break;
        case 'rectangle':
            
            MA.Map.Drawing.manager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);
            $('#DrawRectangleButton').addClass('activeDrawingTool');
            break;
        default:
            MA.Map.Drawing.manager.setDrawingMode(null);
    }
}


// JavaScript Document
function ClearExport()
{
    if (confirm('You are about to delete all exports, do you which to continue?'))
    {
        DeleteExportsAF();
    }           
}

function DoExport()
{
    if (userSettings.maxExportSize > 0)
    {
        if ($('#ExportName').val() == '')
        {
            showError($('#mapdiv').parent(), 'Please enter an export name');
        }
        else
        {
            if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0)
            {
                window.setTimeout(function() { LaunchPopupWindow($('#LoadingPopup'), 300); }, 0);
                
                //Pause while loading window opens
                window.setTimeout(function(){  StartExport(); }, 100);
            }
            else
            {
                showError($('#mapdiv').parent(), 'No visible markers');
            }
        }
    }
    else
    {
        showError($('#mapdiv').parent(), 'You do not have permission to export');
    }   
}

function StartExport()
{
    Debug("VisibleQueries: " + $('#PlottedQueriesContainer .PlottedRowUnit').length);
                
    var ExportName = $('#ExportName').val();    
    
    Debug("Export Name: " + ExportName);
    var ExportRows = new Array();
    
    var TotalExportSize = 1;
    
    $('#PlottedQueriesContainer .PlottedRowUnit').each(function() { 
        
        var $plottedQuery = $(this);
        var addressFields = $plottedQuery.data('addressFields');
        
        //Enter Headers Row
        var ExportHeaderRow = new Object();
         
        $.each($(this).data('tooltips'), function (index, tooltip) {
            if (tooltip.TooltipType == 'Tooltip') {
                ExportHeaderRow['Tooltip'+(index + 1)+'__c'] = tooltip.FieldLabel;
            }
        });
         
        ExportRows.push(addNamespace(namespace, ExportHeaderRow));
         
        $.each($(this).data('records'), function(index, record) { 
            
            if (!(record.isVisible || record.isClustered || record.isScattered))
            {
                //this record is not currently visible so skip it
                return;
            }
            else if (TotalExportSize <= userSettings.maxExportSize)
            {        
                ExportRows.push(
                    addNamespace(namespace, {
                        RecordId__c     : record.record.Id,
                        SavedQueryName__c   : $plottedQuery.data('savedQueryName'),
                        Latitude__c         : record.marker.Lat,
                        Longitude__c        : record.marker.Long,
                        ObjectType__c       : $plottedQuery.data('baseObjectName'),
                        Street__c           : extractValue(record.record, addressFields.Street),
                        City__c             : extractValue(record.record, addressFields.City),
                        State__c            : extractValue(record.record, addressFields.State),
                        Zip__c              : extractValue(record.record, addressFields.Zip),
                        Country__c          : extractValue(record.record, addressFields.Country),
                        Tooltip1__c         : extractTooltipValue($plottedQuery.data('tooltips')[0], record).toString().substring(0, 255),
                        Tooltip2__c         : extractTooltipValue($plottedQuery.data('tooltips')[1], record).toString().substring(0, 255),
                        Tooltip3__c         : extractTooltipValue($plottedQuery.data('tooltips')[2], record).toString().substring(0, 255),
                        Tooltip4__c         : extractTooltipValue($plottedQuery.data('tooltips')[3], record).toString().substring(0, 255),
                        Tooltip5__c         : extractTooltipValue($plottedQuery.data('tooltips')[4], record).toString().substring(0, 255),
                        Tooltip6__c         : extractTooltipValue($plottedQuery.data('tooltips')[5], record).toString().substring(0, 255),
                        Tooltip7__c         : extractTooltipValue($plottedQuery.data('tooltips')[6], record).toString().substring(0, 255),
                        Tooltip8__c         : extractTooltipValue($plottedQuery.data('tooltips')[7], record).toString().substring(0, 255)
                    })
                );
                 
                TotalExportSize++;
            }
            else
            {
                Debug("Above MaxExportSize");   
                return false;
            }
        });
    });

    var MyJSObject = {
        action: 'export_all',
        ExportName: ExportName,
        ExportRows: ExportRows
    };
    
    $.ajax({
        url: MA.resources.Export,
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        success: function (response) {
            try {
                if(response.success) {
                    ClosePopupWindow();
                    PopulateMAExportsAF();  
                }
                else {
                    ClosePopupWindow();
                    NotifyError("Error Exporting!", response.error);
                }
            }
            catch (err) {
                ClosePopupWindow();
                NotifyError("Error Exporting!", 'The export may be too large');
                MA.log(err);
            }
        },
        error: function () {
            ClosePopupWindow();
            NotifyError("Error Exporting!", 'The export may be too large');
        }
    }); 
}

function FormatPicklistFieldValue(str)
{
    return  ((str == null) ? null : str.replace(/\s/g,""));
}

function RemoveMarker(pMarker, options)
{
    options = $.extend({ updateQueryInfo: true }, options);

    //keep track of record info
    var record = pMarker.record;
    var $plottedQuery = record.plottedQuery;
    
    //delete record
    delete $plottedQuery.data('records')[record.record.Id];
    
    //remove any markers from the map
    if ($plottedQuery.find('.renderButtons-button.markers').is('.on') && record.marker && record.isVisible) {
        record.marker.setMap(null);
    }
    if ($plottedQuery.find('.renderButtons-button.cluster').is('.on') && record.clusterMarker && record.isClustered) {
        $plottedQuery.data('clusterGroup').removeMarker(record.clusterMarker);
    }
    if ($plottedQuery.find('.renderButtons-button.scatter').is('.on') && record.scatterMarker && record.isScattered) {
        record.scatterMarker.setMap(null);
    }

    if (options.updateQueryInfo) {
        updateQueryInfo($plottedQuery);
    }

    //refresh the data in the listview             
    MAListView.DrawTab({ layerId: pMarker.qid, isSelectedTab: false, isExport: false });
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
function AddPlotOnLoadId(SavedQryID)
{
    $("#" + SavedQryID).toggleClass('jstree-star');
    StoreMASettings();
}

function StoreMASettings ()
{
    var JSONObject = {};
    var PlotOnLoadQueries = [];
    
    $("#SQTree li").each(function(){
        if($(this).hasClass("jstree-star"))
        {
            PlotOnLoadQueries.push($(this).attr("id"));
        }
     });
      
     JSONObject.PlotOnLoadQueries = PlotOnLoadQueries;
     JSONObject.MapItProximityOn = $('.mapit-proximity-on').is(':checked');
     
     //update the default proximity settings in the stored user settings
     try {
        userSettings.defaultProximitySettings.radius = parseInt($('#ProximityRadius').val());
        userSettings.defaultProximitySettings.unit = $('#ProximityRadiusMeasurementType').val();
     }
     catch (err) { }
     
     //route settings
     JSONObject.RouteDefaults = {
        mode                : $('#RouteMode').val(),
        unit                : $('#UnitType').val(),
        startLocationId     : $('.timedefaults-startlocation').attr('data-id'),
        startLocationLabel  : $('.timedefaults-startlocation').val(),
        endLocationId       : $('.timedefaults-endlocation').attr('data-id'),
        endLocationLabel    : $('.timedefaults-endlocation').val(),
        type                : $('.timedefaults-routetype').val(),
        start               : $('.timedefaults-routestart').val(),
        end                 : $('.timedefaults-routeend').val(),
        duration            : $('.timedefaults-appointmentduration').val() 
     };
     
     $.getJSON(MA.resources.User,"action=store_ma_settings&id=" + UserId + "&jsonstring=" + JSON.stringify(JSONObject) + "&DefaultProximityRadius=" +$('#ProximityRadius').val()+ "&PreferredTypeOfMeasurement=" +$('#ProximityRadiusMeasurementType').val(),function(json)
        { 
            if(json.success)
            {
                //showSuccess($('#mapdiv').parent(), 'Settings Updated');

                //need to update all settings, but currently just updating unit to fix a bug
                userSettings.RouteDefaults.unit = $('#UnitType').val();
            }
            else
            {
                NotifyError("Error Updating Map Anything Settings:",json.error);
                Debug("Error Updating Map Anything Settings: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Map Anything Settings</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Map Anything Settings",textStatus + " : " + errorThrown); 
        });
}

var imgLoaderDimensions = {};
var imgLoaderCounts = {};
var imgLoaderIntervals = {};
function imgLoaded () 
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
    imgLoaderDimensions[this.imgId] = {
        width   : this.width,
        height  : this.height 
    };
}
function imgError ()
{
    imgLoaderCounts[this.queryId] = imgLoaderCounts[this.queryId] - 1;
}

function ToggleLegendContent(Obj)
{
     $(Obj).parent().parent().find('#LegendDiv_Content').toggle();
     
     if ($(Obj).html() == '-- {!$Label.MA_Hide_Legend} --')
     {
         $(Obj).html('-- {!$Label.MA_Show_Legend} --');
     }
     else
     {
         $(Obj).html('-- {!$Label.MA_Hide_Legend} --');
     }
}

function ShowMoreOrLessOnLegendDiv(Obj)
{
    //MoreOrLessLink

    
    var $ContentDiv = $(Obj).parent().parent();
    
    if ($(Obj).html() == '-- {!$Label.MA_More} --')
    {
        $(Obj).html('-- {!$Label.MA_Less} --');
    }
    else
    {
        $(Obj).html('-- {!$Label.MA_More} --');
    }
    
    $ContentDiv.find('table').find('#CountIsZero').toggle();
}


function LegenedCheckboxClicked(ElementObj)
{
    try
    {
        Debug("Running checkboxClicked");
        var QryIdArray = ElementObj.value.split("_");
        
        
        if (ProcessedSavedQueries[QryIdArray[0]] != null)
        {
            if (ElementObj.checked)
            {   
                ProcessedSavedQueries[QryIdArray[0]].AddLegendMarkers(QryIdArray[1]);
            }
            else
            {
                ProcessedSavedQueries[QryIdArray[0]].RemoveLegendMarkers(QryIdArray[1]);
            }
        }
    }
    catch (e)
    {
        Debug("Error1 :" + e.message);
        HideLoadingDialog();
    }
}

function ShowHidePosition()
{
    try {
        if (PositionEnabled) {
            if (MA.myPositionInfoBubble) {
                MA.myPositionInfoBubble.setMap(null);
            }
            HideMyPosition();
        }
        else {
            ShowMyPosition();
        }
    }
    catch (err) {
        //assume this is failing because we're on Nearby.  we really need to stop using this component in Nearby
    }
}

function HideMyPosition()
{
    //remove the position marker
    PositionMarker.setMap(null);
    
    //mark position as
    PositionEnabled = false;
    $('#ShowPositionButton').removeClass('btn-active');
}

function ShowMyPosition()
{
    //attempt to find the current location
    navigator.geolocation.getCurrentPosition(
        function(position) {

            //zoom to position
            MA.map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
            MA.map.setZoom(13);

            //create marker and add to map
            PositionMarker = new RichMarker({
                position: new google.maps.LatLng(position.coords.latitude, position.coords.longitude),
                anchor: RichMarkerPosition.MIDDLE,
                map: MA.map,
                flat: true,
                content: '<div class="myLocationMarker" style="cursor: pointer;"><image style="width:17px; height:17px;" src="{!URLFOR($Resource.MapAnything, 'images/myLocation3.png')}" /><div style="position: absolute; top: 0; left: 0;" class="pulse"><image src="{!URLFOR($Resource.MapAnything, 'images/myLocation3.png')}"/></div></div>'
            });

            //handle marker click
            google.maps.event.addListener(PositionMarker, 'click', function () 
            {
                //create marker content
                var $MarkerBubbleContent = $([
                    '<div id="myposition-infobubble">',
                        '<table cellpadding="3" style="width: 100%;">',
                            '<tr><td><b>Accuracy</b></td><td>' + position.coords.accuracy + ' meters</td></tr>',
                            '<tr><td><b>Address</b></td><td id="PositionAddress">' + ' Loading...</td></tr>',
                        '</table>',
                        '<div class="layout-tooltip" style="width: 100%; border-top: 1px solid #C0C0C0; padding: 10px 5px 5px 5px;">',
                            MAActionFramework.buildLayoutFromContents(userSettings.ButtonSetSettings.myPositionLayout).html(),
                        '</div>',
                    '</div>'
                ].join(''));

                //create info bubble
                MA.myPositionInfoBubble = MA.Map.InfoBubble.show({
                    position: PositionMarker.getPosition(),
                    minWidth: 375,
                    content: $MarkerBubbleContent.get(0)
                });
                google.maps.event.addListener(MA.myPositionInfoBubble, 'domready', function ()
                {
                    //handle clicking an action button
                    $MarkerBubbleContent.find('.actionbutton').click(function (e) {
                        var $button = $(this);
                        var frameworkAction = $button.attr('data-type') == 'Custom Action'
                            ? MAActionFramework.customActions[$button.attr('data-action')] || null
                            : MAActionFramework.standardActions[$button.attr('data-action')] || null;
                        
                        if (frameworkAction) {
                            switch (frameworkAction.Action)
                            {
                                case 'Iframe':
                                
                                    //get a component index from the action framework to make this tab unique and build the iframe url 
                                    var componentIndex = MAActionFramework.componentIndex++;
                                    var iframeURL = frameworkAction.ActionValue 
                                        + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                        + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                        + '&RecordId=' + record.record.Id;
                                    
                                    //build the new tab and the corresponding pane
                                    var $newTab = $("<li id='CustomTab-"+componentIndex+"'><a href='#pane-customaction-"+componentIndex+"'>"+frameworkAction.Label+"</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>");
                                    var $newPane = $("<div id='pane-customaction-"+componentIndex+"'><iframe src='"+iframeURL+"' style='width: 100%; height: 100%;'></iframe></div>");
                                    
                                    //append the tab and pane to the tooltip tabs and refresh
                                    $('#tooltip-content').find('.ui-tabs-nav').append($newTab).closest('.tabs').append($newPane).tabs('refresh').find('#CustomTab-'+componentIndex+' a').click();
                                    
                                    //handle clicking the close button for this new tab
                                    $newTab.css({'width': 'auto', 'padding-right': '5px'}).find('.ui-icon-close').css({'cursor': 'pointer', 'position': 'absolute', 'right': '0'}).click(function () {
                                        if ($newTab.is('.ui-tabs-active')) {
                                            $('#tooltip-content').find('.ui-tabs-nav > li:first-child a').click();
                                        }
                                        
                                        $newTab.remove();
                                        $newPane.remove();
                                    });
                                    break;
                                    
                                case 'NewWindow':
                                
                                    var newURL = frameworkAction.ActionValue 
                                        + (frameworkAction.ActionValue.indexOf('?') == -1 ? '?noparams' : '')
                                        + '&Button=' + encodeURIComponent(frameworkAction.Label)
                                        + '&type=My%20Position'
                                        + '&latitude=' + position.coords.latitude
                                        + '&longitude=' + position.coords.longitude
                                        + '&address=' + $('#PositionAddress').text();

                                    window.open(newURL);
                                    break;
                                    
                                case 'Javascript':
                                
                                    frameworkAction.ActionValue.call(this, {
                                        button: $button,
                                        customMarkers: [{ type: 'MyPosition', title: 'My Position', latlng: new google.maps.LatLng(position.coords.latitude, position.coords.longitude), address: $('#PositionAddress').text() }]
                                    });

                                break;
                        
                                default:
                                break;
                            }
                        }

                        //stop the click from getting to the map
                        e.stopPropagation();
                    });
                
                    //send reverse geocode request
                    reverseGeocode({
                        latLng: PositionMarker.getPosition(),
                        complete: function (response) {
                            if (response.success && response.results.length > 0) {
                                $('#PositionAddress').text(response.results[0].formatted_address || '');
                            }
                            else {
                                $('#PositionAddress').text('');
                            }
                        }
                    });
                });
            });

            //mark position as enabled
            PositionEnabled = true;
            $('#ShowPositionButton').addClass('btn-active');
        },
        function () {
    
            //log error
            MALog(arguments);
            
            //show error
            var errorMsg = "{!$Label.MA_Location_could_not_be_determined}";
            PositionEnabled = false;
            NotifyError("Error Getting Position", errorMsg);
            $('#ShowPositionButton').removeClass('btn-active');
        }
    );
}

function GoToHomePosition()
{
    if (userSettings.defaultMapSettings.latitude == undefined && userSettings.defaultMapSettings.longitude == undefined && userSettings.defaultMapSettings.zoomLevel == undefined && userSettings.defaultMapSettings.mapType == undefined)
    {
        NotifyError("{!MAHomeSetInfoLabel}");
    }
    else
    {
        if (userSettings.defaultMapSettings.latitude != undefined && userSettings.defaultMapSettings.longitude != undefined) {
            MA.map.setCenter(new google.maps.LatLng(userSettings.defaultMapSettings.latitude, userSettings.defaultMapSettings.longitude));
            MA.map.setZoom(userSettings.defaultMapSettings.zoomLevel || MA.map.getZoom());
        }
    }
}

var c2c = {
    cancel_c2c : function () {
        MA.Popup.closeMAPopup();
    },
    
    launch_popupV2 : function (options) {
	        
        //launch the popup
        var popup = MA.Popup.showMAPopup({
			template: $('#templates .CreateRecordPopup').clone(),
            popupId : 'CreateRecordPopupV2',
			width : 500,
			title: 'Click2Create<sup>TM</sup>',
			buttons: [
				{
					text: 'Continue',
					type: 'button-blue step1',
					keepOpen : true,
					onclick: c2c.CreateRecord_Step1_Continue
				},
				{
					text: 'Finish',
					type: 'button-blue step2 hidden',
					keepOpen : true,
					//keepOpen : true,
					onclick: c2c.CreateRecord_Step2_Continue
				},
				{ 
					text: 'Cancel',
					type: 'button-silver',
				}
			]
		});
		
		MA.Popup.showLoading({display:true, popupId: 'CreateRecordPopupV2'});
		$('#CreateRecordPopupV2').data('popup',popup);
		
        var $objectPicklist = $('#CreateRecordPopupV2 .createrecord2-object').empty();
        $.ajax({
            url: MA.resources.Tooltip+"?securityToken="+securityToken+"&action=getClick2CreateSettings&core.apexpages.devmode.url=0",
            type: 'POST',
            dataType: 'JSON',
            data: {},
            success: function (response) {
                if (response.success) {
                    userSettings.click2CreateSettings = $.extend({ settings: MA.Util.removeNamespace(response.settings) }, options);
                    $.each(userSettings.click2CreateSettings.settings, function (objName, setting) {
                        if (setting.record[options.type+'Enabled__c']) {
                            $objectPicklist.append($('<option />').attr('value', objName).text(setting.objectLabel));
                        }
                    });
    
                    if ($objectPicklist.find('option').length == 0) {
                        popup.close();
                        //show error message
                        MA.Popup.showMAAlert({
                            title: 'Click2Create<sup>TM</sup> Error',
                            template: 'Your organization has no Click2Create settings.  Please contact an admin for support.',
                            okText : 'Ok',
                            okType : 'button-blue'
                        });
                    }
                    else {
                        $objectPicklist.change();
                    }
    
                    userSettings.click2CreateSettings.geoResponse = null;
                    if (options.place) {
                        var resultMap = {};
                        $.each(options.place.address_components, function (i, component) {
                            $.each(component.types, function (j, type) {
                                resultMap[type] = component['long_name'];
                            });
                        });
                        userSettings.click2CreateSettings.geoResponse = {
                            result: {
                                IsBadAddress        : false,
                                Label               : 'ROOFTOP',
                                Relevance           : 100,
                                Latitude            : options.place.geometry.location.lat(),
                                Longitude           : options.place.geometry.location.lng(),
                                FormattedAddress    : options.place.formatted_address,
                                HouseNumber         : resultMap['street_number'] || '',
                                Street              : resultMap['route'] || '',
                                City                : resultMap['locality'] || '',
                                County              : resultMap['administrative_area_level_2'] || '',
                                State               : resultMap['administrative_area_level_1'] || '',
                                PostalCode          : resultMap['postal_code'] || '',
                                District            : resultMap['neighborhood'] || '',
                                Country             : resultMap['country'] || ''
                            }
                        };
                        //complete street address (house number + route + subpremise)
                        var completeStreetAddressParts = [];
                        if (resultMap['street_number']) {
                            completeStreetAddressParts.push(resultMap['street_number']);
                        }
                        if (resultMap['route']) {
                            completeStreetAddressParts.push(resultMap['route']);
                        }
                        if (resultMap['subpremise']) {
                            completeStreetAddressParts.push('#' + resultMap['subpremise']);
                        }
                        userSettings.click2CreateSettings.geoResponse.result['CompleteStreetAddress'] = completeStreetAddressParts.join(' ');
                    }
                }
                else if (!response.success) {
                    popup.close();
                    //show error message
                    MA.Popup.showMAAlert({
                        title: 'Click2Create<sup>TM</sup> Error',
                        template: response.message,
                        okText : 'Ok',
                        okType : 'button-blue'
                    });
                }
                else {
                    popup.close();
                    MA.Popup.showMAAlert({
                        title: 'Click2Create<sup>TM</sup> Error',
                        template: 'Unable to continue, please contact support.',
                        okText : 'Ok',
                        okType : 'button-blue'
                    });
                }
            }
        });
        
		
    },
    
    CreateRecord_Object_Change : function () {
        MA.Popup.showLoading({display:true, popupId: 'CreateRecordPopupV2'})
    
        var setting = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()];
        var $recordTypePicklist = $('#CreateRecordPopupV2 .createrecord2-recordtype').empty();
        $.each(setting.recordTypes, function (i, recordType) {
            
            if (recordType.available) 
            {
                if (recordType.recordTypeId == '012000000000000AAA')
                {
                    if (setting.recordTypes.length > 1)
                    {
                        
                    }
                    else
                    {
                        $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name + ' (System Default)'));
                    }
                    
                }
                else
                {
                    $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
                }
                
                if (recordType.defaultRecordTypeMapping) 
                {
                    $recordTypePicklist.val(recordType.recordTypeId);
                }
            }
            
            /*
            if (recordType.available && recordType.recordTypeId != '012000000000000AAA') {
                $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
                if (recordType.defaultRecordTypeMapping) {
                    $recordTypePicklist.val(recordType.recordTypeId);
                }
            }
            */
        });
        
        
        
        if ($recordTypePicklist.find('option').length > 1) {
            $recordTypePicklist.closest('.createrecord-formitem').show();
        }
        
        
        MA.Popup.showLoading({display:false, popupId: 'CreateRecordPopupV2'})
    },
    
    CreateRecord_Step1_Continue: function () {
        var type = userSettings.click2CreateSettings.type;
        var setting = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()];
        $('#CreateRecordPopupV2 .createrecord2-fieldset-errors').hide();
        
        var recordTypeId = $('#CreateRecordPopupV2 .createrecord2-recordtype').val();
        
        var fieldSetName = 'missing';
        
        if (setting.record.FieldSetOptions__c != undefined)
        {
            var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
            
            $.each(FieldSetOptionsArray, function (i, recordType) {
                if (recordTypeId == recordType.RecordTypeId)
                {
                    if (type == "MyPosition")
                    {
                        fieldSetName = recordType.MyPositionFieldSetAPIName;
                    }
                    else if (type == "POI")
                    {
                        fieldSetName = recordType.POIFieldSetAPIName;
                    }
                }
                
                
            });
            
        }
        else
        {
            fieldSetName = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
        }
        
    
        
        
        if (fieldSetName == 'missing')
        {
            alert('Unable to find Field Set, please contact your administrator');
        }
        else
        {
            //hide the step 1 button , show step 2
            $('#CreateRecordPopupV2 .step1').addClass('hidden');
            $('#CreateRecordPopupV2 .createrecord2-step1').hide();
            $('#CreateRecordPopupV2 .step2').removeClass('hidden');
            $('#CreateRecordPopupV2 .createrecord2-step2').show();
            MA.Popup.showLoading({display:true, popupId: 'CreateRecordPopupV2'})
        
            $("#CreateRecordPopupV2 .createrecord-fieldset").html('Loading...').load(MA.resources.Click2Create, "sobject=" + $('#CreateRecordPopupV2 .createrecord2-object').val() + '&fieldset=' + fieldSetName + '&recordtypeid=' + (recordTypeId || '') + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
                function reverseGeocodeComplete (geoResponse) {
                    if (userSettings.click2CreateSettings.type == 'MyPosition') {
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['MyPositionName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['MyPositionDefaultValue__c']); } catch (err) {}
                    }
                    else if (userSettings.click2CreateSettings.type == 'POI') {
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['POIName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['POIPhone__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.phone || ''); } catch (err) {}
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['POIWebsite__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.website || ''); } catch (err) {}
                        try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['POIDefaultValue__c']); } catch (err) {}
                    }
                    else if (userSettings.click2CreateSettings.type == 'MapClick') {
        
                    }
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Street__c']+'"]').find('.get-input').val(geoResponse.result.CompleteStreetAddress); } catch (err) {}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'City__c']+'"]').find('.get-input').val(geoResponse.result.City); } catch (err) {}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'State__c']+'"]').find('.get-input').val(geoResponse.result.State); } catch (err) {}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'PostalCode__c']+'"]').find('.get-input').val(geoResponse.result.PostalCode); } catch (err) {}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Country__c']+'"]').find('.get-input').val(geoResponse.result.Country); } catch (err) {}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Latitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lat()); } catch (err) {MA.log(err);}
                    try { $('#CreateRecordPopupV2 .createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Longitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lng()); } catch (err) {}
                    MA.Popup.showLoading({display:false, popupId: 'CreateRecordPopupV2'});
                }
        
                if (userSettings.click2CreateSettings.geoResponse) {
                    reverseGeocodeComplete(userSettings.click2CreateSettings.geoResponse);
                }
                else {
                    MA.Geocoding.reverseGeocode({ latLng: userSettings.click2CreateSettings.position }, function (geoResponse) {
                        userSettings.click2CreateSettings.geoResponse = geoResponse;
                        reverseGeocodeComplete(geoResponse);
                    });
                }
            });
        }
    },
    
    CreateRecord_Step2_Continue: function () {
        MA.Popup.showLoading({display:true, popupId: 'CreateRecordPopupV2'});

        //start collecting field values starting with default fields
        var geoResponse = userSettings.click2CreateSettings.geoResponse;
        var setting = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()];
        var type = userSettings.click2CreateSettings.type;
        var fields = {};
        
        var FieldsFoundArray = [];
    
        //now grab fields from the field set
        $('#CreateRecordPopupV2 .createrecord-fieldset [class^="field::"]').each(function () 
        {
            var fieldName = $(this).attr('data-field');
            var fieldType = $(this).attr('data-type');
            
            FieldsFoundArray.push(fieldName);
    
            var value = '';
            if(jQuery(this).find('.get-input').is('img')) {
              value = undefined;
            }
            else if(fieldType == 'picklist') {
                //find the select value
                value = $(this).find('select').val();
            }
            else if (fieldType == 'reference') 
            {
                if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
                {
                    value = $(this).find('input').val();
                }
                else 
                {
                    value = $(this).find('select').val();
                }
            }
            else if (fieldType == 'boolean') {
                if($(this).find('input').is(':checked')) {
                    value = true;
                }
                else {
                    value = false;
                }
            }
            else 
            {
                value = $(this).find('.get-input').val();
            }
    
            //if(value != '' && value != undefined)
            if(value != undefined) 
            {
                fields[fieldName] = value;
            }
        });
        
        
        //console.log(FieldsFoundArray);
        //console.log(FieldsFoundArray);
        
        
        //Add Default values if they aren't already present on the form
        
        if (!MA.Util.isBlank(setting.record.DefaultField__c) && !MA.Util.isBlank(setting.record[type+'DefaultValue__c']) && $.inArray(setting.record[type+'DefaultValue__c'],FieldsFoundArray) == -1) {
            fields[setting.record.DefaultField__c] = setting.record[type+'DefaultValue__c'];
        }
    
    
        if (userSettings.click2CreateSettings.type == 'MyPosition') 
        {
            if (!MA.Util.isBlank(setting.record['MyPositionName__c']) && $.inArray(setting.record['MyPositionName__c'],FieldsFoundArray) == -1  ) { fields[setting.record['MyPositionName__c']] = userSettings.click2CreateSettings.name; }
            if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['MyPositionDefaultValue__c']; }
        }
        else if (userSettings.click2CreateSettings.type == 'POI') 
        {
            if (!MA.Util.isBlank(setting.record['POIName__c']) && $.inArray(setting.record['POIName__c'],FieldsFoundArray) == -1) { fields[setting.record['POIName__c']] = userSettings.click2CreateSettings.name; }
            if (!MA.Util.isBlank(setting.record['POIPhone__c']) && $.inArray(setting.record['POIPhone__c'],FieldsFoundArray) == -1) { fields[setting.record['POIPhone__c']] = userSettings.click2CreateSettings.phone || ''; }
            if (!MA.Util.isBlank(setting.record['POIWebsite__c']) && $.inArray(setting.record['POIWebsite__c'],FieldsFoundArray) == -1) { fields[setting.record['POIWebsite__c']] = userSettings.click2CreateSettings.website || ''; }
            if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['POIDefaultValue__c']; }
        }
        
        //add address fields
        if (setting.record[type+'Street__c'] && $.inArray(setting.record[type+'Street__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Street__c']] = geoResponse.result.CompleteStreetAddress; }
        if (setting.record[type+'City__c'] && $.inArray(setting.record[type+'City__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'City__c']] = geoResponse.result.City; }
        if (setting.record[type+'State__c'] && $.inArray(setting.record[type+'State__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'State__c']] = geoResponse.result.State; }
        if (setting.record[type+'PostalCode__c'] && $.inArray(setting.record[type+'PostalCode__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'PostalCode__c']] = geoResponse.result.PostalCode; }
        if (setting.record[type+'Country__c'] && $.inArray(setting.record[type+'Country__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Country__c']] = geoResponse.result.Country; }
        if (setting.record[type+'Latitude__c'] && $.inArray(setting.record[type+'Latitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Latitude__c']] = userSettings.click2CreateSettings.position.lat(); }
        if (setting.record[type+'Longitude__c'] && $.inArray(setting.record[type+'Longitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Longitude__c']] = userSettings.click2CreateSettings.position.lng(); }
        
    
        
    
        //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
        var fieldsArr = [];
        $.each(fields, function (name, val) {
            fieldsArr.push({ name: name, value: val });
        });
        fields = fieldsArr;
        
        var setting = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()];
        var recordTypeId = $('#CreateRecordPopupV2 .createrecord2-recordtype').val();
        var type = userSettings.click2CreateSettings.type;
        
        var fieldSetName = 'missing';
        
        if (setting.record.FieldSetOptions__c != undefined)
        {
            var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
            
            $.each(FieldSetOptionsArray, function (i, recordType) {
                if (recordTypeId == recordType.RecordTypeId)
                {
                    if (type == "MyPosition")
                    {
                        fieldSetName = recordType.MyPositionFieldSetAPIName;
                    }
                    else if (type == "POI")
                    {
                        fieldSetName = recordType.POIFieldSetAPIName;
                    }
                }
                
                
            });
            
        }
        else
        {
            fieldSetName = userSettings.click2CreateSettings.settings[$('#CreateRecordPopupV2 .createrecord2-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
        }
    
        //create record
        $.ajax({
            url: MA.resources.Tooltip+"?securityToken="+securityToken+"&action=createRecord&core.apexpages.devmode.url=0",
            type: 'POST',
            dataType: 'JSON',
            data: {
                sobject: $('#CreateRecordPopupV2 .createrecord2-object').val(),
                recordTypeId: $('#CreateRecordPopupV2 .createrecord2-recordtype').val() || '',
                fieldSet: fieldSetName,
                fields: JSON.stringify(fields)
            },
            success: function (response) {
                var $errorList = $('#CreateRecordPopupV2 .createrecord2-fieldset-errors').empty().hide();
                if (!response.success) {
                    if (response.errors && response.errors.length > 0) {
                        $.each(response.errors, function (i, errMsg) {
                            $('<li/>').text(errMsg).appendTo($errorList);
                        });
                    }
                    else if (response.error) {
                        $('<li/>').text(response.error).appendTo($errorList);
                    }
                    else {
                        $('<li>Unknown Error</li>').appendTo($errorList);
                    }
                    $errorList.show();
                    MA.Popup.showLoading({display:false, popupId: 'CreateRecordPopupV2'});
                }
                else {
                    userSettings.click2CreateSettings.record = response.record;
    
                    var recordId = response.record.Id;
                    var recordName = MA.Util.isBlank(setting.record[type+'Name__c']) ? userSettings.click2CreateSettings.name : $('#CreateRecordPopupV2 .createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Name__c']+'"]').find('input').val();
                    var markerShape = MA.Marker.shapes['Favorite'];
                    var marker;
                    if (!(window.ActiveXObject) && "ActiveXObject" in window) {
                        marker = new RichMarker({
                            map: MA.map,
                            position: userSettings.click2CreateSettings.position,
                            anchor: markerShape.anchor.Rich,
                            flat: true,
                            zIndex: 1000,
                            title: recordName,
                            record: { record: { Id: recordId } },
                            content: MA.Marker.createSVG({ type: 'Marker', color: '#FF8800:Favorite' })
                        });
                    }
                    else {
                        marker = new google.maps.Marker({
                            map: MA.map,
                            position: userSettings.click2CreateSettings.position,
                            icon: {
                                url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(MA.Marker.createSVG({ type: 'Marker', color: '#FF8800:Favorite' }))),
                                anchor: markerShape.anchor
                            },
                            zIndex: 1000,
                            title: recordName,
                            record: { record: { Id: recordId } }
                        });
                    }
                    marker.record.marker = marker;
                    MA.Map.click2CreateMarkers.push(marker);
    
                    //handle marker click
                    google.maps.event.addListener(marker, 'click', function ()
                    {
                        //create tooltip content
                        var $tooltipContent = $([
                            '<div>',
                                '<div class="tooltip-header">',
                                    '<div class="name"><a target="_blank" style="font-family: helvetica,arial,sans-serif;font-size: 12px;color: #2265BB;font-weight: bold;text-decoration: none;white-space: normal;" /></div>',
                                    '<div class="address" style="margin: 3px 0 5px 0;padding: 0;font-family: helvetica,arial,sans-serif;font-size: 11px;font-weight: bold;text-decoration: none;color: #000;white-space: normal;" />',
                                '</div>',
                                '<div class="layout-tooltip">',
                                    '<div class="buttonset-section-columns">',
                                        '<div class="buttoncolumn"><div class="actionbutton">Add to Route</div></div>' +
                                        '<div class="buttoncolumn"><div class="actionbutton">Take Me There</div></div>' +
                                        //'<div class="buttoncolumn"><div class="actionbutton checkin">Check In</div></div>' +
                                        '<div class="buttoncolumn"><div class="actionbutton">Remove Marker</div></div>' +
                                    '</div>',
                                '</div>',
                            '</div>'
                        ].join(''));
    
                        //populate values
                        if (sforce && sforce.one) {
                            $tooltipContent.find('.name a').attr('href', '#').text(recordName).click(function () { sforce.one.navigateToSObject(recordId) });
                        }
                        else {
                            $tooltipContent.find('.name a').attr('href', MA.SitePrefix+'/'+recordId).text(recordName);
                        }
                        $tooltipContent.find('.address').text(geoResponse.result.FormattedAddress).click(function () { launchNativeGPS(marker.getPosition().lat(), marker.getPosition().lng()); });
    
                        //update check in button to check out if needed
                        if (marker.record.record.Tasks) {
                             $.each(marker.record.record.Tasks.records || [], function (index, task) {
                                 if (!task.IsClosed) {
                                     $tooltipContent.find('.actionbutton.checkin').data('CheckInId', task.Id).text('Check Out');
                                     return false;
                                 }
                             });
                        }
    
                        //launch infobubble
                        MA.Map.InfoBubble.show({
                            position: this.getPosition(),
                            anchor: marker,
                            minWidth: 420,
                            content: $tooltipContent.get(0)
                        });
    
                        //handle action button clicks
                        $tooltipContent.find('.actionbutton').click(function () {
                            switch ($(this).text())
                            {
                                case 'Add to Route':
                                    var c2cRec = {
                                        id : recordId,
                                        baseObject : '{C2C}'+$('#createrecord-object').val()
                                    }
                                    MAActionFramework.standardActions['Add to Trip'].ActionValue({
                                        customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress, c2cRec : c2cRec }]
                                    });
    
                                break;
                                case 'Take Me There':
    
                                    MAActionFramework.standardActions['Take Me There'].ActionValue({
                                        customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress }]
                                    });
    
                                break;
                                case 'Check In':
    
                                    MAActionFramework.standardActions['Check In'].ActionValue({
                                        button: $(this),
                                        records: [marker.record]
                                    });
    
                                break;
    
                                case 'Check Out':
    
                                    MAActionFramework.standardActions['Check Out'].ActionValue({
                                        button: $(this),
                                        records: [marker.record]
                                    });
    
                                break;
                                case 'Remove Marker':
    
                                    marker.setMap(null);
    
                                break;
                            }
                            MA.Map.InfoBubble.hide();
                        });
                    });
    
                    //close the popup
                    MA.Popup.closeMAPopup();
                }
            }
        });
    }
}

/********************************
*   Create Record Functions
*********************************/
function CreateRecord_Launch(options)
{
    $('#CreateRecordPopup .createrecord-step').hide().first().show();
    $('#createrecord-recordtype').closest('.createrecord-formitem').hide();
    $('#createrecord-fieldset-errors').hide();
    $('#CreateRecordPopup .createrecord-step').hide().first().show();
    $('#createrecord-loadmask').show();
    LaunchPopupWindow($('#CreateRecordPopup'), 400);

    var $objectPicklist = $('#createrecord-object').empty();
    $.ajax({
        url: MA.resources.Tooltip+"?securityToken="+securityToken+"&action=getClick2CreateSettings&core.apexpages.devmode.url=0",
        type: 'POST',
        dataType: 'JSON',
        data: {},
        success: function (response) {
            if (response.success) {
                userSettings.click2CreateSettings = $.extend({ settings: MA.Util.removeNamespace(response.settings) }, options);
                $.each(userSettings.click2CreateSettings.settings, function (objName, setting) {
                    if (setting.record[options.type+'Enabled__c']) {
                        $objectPicklist.append($('<option />').attr('value', objName).text(setting.objectLabel));
                    }
                });

                if ($objectPicklist.find('option').length == 0) {
                    CreateRecord_Cancel();
                    alert('Your organization has no Click2Create settings.  Please contact an admin for support.')
                }
                else {
                    $objectPicklist.change();
                }

                userSettings.click2CreateSettings.geoResponse = null;
                if (options.place) {
                    var resultMap = {};
                    $.each(options.place.address_components, function (i, component) {
                        $.each(component.types, function (j, type) {
                            resultMap[type] = component['long_name'];
                        });
                    });
                    userSettings.click2CreateSettings.geoResponse = {
                        result: {
                            IsBadAddress        : false,
                            Label               : 'ROOFTOP',
                            Relevance           : 100,
                            Latitude            : options.place.geometry.location.lat(),
                            Longitude           : options.place.geometry.location.lng(),
                            FormattedAddress    : options.place.formatted_address,
                            HouseNumber         : resultMap['street_number'] || '',
                            Street              : resultMap['route'] || '',
                            City                : resultMap['locality'] || '',
                            County              : resultMap['administrative_area_level_2'] || '',
                            State               : resultMap['administrative_area_level_1'] || '',
                            PostalCode          : resultMap['postal_code'] || '',
                            District            : resultMap['neighborhood'] || '',
                            Country             : resultMap['country'] || ''
                        }
                    };
                    //complete street address (house number + route + subpremise)
                    var completeStreetAddressParts = [];
                    if (resultMap['street_number']) {
                        completeStreetAddressParts.push(resultMap['street_number']);
                    }
                    if (resultMap['route']) {
                        completeStreetAddressParts.push(resultMap['route']);
                    }
                    if (resultMap['subpremise']) {
                        completeStreetAddressParts.push('#' + resultMap['subpremise']);
                    }
                    userSettings.click2CreateSettings.geoResponse.result['CompleteStreetAddress'] = completeStreetAddressParts.join(' ');
                }
            }
        }
    });
}
function CreateRecord_Object_Change()
{
    $('#createrecord-loadmask').show();
    $('#createrecord-recordtype').closest('.createrecord-formitem').hide();

    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var $recordTypePicklist = $('#createrecord-recordtype').empty();
    $.each(setting.recordTypes, function (i, recordType) {
        
        if (recordType.available) 
        {
            if (recordType.recordTypeId == '012000000000000AAA')
            {
                if (setting.recordTypes.length > 1)
                {
                    
                }
                else
                {
                    $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name + ' (System Default)'));
                }
                
            }
            else
            {
                $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
            }
            
            if (recordType.defaultRecordTypeMapping) 
            {
                $recordTypePicklist.val(recordType.recordTypeId);
            }
        }
        
        /*
        if (recordType.available && recordType.recordTypeId != '012000000000000AAA') {
            $recordTypePicklist.append($('<option />').attr('value', recordType.recordTypeId).text(recordType.name));
            if (recordType.defaultRecordTypeMapping) {
                $recordTypePicklist.val(recordType.recordTypeId);
            }
        }
        */
    });
    
    
    
    if ($recordTypePicklist.find('option').length > 1) {
        $recordTypePicklist.closest('.createrecord-formitem').show();
    }
    
    
    $('#createrecord-loadmask').hide();
}
function CreateRecord_Step1_Continue()
{
    

    var type = userSettings.click2CreateSettings.type;
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    
    var recordTypeId = $('#createrecord-recordtype').val();
    
    var fieldSetName = 'missing';
    
    if (setting.record.FieldSetOptions__c != undefined)
    {
        var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
        
        $.each(FieldSetOptionsArray, function (i, recordType) {
            if (recordTypeId == recordType.RecordTypeId)
            {
                if (type == "MyPosition")
                {
                    fieldSetName = recordType.MyPositionFieldSetAPIName;
                }
                else if (type == "POI")
                {
                    fieldSetName = recordType.POIFieldSetAPIName;
                }
            }
            
            
        });
        
    }
    else
    {
        fieldSetName = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
    }
    

    
    
    if (fieldSetName == 'missing')
    {
        alert('Unable to find Field Set, please contact your administrator');
    }
    else
    {
        
        $('#CreateRecordPopup .createrecord-step').hide();
        $('#createrecord-step2').show();
        $('#createrecord-loadmask').show();
    
        $("#createrecord-fieldset").html('Loading...').load(MA.resources.Click2Create, "sobject=" + $('#createrecord-object').val() + '&fieldset=' + fieldSetName + '&recordtypeid=' + (recordTypeId || '') + '&platform=' + (MA.IsMobile ? 'tablet' : 'desktop'), function () {
            function reverseGeocodeComplete (geoResponse) {
                if (userSettings.click2CreateSettings.type == 'MyPosition') {
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['MyPositionName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['MyPositionDefaultValue__c']); } catch (err) {}
                }
                else if (userSettings.click2CreateSettings.type == 'POI') {
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIName__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.name); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIPhone__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.phone || ''); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['POIWebsite__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.website || ''); } catch (err) {}
                    try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record['DefaultField__c']+'"]').find('.get-input').val(setting.record['POIDefaultValue__c']); } catch (err) {}
                }
                else if (userSettings.click2CreateSettings.type == 'MapClick') {
    
                }
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Street__c']+'"]').find('.get-input').val(geoResponse.result.CompleteStreetAddress); } catch (err) {}
                try { $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'City__c']+'"]').find('.get-input').val(geoResponse.result.City); } catch (err) {}
                try { $('#createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'State__c']+'"]').find('.get-input').val(geoResponse.result.State); } catch (err) {}
                try { $('#createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'PostalCode__c']+'"]').find('.get-input').val(geoResponse.result.PostalCode); } catch (err) {}
                try { $('#createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Country__c']+'"]').find('.get-input').val(geoResponse.result.Country); } catch (err) {}
                try { $('#createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Latitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lat()); } catch (err) {MA.log(err);}
                try { $('#createrecord-fieldset  .fieldInput[data-field="'+setting.record[type+'Longitude__c']+'"]').find('.get-input').val(userSettings.click2CreateSettings.position.lng()); } catch (err) {}
                $('#createrecord-loadmask').hide();
            }
    
            if (userSettings.click2CreateSettings.geoResponse) {
                reverseGeocodeComplete(userSettings.click2CreateSettings.geoResponse);
            }
            else {
                MA.Geocoding.reverseGeocode({ latLng: userSettings.click2CreateSettings.position }, function (geoResponse) {
                    userSettings.click2CreateSettings.geoResponse = geoResponse;
                    reverseGeocodeComplete(geoResponse);
                });
            }
        });
    }
}
function CreateRecord_Step2_Continue()
{
    $('#createrecord-loadmask').show();

    //start collecting field values starting with default fields
    var geoResponse = userSettings.click2CreateSettings.geoResponse;
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var type = userSettings.click2CreateSettings.type;
    var fields = {};
    
    var FieldsFoundArray = [];

    //now grab fields from the field set
    $('#createrecord-fieldset [class^="field::"]').each(function () 
    {
        var fieldName = $(this).attr('data-field');
        var fieldType = $(this).attr('data-type');
        
        FieldsFoundArray.push(fieldName);

        var value = '';
        if(fieldType == 'picklist') {
            //find the select value
            value = $(this).find('select').val();
        }
        else if (fieldType == 'reference') 
        {
            if($(this).find('select').length == 0 && $(this).find('input').val() != '000000000000000') 
            {
                value = $(this).find('input').val();
            }
            else if($(this).find('select').length == 1 && $(this).find('span.lookupInput').length == 1) 
            {
                value = $(this).find('input').val();
            }
            else 
            {
                value = $(this).find('select').val();
            }
        }
        else 
        {
            value = $(this).find('.get-input').val();
        }

        //if(value != '' && value != undefined)
        if(value != undefined) 
        {
            fields[fieldName] = value;
        }
    });
    
    
    //console.log(FieldsFoundArray);
    //console.log(FieldsFoundArray);
    
    
    //Add Default values if they aren't already present on the form
    
    if (!MA.Util.isBlank(setting.record.DefaultField__c) && !MA.Util.isBlank(setting.record[type+'DefaultValue__c']) && $.inArray(setting.record[type+'DefaultValue__c'],FieldsFoundArray) == -1) {
        fields[setting.record.DefaultField__c] = setting.record[type+'DefaultValue__c'];
    }


    if (userSettings.click2CreateSettings.type == 'MyPosition') 
    {
        if (!MA.Util.isBlank(setting.record['MyPositionName__c']) && $.inArray(setting.record['MyPositionName__c'],FieldsFoundArray) == -1  ) { fields[setting.record['MyPositionName__c']] = userSettings.click2CreateSettings.name; }
        if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['MyPositionDefaultValue__c']; }
    }
    else if (userSettings.click2CreateSettings.type == 'POI') 
    {
        if (!MA.Util.isBlank(setting.record['POIName__c']) && $.inArray(setting.record['POIName__c'],FieldsFoundArray) == -1) { fields[setting.record['POIName__c']] = userSettings.click2CreateSettings.name; }
        if (!MA.Util.isBlank(setting.record['POIPhone__c']) && $.inArray(setting.record['POIPhone__c'],FieldsFoundArray) == -1) { fields[setting.record['POIPhone__c']] = userSettings.click2CreateSettings.phone || ''; }
        if (!MA.Util.isBlank(setting.record['POIWebsite__c']) && $.inArray(setting.record['POIWebsite__c'],FieldsFoundArray) == -1) { fields[setting.record['POIWebsite__c']] = userSettings.click2CreateSettings.website || ''; }
        if (!MA.Util.isBlank(setting.record['DefaultField__c']) && !MA.Util.isBlank(setting.record['DefaultField__c'])) { fields[setting.record['DefaultField__c']] = setting.record['POIDefaultValue__c']; }
    }
    
    //add address fields
    if (setting.record[type+'Street__c'] && $.inArray(setting.record[type+'Street__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Street__c']] = geoResponse.result.CompleteStreetAddress; }
    if (setting.record[type+'City__c'] && $.inArray(setting.record[type+'City__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'City__c']] = geoResponse.result.City; }
    if (setting.record[type+'State__c'] && $.inArray(setting.record[type+'State__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'State__c']] = geoResponse.result.State; }
    if (setting.record[type+'PostalCode__c'] && $.inArray(setting.record[type+'PostalCode__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'PostalCode__c']] = geoResponse.result.PostalCode; }
    if (setting.record[type+'Country__c'] && $.inArray(setting.record[type+'Country__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Country__c']] = geoResponse.result.Country; }
    if (setting.record[type+'Latitude__c'] && $.inArray(setting.record[type+'Latitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Latitude__c']] = userSettings.click2CreateSettings.position.lat(); }
    if (setting.record[type+'Longitude__c'] && $.inArray(setting.record[type+'Longitude__c'],FieldsFoundArray) == -1) { fields[setting.record[type+'Longitude__c']] = userSettings.click2CreateSettings.position.lng(); }
    

    

    //convert fields to an array (this used to be the structure so for now it's easier to just convert back)
    var fieldsArr = [];
    $.each(fields, function (name, val) {
        fieldsArr.push({ name: name, value: val });
    });
    fields = fieldsArr;
    
    var setting = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()];
    var recordTypeId = $('#createrecord-recordtype').val();
    var type = userSettings.click2CreateSettings.type;
    
    var fieldSetName = 'missing';
    
    if (setting.record.FieldSetOptions__c != undefined)
    {
        var FieldSetOptionsArray = JSON.parse(setting.record.FieldSetOptions__c);
        
        $.each(FieldSetOptionsArray, function (i, recordType) {
            if (recordTypeId == recordType.RecordTypeId)
            {
                if (type == "MyPosition")
                {
                    fieldSetName = recordType.MyPositionFieldSetAPIName;
                }
                else if (type == "POI")
                {
                    fieldSetName = recordType.POIFieldSetAPIName;
                }
            }
            
            
        });
        
    }
    else
    {
        fieldSetName = userSettings.click2CreateSettings.settings[$('#createrecord-object').val()].record[userSettings.click2CreateSettings.type+'FieldSet__c'];
    }

    //create record
    $.ajax({
        url: MA.resources.Tooltip+"?securityToken="+securityToken+"&action=createRecord&core.apexpages.devmode.url=0",
        type: 'POST',
        dataType: 'JSON',
        data: {
            sobject: $('#createrecord-object').val(),
            recordTypeId: $('#createrecord-recordtype').val() || '',
            fieldSet: fieldSetName,
            fields: JSON.stringify(fields)
        },
        success: function (response) {
            if (!response.success) {
                var $errorList = $('#createrecord-fieldset-errors').empty();
                if (response.errors.length > 0) {
                    $.each(response.errors, function (i, errMsg) {
                        $('<li/>').text(errMsg).appendTo($errorList);
                    });
                }
                else {
                    $('<li>Unknown Error</li>').appendTo($errorList);
                }
                $errorList.show();
                $('#createrecord-loadmask').hide();
            }
            else {
                userSettings.click2CreateSettings.record = response.record;

                var recordId = response.record.Id;
                var recordName = MA.Util.isBlank(setting.record[type+'Name__c']) ? userSettings.click2CreateSettings.name : $('#createrecord-fieldset .fieldInput[data-field="'+setting.record[type+'Name__c']+'"]').find('input').val();
                var markerShape = MA.Marker.shapes['Favorite'];
                var marker;
                if (!(window.ActiveXObject) && "ActiveXObject" in window) {
                    marker = new RichMarker({
                        map: MA.map,
                        position: userSettings.click2CreateSettings.position,
                        anchor: markerShape.anchor.Rich,
                        flat: true,
                        zIndex: 1000,
                        title: recordName,
                        record: { record: { Id: recordId } },
                        content: MA.Marker.createSVG({ type: 'Marker', color: '#FF8800:Favorite' })
                    });
                }
                else {
                    marker = new google.maps.Marker({
                        map: MA.map,
                        position: userSettings.click2CreateSettings.position,
                        icon: {
                            url: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(MA.Marker.createSVG({ type: 'Marker', color: '#FF8800:Favorite' }))),
                            anchor: markerShape.anchor
                        },
                        zIndex: 1000,
                        title: recordName,
                        record: { record: { Id: recordId } }
                    });
                }
                marker.record.marker = marker;
                MA.Map.click2CreateMarkers.push(marker);

                //handle marker click
                google.maps.event.addListener(marker, 'click', function ()
                {
                    //create tooltip content
                    var $tooltipContent = $([
                        '<div>',
                            '<div class="tooltip-header">',
                                '<div class="name"><a target="_blank" style="font-family: helvetica,arial,sans-serif;font-size: 12px;color: #2265BB;font-weight: bold;text-decoration: none;white-space: normal;" /></div>',
                                '<div class="address" style="margin: 3px 0 5px 0;padding: 0;font-family: helvetica,arial,sans-serif;font-size: 11px;font-weight: bold;text-decoration: none;color: #000;white-space: normal;" />',
                            '</div>',
                            '<div class="layout-tooltip">',
                                '<div class="buttonset-section-columns">',
                                    '<div class="buttoncolumn"><div class="actionbutton">Add to Route</div></div>' +
                                    '<div class="buttoncolumn"><div class="actionbutton">Take Me There</div></div>' +
                                    //'<div class="buttoncolumn"><div class="actionbutton checkin">Check In</div></div>' +
                                    '<div class="buttoncolumn"><div class="actionbutton">Remove Marker</div></div>' +
                                '</div>',
                            '</div>',
                        '</div>'
                    ].join(''));

                    //populate values
                    if (sforce && sforce.one) {
                        $tooltipContent.find('.name a').attr('href', '#').text(recordName).click(function () { sforce.one.navigateToSObject(recordId) });
                    }
                    else {
                        $tooltipContent.find('.name a').attr('href', MA.SitePrefix+'/'+recordId).text(recordName);
                    }
                    $tooltipContent.find('.address').text(geoResponse.result.FormattedAddress).click(function () { launchNativeGPS(marker.getPosition().lat(), marker.getPosition().lng()); });

                    //update check in button to check out if needed
                    if (marker.record.record.Tasks) {
                         $.each(marker.record.record.Tasks.records || [], function (index, task) {
                             if (!task.IsClosed) {
                                 $tooltipContent.find('.actionbutton.checkin').data('CheckInId', task.Id).text('Check Out');
                                 return false;
                             }
                         });
                    }

                    //launch infobubble
                    MA.Map.InfoBubble.show({
                        position: this.getPosition(),
                        anchor: marker,
                        minWidth: 420,
                        content: $tooltipContent.get(0)
                    });

                    //handle action button clicks
                    $tooltipContent.find('.actionbutton').click(function () {
                        switch ($(this).text())
                        {
                            case 'Add to Route':
                                var c2cRec = {
                                    id : recordId,
                                    baseObject : '{C2C}'+$('#createrecord-object').val()
                                }
                                MAActionFramework.standardActions['Add to Trip'].ActionValue({
                                    customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress, c2cRec : c2cRec }]
                                });

                            break;
                            case 'Take Me There':

                                MAActionFramework.standardActions['Take Me There'].ActionValue({
                                    customMarkers: [{ type: type, title: recordName, latlng: marker.getPosition(), address: geoResponse.result.FormattedAddress }]
                                });

                            break;
                            case 'Check In':

                                MAActionFramework.standardActions['Check In'].ActionValue({
                                    button: $(this),
                                    records: [marker.record]
                                });

                            break;

                            case 'Check Out':

                                MAActionFramework.standardActions['Check Out'].ActionValue({
                                    button: $(this),
                                    records: [marker.record]
                                });

                            break;
                            case 'Remove Marker':

                                marker.setMap(null);

                            break;
                        }
                        MA.Map.InfoBubble.hide();
                    });
                });

                $('#CreateRecordPopup').hide();
                MA.Popup.hideBackdrop();
                //$('#fade').fadeOut(function () { $('#fade').remove(); });
            }
        }
    });
}
function CreateRecord_GoToRecord()
{
    if (sforce && sforce.one) {
        sforce.one.navigateToSObject(userSettings.click2CreateSettings.record.Id);
    }
    else {
        window.open(MA.SitePrefix+'/'+userSettings.click2CreateSettings.record.Id);
    }
}
function CreateRecord_GPS()
{
    launchNativeGPS(userSettings.click2CreateSettings.position.lat(), userSettings.click2CreateSettings.position.lng());
}
function CreateRecord_Cancel()
{
    $('#CreateRecordPopup').hide();
    $('#fade').fadeOut(function () { $('#fade').remove(); });
    MA.Popup.hideBackdrop();
}

var visibilityUpdating = false;
var visibilityQueued = false;

function ChangeVisibilityWhenCircleIsAdded(options)
{
    
    //default options
    options = $.extend({
        force: false
    }, options || {});
    
    
    
    
    console.log('Running ChangeVisibilityWhenCircleIsAdded');
    
    /* This is causing some issues and it's going to run too soon anyway (before query rendering is complete) so I'm removing it for now
    if (visibilityUpdating) {
        visibilityQueued = true;
        return;
    }
    visibilityUpdating = true;
    visibilityQueued = false;
    */
    
    //rebuild hit test shape manager
    MA.Map.hitTestShapeMgr = new MA.Map.ShapeManager();
    $('#PlottedQueriesTable .layer.proximity, #PlottedQueriesTable .PlottedShapeLayer').each(function () {
        var $layer = $(this);
        if ($layer.find('.affectvisibility').is(':checked')) {
            if ($layer.data('dataLayer')) {
                MA.Map.hitTestShapeMgr.addLayer($layer.data('dataLayer'));
            }
            if ($layer.data('kmlLayer')) {
                /* Look Here */
            }
            if ($layer.data('proxObject')) {
                MA.Map.hitTestShapeMgr.addLayer($layer.data('proxObject'));
            }
            if ($layer.data('proxObjects') && $layer.data('proxObjects').length > 0) {
                //loop over all prox objects and add
                var proxObjects = $layer.data('proxObjects');
                for(var pp = 0; pp < proxObjects.length; pp++) {
                    var proxObject = proxObjects[pp];
                    MA.Map.hitTestShapeMgr.addLayer(proxObject);
                }
                
            }
        }
    });
    $('#PlottedQueriesTable .PlottedRowUnit').each(function () {
        var $plottedQuery = $(this);
        /*
        if ($plottedQuery.data('proximityOptions').enabled && $plottedQuery.data('proximityOptions').affectVisibility) {
            $.each($plottedQuery.data('proximityObjects'), function (index, proxObject) {
                if (proxObject.getMap() != null) {
                    MA.Map.hitTestShapeMgr.addLayer(proxObject);
                }
            });
        }
        */
        
        //Updated code from the above to solve case 00006097
        if ($plottedQuery.data('proximityOptions') && $plottedQuery.data('proximityOptions').enabled && $plottedQuery.data('proximityOptions').affectVisibility) {
            $.each($plottedQuery.data('proximityObjects'), function (index, proxObject) {
                if (proxObject.getMap() != null) {
                    MA.Map.hitTestShapeMgr.addLayer(proxObject);
                }
            });
        }
        
    });
    
    //this is special just for the mobile page.  it can go away later
    try {
        if (pc_Added) {
            try {
                MA.Map.hitTestShapeMgr.addLayer(ProximityCircle); 
            }
            catch (err) {
                try {
                    $.each(ProximityCircle, function (index, proxObject) {
                        MA.Map.hitTestShapeMgr.addLayer(proxObject);
                    });
                }
                catch (err) { }
            }
        }
    }
    catch (err) { }
    
    //if there aren't any records in the MA.Map.hitTestShapeMgr.shapes array, then we don't need to touch the queries
    //this will not remove the markers when the checkbox is unchecked... have to force on uncheck.
   if (MA.Map.hitTestShapeMgr.shapes.length > 0 || options.force)
    {
        
        //loop over each plotted query
        $('#PlottedQueriesContainer .PlottedRowUnit').each(function () {
            var $plottedQuery = $(this);
            if(!$plottedQuery.hasClass('DataLayer')) {
                //determine which modes need to be rerendered
                $plottedQuery.addClass('unloading');
                
                //$plottedQuery.data('visibility-affected', true);
                
                var modesToRerender = [];
                if ($plottedQuery.find('.renderButtons-button.markers').is('.on')) { modesToRerender.push('Markers'); }
                if ($plottedQuery.find('.renderButtons-button.cluster').is('.on')) { modesToRerender.push('Cluster'); }
                if ($plottedQuery.find('.renderButtons-button.scatter').is('.on')) { modesToRerender.push('Scatter'); }
                
                //rerender this query as needed
                var queryProximityEnabled = ($plottedQuery.data('proximityOptions') && $plottedQuery.data('proximityOptions').enabled);
                if (!queryProximityEnabled && modesToRerender.length > 0) {
                    setTimeout(function doRerender() {
                        
                        //rerender this mode
                        var mode = modesToRerender.shift();
                        unrenderQuery($plottedQuery, mode, function () {
                            $plottedQuery.removeClass('unloading').addClass('loading');
                            renderQuery($plottedQuery, mode, function () {
                            
                                //rerender the next mode or we're done
                                if (modesToRerender.length > 0) {
                                    $plottedQuery.removeClass('loading').addClass('unloading');
                                    setTimeout(doRerender);
                                }
                                else {
                                    $plottedQuery.removeClass('loading');
                                    $plottedQuery.find('.queryIcon').show();
                                    $plottedQuery.find('.loading-icon').hide();
                                    updateQueryInfo($plottedQuery);
                                    
                                    //reload any popups that this may have affected
                                    refreshPopups();
                                }
                            
                            });
                        }); 
                        
                    });
        
                    //listview refresh when hiding entire query
                    // console.log('refreshing:',$plottedQuery.data('qid'));
                    // tabOptions = {
                    //     layerId: $plottedQuery.data('qid'),
                    //     isSelectedTab: $plottedQuery.data('qid') === 'SelectedTab',
                    //     isExport: false
                    // };
                    // MAListView.DrawTab(tabOptions);
                }
                else 
                {
                    //nothing to rerender
                    $plottedQuery.removeClass('unloading');
                }
            }
            else {
                
                MADemographicLayer.RemoveLayerFromDom($plottedQuery,true,function() {
        	        //refresh the query
        	        MADemographicLayer.rerenderDataLayer($plottedQuery,function(res) {
        			    console.log(res);
        			});
        	    });
            }
            
        }); //end of $('#PlottedQueriesContainer .PlottedRowUnit')
    }

    
    /* This is causing some issues and it's going to run too soon anyway (before query rendering is complete) so I'm removing it for now
    visibilityUpdating = false;
    if (visibilityQueued) {
        ChangeVisibilityWhenCircleIsAdded();
    }
    */
}

function addProximityLayer(options)
{
    
    options = $.extend({
        fillColor: '#223388',
        borderColor: '#882233',
        colorOptions : {
            fillColor : '#223388',
            borderColor : '#882233',
            fillOpacity : 0.6
        }
    }, options);


    //Hide water-mark
    $('#PlottedQueriesWrapper .plotted-watermark').hide();
    
    //add a prox layer
    var $proxLayer = $('#templates .layer.proximity').clone().prependTo($('#PlottedQueriesTable'));
    setTimeout(function () { $('#PlottedQueriesTable').slimScroll({ scrollBy: 0 - $('#PlottedQueriesTable').scrollTop() }); }, 500);
    
    //send a request to get KML options
    $.ajax({
        url: 'QueryBuilderAPI?action=getKMLOptions',
        type: 'POST',
        dataType: 'JSON',
        data: {
            securityToken: securityToken
        },
        success: function (response)
        {
            var $kmlOptions = $proxLayer.find('.options-kml-document').empty();
            $.each(response.data, function (index, kmlDocument) {
                $kmlOptions.append($('<option />').attr('value', kmlDocument.Id).text(kmlDocument.Name));
            });
            $kmlOptions.removeAttr('disabled').combobox();
        },
        error: function (response)
        {
            Debug('Unable to retrieve KML documents');
        }
    });

    //Add a unique ID to the attributes when the shape is plotted               
    //this links to the listview table that can be viewed.              
    var qid = Date.now().getTime() + 'prox';                
    $proxLayer.data('qid', qid);                
    $proxLayer.attr('qid', qid);
    
    //Setup watermark on textbox for help
    $proxLayer.find('.options-circle-radius').blur(function(){
        if ($(this).val().length == 0)
            $(this).val("{!$Label.MA_Radius}...").addClass('watermark');
        }).focus(function(){
        if ($(this).val() == "{!$Label.MA_Radius}...")
            $(this).val('').removeClass('watermark');
        }).val("{!$Label.MA_Radius}...").addClass('watermark');
    
    //init opacity slider
    $proxLayer.find(".prox-slider").slider({
        value: options.colorOptions.fillOpacity*100,
        orientation: "horizontal",
        range: "min",
        animate: true,
        max: 100,
        min:0,
        step: 1,
        slide: function( event, ui ) {
            $proxLayer.find('.opac-text').text('Opacity: ' + ui.value + '%');
        }
    });
    $proxLayer.find('.opac-text').text('Opacity: ' + options.colorOptions.fillOpacity*100 + '%');

    //address info
    $proxLayer.find('.options-circle-address')
        .blur(function() {
            if ($(this).val().length == 0) {
                $(this).val("{!$Label.MA_Address}...").addClass('watermark');
            }
        })
        .focus(function() {
            if ($(this).val() == "{!$Label.MA_Address}...") {
                $(this).val('').removeClass('watermark');
            }
        })
        .val("{!$Label.MA_Address}...")
        .addClass('watermark')
    ;
    $proxLayer.on('change','#hide-prox',function () {
        var checked = $(this).is(':checked');

        if(checked) {
            $proxLayer.find('.prox-visibility .MAIcon').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');
            $proxLayer.data('proxObject').setMap(MA.map);
        }
        else {
            $proxLayer.find('.prox-visibility .MAIcon').removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
            $proxLayer.data('proxObject').setMap(null);
        }
    });

    $proxLayer.on('mouseenter','.drop-menu-wrapper',function(event) {
        var $button = $(this);
        var menuItemPos = $button.position();
        //get position to show menu
        var topPos = menuItemPos.top + 25; //+25px for button size

        $proxLayer.find('.prox-menu-visibility').css('top',topPos);
        $proxLayer.find('.plotted-visibile-icon, .prox-menu-visibility').addClass('active');
    });
    $proxLayer.on('mouseleave','.drop-menu-wrapper',function(event) {
        $('.drop-down-menu, .btn-lg').removeClass('active');
    });
    
    if(options.isCustom) {
        $proxLayer.find('.color-wrapper .fillcolor').attr('value', options.colorOptions.fillColor);
        $proxLayer.find('.color-wrapper .bordercolor').attr('value', options.colorOptions.borderColor);
    }
    else {
        $proxLayer.find('.color-wrapper .fillcolor').attr('value', options.fillColor);
        $proxLayer.find('.color-wrapper .bordercolor').attr('value', options.borderColor);
    }
    jscolor.init();
    
    //fire events to update views
    //console.log($proxLayer.find('.proximitytype').val());
    if ($proxLayer.find('.proximitytype').val() != 'Circle') {
        $proxLayer.find('.proximitytype').change();
        //console.log('here');
    }
    $proxLayer.find('.options-isoline-unit-type').change();
    
    //populate any options that were passed (CURRENTLY ONLY CIRLE WORKS, AND ONLY FOR LAT/LONG)
    if (options && options.proximityType)
    {
        switch (options.proximityType) 
        { 
            case 'Circle':
                if ((options.latitude && options.longitude) || options.center)
                {
                    $proxLayer.find('.proximitytype').val(options.proximityType);
                    $proxLayer.find('.options-circle-radius').val(options.radius || userSettings.defaultProximitySettings.radius);
                    $proxLayer.find('.options-circle-unit').val(options.unit || userSettings.defaultProximitySettings.unit);
                    $proxLayer.find('.options-circle-address').val(options.address || '');
                    
                    //quick fix to fill in the address field on the layer (later we should send the record for non map it as well)
                    var center;
                    if (options.record) {
                        $proxLayer.find('.options-circle-address').val('Lat: ' + options.record.markerLatitude + '\nLong: ' + options.record.markerLongitude);
                        center = center = new google.maps.LatLng(parseFloat(options.latitude), parseFloat(options.longitude));
                    }
                    else {
                        if(options.center) {
                            center = new google.maps.LatLng(parseFloat(options.center.lat), parseFloat(options.center.lng));
                            $proxLayer.find('.options-circle-address').val('Lat: ' + options.center.lat + '\nLong: ' + options.center.lng);
                        }
                        else {
                            $proxLayer.find('.options-circle-address').val('Lat: ' + options.latitude + '\nLong: ' + options.longitude);
                            center = new google.maps.LatLng(parseFloat(options.latitude), parseFloat(options.longitude));
                        }
                    }
                    
                    //get the radius
                    /*var displayRadius = Math.round(userSettings.defaultProximitySettings.radius * unitFactors[userSettings.defaultProximitySettings.unit]['METERS']);
                    if(options.isCustom) {
                        displayRadius = Math.round(options.radius * unitFactors["METERS"][options.unit]);
                        $proxLayer.find('.proximitytype').attr('disabled','disabled');
                    }
                    $proxLayer.find('.options-circle-radius').val(displayRadius);*/
                    
                    //create a prox circle and add it to the map
                    $proxLayer.data('proxObject', new google.maps.Circle({
                        map: MA.map,
                        center: center,
                        radius: options.radius != null ? options.radius : userSettings.defaultProximitySettings.radius * unitFactors[userSettings.defaultProximitySettings.unit]['METERS'],
                        layerType: 'prox',
                        strokeColor: options.colorOptions.borderColor,
                        strokeWeight: 3,
                        strokeOpacity: 1,
                        fillColor: options.colorOptions.fillColor,
                        fillOpacity: $proxLayer.find(".prox-slider").slider( "value" )/100,
                        qid : qid
                    }));
                    
                    //handle circle events
                    google.maps.event.addListener($proxLayer.data('proxObject'), 'click', function (e) {
                        proximityLayer_Click({ position: e.latLng, type: 'circle', shape: $proxLayer.data('proxObject') });
                    });
                    google.maps.event.addListener($proxLayer.data('proxObject'), 'rightclick', function (e) {
                        Shape_Context.call(this, e);
                    });
                    google.maps.event.addListener($proxLayer.data('proxObject'), 'radius_changed', function (e) {
                        ChangeVisibilityWhenCircleIsAdded();
                    });
                    google.maps.event.addListener($proxLayer.data('proxObject'), 'center_changed', function (e) {
                        ChangeVisibilityWhenCircleIsAdded();
                    });
                    
                    //hide options
                    $proxLayer.find('.link.showoptions').click();
                    
                    //update markers
                    ChangeVisibilityWhenCircleIsAdded();
                    
                    //done, fire the callback
                    try { options.success(); } catch (err) { }
                }
                
                break;
            case 'Polygon':
                $proxLayer.find('.proximitytype').val(options.proximityType);

                if(options.isCustom) {
                    if(options.points) {
                        $proxLayer.data('proxObject', new google.maps.Polygon({
                            paths: options.points,
                            strokeColor: options.colorOptions.borderColor,
                            strokeOpacity: 0.8,
                            strokeWeight: 3,
                            fillColor: options.colorOptions.fillColor,
                            fillOpacity: $proxLayer.find(".prox-slider").slider( "value" )/100,
                            map : MA.map,
                            qid : qid
                        }));

                        $proxLayer.find('.proximitytype').change().attr('disabled','disabled');
                        $proxLayer.find('.link.showoptions').click();
                        
                        //handle circle events
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'click', function (e) {
                            proximityLayer_Click({ position: e.latLng, type: 'polygon', shape: $proxLayer.data('proxObject') });
                        });
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'rightclick', function (e) {
                            Shape_Context.call(this, e);
                        });
                    }
                }

                break;
                
            case 'Rectangle':
                $proxLayer.find('.proximitytype').val('Polygon');
                $proxLayer.find('.proximitytype').change().attr('disabled','disabled');
                $proxLayer.find('.link.showoptions').click();
                
                if(options.isCustom) {
                    if(options.bounds) {
                        //create the lat lng bounds
                        var bounds = new google.maps.LatLngBounds(
                            new google.maps.LatLng(options.bounds.SW.lat,options.bounds.SW.lng),
                            new google.maps.LatLng(options.bounds.NE.lat,options.bounds.NE.lng)
                        );
                        
                        
                        $proxLayer.data('proxObject', new google.maps.Rectangle({
                            strokeColor: options.colorOptions.borderColor,
                            strokeOpacity: 0.8,
                            strokeWeight: 3,
                            fillColor: options.colorOptions.fillColor,
                            fillOpacity: $proxLayer.find(".prox-slider").slider( "value" )/100,
                            map : MA.map,
                            bounds : bounds,
                            qid : qid
                        }));
                        
                        //handle circle events
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'click', function (e) {
                            proximityLayer_Click({ position: e.latLng, type: 'polygon', shape: $proxLayer.data('proxObject') });
                        });
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'rightclick', function (e) {
                            Shape_Context.call(this, e);
                        });
                    }
                }
                
                break;
            case 'Isoline':
                $proxLayer.find('.proximitytype').val(options.proximityType);
                if (options.unitType) { $proxLayer.find('.options-isoline-unit-type').val(options.unitType).change(); }
                if (options.unit) { $proxLayer.find('.options-isoline-unit').val(options.unit); }
                if (options.unitValue) { $proxLayer.find('.options-isoline-unit-value').val(options.unitValue); }
                if (options.mode) { $proxLayer.find('.options-isoline-mode').val(options.mode); }
                if (options.enableTraffic) { $proxLayer.find('.options-isoline-traffic').attr('checked', 'checked'); }
                if (options.address) { $proxLayer.find('.options-isoline-address').val(options.address); }
                break;
            default:
                break;  
        }
    }
    else {
        try { options.success(); } catch (err) { }
    }
    
    return $proxLayer;
}
function updateProximityLayer($proxLayer)
{
    
}
function renderProximityLayer($proxLayer)
{
    //show loading
    $proxLayer.append("<div class='loadmask'></div>");
    
    //remove the layer (and associated tooltip) if it exists
    if ($proxLayer.data('proxObject') && $proxLayer.find('.proximitytype').val() != 'Polygon') {
        if ($proxLayer.data('proxObject').popupHandle) {
            try {
                $proxLayer.data('proxObject').popupHandle.setMap(null);
            }
            catch (err) { }
        }
        try { $proxLayer.data('proxObject').setMap(null); } catch (err) { MA.log(err); }
        $proxLayer.removeData('proxObject');
    }
    
    //also clear data and kml layers
    if ($proxLayer.data('dataLayer')) {
        $proxLayer.data('dataLayer').setMap(null);
    }
    if ($proxLayer.data('kmlLayer')) {
        $proxLayer.data('kmlLayer').hideDocument();
    }
    
    //Add a unique plotted query ID to the attributes when the query is plotted             
    //this links to the listview table that can be viewed.
    
    var qid;
    if($proxLayer.data('qid') == null) {
        qid = Date.now().getTime() + 'prox'; 
        $proxLayer.data('qid', qid);                
        $proxLayer.attr('qid', qid);
    }
    else {
        qid = $proxLayer.attr('qid', qid);
    }
    
    
    //create a new layer based on the selected options
    var fillColor = $proxLayer.find('.color-wrapper .fillcolor').val();
    var borderColor = $proxLayer.find('.color-wrapper .bordercolor').val();
    switch ($proxLayer.find('.proximitytype').val())
    {
        case 'Circle':
            try
            {
                //this function will be called below after we have determined the lat/long
                function renderCircle(lat, long, address)
                {
                    try
                    {
                        //create a prox circle and add it to the map
                        $proxLayer.data('proxObject', new google.maps.Circle({
                            map: MA.map,
                            center: new google.maps.LatLng(lat, long),
                            radius: $proxLayer.find('.options-circle-radius').val() * unitFactors[$proxLayer.find('.options-circle-unit').val()]['METERS'],
                            layerType: 'prox',
                            strokeColor: borderColor,
                            strokeWeight: 3,
                            strokeOpacity: 1,
                            fillColor: fillColor,
                            fillOpacity: $proxLayer.find(".prox-slider").slider( "value" )/100,
                            qid : qid
                        }));
                        
                        //handle clicking on the circle
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'click', function (e) {
                            proximityLayer_Click({ position: e.latLng, type: 'circle', shape: $proxLayer.data('proxObject') });
                        });
                        google.maps.event.addListener($proxLayer.data('proxObject'), 'rightclick', function (e) {
                            Shape_Context.call(this, e);
                        });

                        //update the address field with the returned address
                        $proxLayer.find('.options-circle-address').val(address);
                        
                        ChangeVisibilityWhenCircleIsAdded();
                    }
                    catch (err) { $proxLayer.find('.loadmask').remove(); }
                }
                
                //remove previous geocode messages
                $proxLayer.find('.options-circle-address').removeClass('BadGeocodeForWaypoint');
                
                //check if we have a lat/long or if we need to geocode
                var regExp = /^Lat: ([^\n]*)\nLong: ([^\n]*)$/;
                if (regExp.test($proxLayer.find('.options-circle-address').val()))
                {
                    //we have a lat/long so parse and use it
                    var matches = regExp.exec($proxLayer.find('.options-circle-address').val());
                    renderCircle(parseFloat(matches[1]), parseFloat(matches[2]), $proxLayer.find('.options-circle-address').val());
                    $proxLayer.find('.loadmask').remove();
                }
                else
                {
                    //geocode this address
                    geocode({
                        address: $proxLayer.find('.options-circle-address').val(),
                        complete: function (response) 
                        {
                            if (response.success)
                            {
                                renderCircle(parseFloat(response.results.Latitude), parseFloat(response.results.Longitude), response.results.FormattedAddress);
                            }
                            else
                            {
                                MALog('fail: ');
                                $proxLayer.find('.options-circle-address').addClass('BadGeocodeForWaypoint');
                            }
                            
                            $proxLayer.find('.loadmask').remove();
                        }
                    });
                }
            }
            catch (err) { $proxLayer.find('.loadmask').remove(); }
                
            break;
        case 'Polygon':
            //make sure we have a polygon
            if ($proxLayer.data('proxObject'))
            {
                //update the color of this polygon
                $proxLayer.data('proxObject').setOptions({
                    strokeColor: $proxLayer.find('.color.bordercolor').val(),
                    fillColor: $proxLayer.find('.color.fillcolor').val(),
                    fillOpacity : $proxLayer.find(".prox-slider").slider( "value" )/100
                });
            }
            else
            {
                //show a message on how to create a prox polygon
                $proxLayer.find('.options-polygon').text('There is no polygon associated with this layer. In order to create a polygon layer, please use the drawing toolbar on the map.');
            }
            $proxLayer.find('.loadmask').remove();
            
            break;
        case 'KML':
        
            //clear existing messages
            $proxLayer.find('.options-kml-info').text('');
            
            //send a request to get the kml data as a layer and add it to the map
            var kmlLayer = new geoXML3.parser({
                map: MA.map,
                processStyles: true,
                singleInfoWindow: true,
                afterParse: function () {
                    ChangeVisibilityWhenCircleIsAdded();
                    $proxLayer.find('.loadmask').remove();
                },
                failedParse: function () {
                    MA.log('Unable to parse: ' + MA.resources.XMLDoc+'?docId='+$proxLayer.find('.options-kml-document').val());
                    $proxLayer.find('.loadmask').remove();
                }
            });
            kmlLayer.parse([MA.resources.XMLDoc+'?docId='+$proxLayer.find('.options-kml-document').val()]);

            //keep track of this layer so we can remove it later
            $proxLayer.data('kmlLayer', kmlLayer);
            
            break;
        default:
            $proxLayer.data('proxObject', null);
            break;
    }
}
function unrenderProximityLayer($proxLayer)
{   
    
    
    try { $proxLayer.data('dataLayer').setMap(null); } catch (err) {}
    try { $proxLayer.data('kmlLayer').hideDocument(); } catch (err) {}
    try { $proxLayer.data('proxObject').setMap(null); } catch (err) {}
    try { $.each($proxLayer.data('proxObjects'), function (i, proxObject) { proxObject.setMap(null); }); } catch (err) {}
    try 
    { 
        if ($proxLayer.data('labelmarkers')) 
        {
            var markers = $proxLayer.data('labelmarkers');
            
            for (var i = 0; i < markers.length; i++)
            {
                markers[i].setMap(null);
            } 
        }
    }
    catch (err) {}
    $proxLayer.removeData();
    MA.Map.InfoBubble.hide();

    if($proxLayer.find('.affectvisibility').is(':checked')) {
        ChangeVisibilityWhenCircleIsAdded({force: true });
    }
    MAShapeLayer.UpdateNeedMarkerBoundingEvents();
}
function removeProximityLayer($proxLayer, options)
{
    //default options
    options = $.extend({
        complete: function () {}
    }, options || {});

    //remove label if present
    if($proxLayer.data('marker')) {
        var marker = $proxLayer.data('marker');
        marker.setMap(null);
    }

    //unrender the prox layer
    unrenderProximityLayer($proxLayer);
    
    //remove the prox layer from the layers section
    $proxLayer.slideUp(300, function () 
    { 
        $proxLayer.remove(); 
        
        //Show water-mark
        if($('#PlottedQueriesTable').children().length == 0) {
            $('#PlottedQueriesWrapper .plotted-watermark').slideDown(200);
        }
        
        //done
        options.complete();
    });
}
function proximityLayer_Click(options)
{
    var shapeMgr = new MA.Map.ShapeManager().addLayer(options.feature || options.shape);

    //loop over all visible records and determine which markers are in this layer
    var markers = [];
    var records = [];
    $('#PlottedQueriesContainer .PlottedRowUnit').each(function () {
        if(!$(this).hasClass('DataLayer')) {
            $.each($(this).data('records'), function (recordId, record) {
                if (record.isVisible || record.isClustered || record.isScattered) {
                    if (shapeMgr.containsLatLng(record.marker.getPosition())) {
                        markers.push(record.marker);
                        records.push(record);
                    }
                }
            });
        }
    });
    
    //generate tooltip content
    var $tooltipContent = $('#templates .standard-cluster-tooltip').clone();
    
    //remove the buttons (those only apply to cluster tooltips)
    $tooltipContent.find('.standard-cluster-buttons-wrapper').remove();
    
    //add a label for this prox layer if we have one
    if (options.feature && (options.feature.maData.uniquelabel || options.feature.maData.dataLayer.style.proxType)) {

        var title = (options.feature.maData.dataLayer.style.proxType || '') + (options.feature.maData.uniquelabel && options.feature.maData.dataLayer.style.proxType ? ': ' : '') + options.feature.maData.uniquelabel;
        $tooltipContent.find('.standard-cluster-header').html('<div style="color:#757575;font-size:10px;line-height:10px;">'+title+'</div><div>'+ markers.length +' Record(s)</div>');
    }
    else {
        $tooltipContent.find('.standard-cluster-header').html(markers.length + ' Record(s)');
    }

    //is the qid in the feature or the shape?       
    //more listview stuff here      
    var qid = '';               
    if(options.shape !== undefined) {               
        qid = options.shape.qid;                
    } else if (options.feature !== undefined) {             
        qid = options.feature.qid;              
    }               
                    
    //add both the qid and the records to the tooltip               
    $tooltipContent.attr('qid', qid);               
    $tooltipContent.data('qid', qid);               
    $tooltipContent.data('records', records);               
    $tooltipContent.data('tooltips', []);               
    $tooltipContent.data('title', options.type);                
                    
    if(options.shape !== undefined) {               
        $('.layer[qid="' + qid + '"]').data($tooltipContent.data());                
    } else if (options.feature !== undefined) {             
        $('.PlottedShapeLayer[qid="' + qid + '"]').data($tooltipContent.data());                
    }               
    $tooltipContent.find('.cluster-listview-button').html('<button>Create Selected Tab</button>').click(function () {
        MAListView.ProcessListViewButtonFromShapeLayerPopup(records);
        MA.Map.InfoBubble.hide();
    });
          
    //create info bubble
    MA.Map.InfoBubble.show({
        position: options.position,
        minWidth: 420,
        content: $tooltipContent.get(0),
        layerType: 'popup',
        popupType: 'prox'
    });
    
    //loop over the child markers and create legends for each query that is represented by this cluster
    var $contentWrapper = $tooltipContent.find('.standard-cluster-content-wrapper');
    $.each(markers, function (index, marker) {
        try {
                    
            //find or create the content section for this query
            var $plottedQuery = marker.record.plottedQuery;
            var $contentSectionHeader = $contentWrapper.find('.content-section-header[data-query="'+$plottedQuery.data('id')+'"]');
            var $contentSection = $contentWrapper.find('.content-section[data-query="'+$plottedQuery.data('id')+'"]');
            var $legend = $contentSection.find('.legend');
            var advancedOptions = $plottedQuery.data('advancedOptions') || {};
            if ($contentSection.length == 0) {
                    
                //add a section header
                $contentSectionHeader = $("<div class='content-section-header' />").attr('data-query', $plottedQuery.data('id')).text($plottedQuery.data('savedQueryName')).data('numMarkers', 0).data('numTerritoryMarkers', 0).appendTo($contentWrapper);
                        
                //create the content section for this query
                $contentSection = $("<div class='content-section'><table class='aggregates' style='width:100%;margin-bottom:10px;'></table></div>").attr({
                    'data-query': $plottedQuery.data('id')
                }).appendTo($contentWrapper);
                        
                //add a placeholder for aggregate information to this section
                var aggregateType = advancedOptions.aggregateType || 'sum';
                var aggregates = [];
                $.each($plottedQuery.data('tooltips'), function (index, tooltip) {
                    
                    //make sure this tooltip doesn't exist
                    var duplicateTooltip = false;
                    $.each(aggregates, function (i,a) {
                        if(a.field == tooltip.FieldName) {
                            duplicateTooltip = true;
                        }
                    });
                    
                    if ((tooltip.DisplayType == 'DOUBLE' || tooltip.DisplayType == 'INTEGER' || tooltip.DisplayType == 'CURRENCY') && duplicateTooltip == false) {
                        aggregates.push({
                            label           : tooltip.FieldLabel,
                            field           : tooltip.FieldName,
                            displayType     : tooltip.DisplayType,
                            aggregateType   : aggregateType,
                            value           : 0,
                            territoryValue  : 0
                        });
                    }
                });
                $contentSection.data({ aggregates: aggregates, aggregateType: aggregateType });
                        
                //create the legend for this query if needed
                if ($plottedQuery.data('markerMetadata').ColorAssignmentType == 'Dynamic, Field') {
                    $legend = $plottedQuery.find('.legend').clone().hide();
                    $legend.find('.legend-color').each(function () {
                        $(this).html(MA.Marker.createSVG({ color: $(this).attr('data-color'), forLegend: true }));
                    });
                    $legend.appendTo($contentSection);
                    $legend.find('.legend-row').data('numMarkers', 0).data('numTerritoryMarkers', 0);
                    $legend.prepend('<tr><td colspan="5" style="color: #AFAFAF;padding: 5px 0;font-weight: bold;font-style: italic;">Legend</td></tr>');
                }
            }
                    
            //update the marker count for this query
            $contentSectionHeader.data('numMarkers', $contentSectionHeader.data('numMarkers') + 1);
                    
            //update the marker count for the appropriate legend row if this marker has one
            if (marker.record.legendRow) {
                var $legendRow = $legend.find('.legend-row').eq(marker.record.legendRow.index());
                $legendRow.data('numMarkers', parseInt($legendRow.data('numMarkers')) + 1);
            }
            
            //update the value of each aggregate
            $.each($contentSection.data('aggregates'), function (index, aggregate) {
                //compare record with currency for proper conversion
                if(userSettings.currency)
                {
                    $.each(userSettings.currency, function (index,currency) {
                        //convert values to user currency settings
                        if(currency.IsoCode == marker.record.record.CurrencyIsoCode && userSettings.userCurrency != marker.record.record.CurrencyIsoCode)
                        {
                            var userConverstionRate = userSettings.userConverstionRate;
                            var conversionRate = currency.ConversionRate/userConverstionRate;
                            var value = isNaN(parseFloat(marker.record.record[aggregate.field])) ? 0 : parseFloat(marker.record.record[aggregate.field]);
                            
                            //convert value to corporate Currency
                            var convertedValue = parseFloat(value/conversionRate);
                            aggregate.value += convertedValue;
                        }
                        else if(currency.IsoCode == marker.record.record.CurrencyIsoCode)
                        {
                            aggregate.value += isNaN(parseFloat(marker.record.record[aggregate.field])) ? 0 : parseFloat(marker.record.record[aggregate.field]);
                        }
                    });
                }
                else
                {
                    aggregate.value += isNaN(parseFloat(marker.record.record[aggregate.field])) ? 0 : parseFloat(marker.record.record[aggregate.field]);
                }
            });
        }
        catch (err) {
            //this should just mean that this marker does not belong to a saved query
        }
    });
            
    //remove the components that we don't need (empty legend rows, legend checkboxes)
    $contentWrapper.find('.legend-checkbox').remove();
    $contentWrapper.find('.legend-row').each(function () {
        if ($(this).data('numMarkers') == 0) {
            $(this).addClass('remove');
        }
    });
    $contentWrapper.find('.legend-row.remove').remove();
            
    //update the marker counts for each legend row
    $contentWrapper.find('.legend-row').each(function () {
        $(this).find('.visiblemarkers').text(
            $(this).data('numMarkers')
        );
    });
            
    //style the legends a bit to keep the counts together
    $contentWrapper.find('.legend-row').find('td.visiblemarkers, td.of, td.totalmarkers').css({
        'width': '1px',
        'white-space': 'nowrap'
    }).filter('td.totalmarkers').css('padding-right', 30);
    
    //accordion the sections
    $contentWrapper.accordion({ header: '.content-section-header', heightStyle: 'content' });
            
    //add the marker counts to each section
    $contentWrapper.find('.content-section-header').each(function () {
        $('<div style="position:absolute; top: 5px; right: 5px; color: white; font-size: 10px;" />').text(
            $(this).data('numMarkers')
        ).appendTo($(this));
    });
            
    //add the aggregates to each section
    function formatAggregateValue(aggregate, numMarkers, options)
    {
        //defaults
        options = $.extend({
            forTerritory: false
        }, options || {});
        
        //get the proper value to work with
        var value = options.forTerritory ? aggregate.territoryValue : aggregate.value;
        
        //if this is an avg aggregate, divide the total by the number of markers
        if (aggregate.aggregateType == 'avg') {
            value = numMarkers == 0 ? 0 : value / numMarkers;
        }
    
        //if this is a currency field, format the value
        if (aggregate.displayType == 'CURRENCY')
        {
            var currencyType = userSettings.userCurrency != undefined ? userSettings.userCurrency : '$';
            var c = 2, d = '.', t = ',';
            var n = value, 
                c = isNaN(c = Math.abs(c)) ? 2 : c, 
                d = d == undefined ? "." : d, 
                t = t == undefined ? "," : t, 
                s = n < 0 ? "-" : "", 
                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                j = (j = i.length) > 3 ? j % 3 : 0;
            return currencyType + ' ' + s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        }
        
        //return the value
        return value;
    }
    $contentWrapper.find('.content-section').each(function () {
    
        var $section = $(this);
        if ($section.data('aggregateType') != '') {
            $.each($(this).data('aggregates'), function (index, agg) {
                var $aggRow = $('<tr><td class="label"></td><td class="value"></td></tr>');
                $aggRow.find('.label').text(agg.label);
                $aggRow.find('.value').text(
                    [
                        formatAggregateValue(agg, $section.prev().data('numMarkers')),
                        $section.prev().data('numTerritoryMarkers') == 0
                            ? ''
                            : ' ('+formatAggregateValue(agg, $section.prev().data('numTerritoryMarkers'), { forTerritory: true })+')'
                    ].join('')
                );
                $aggRow.appendTo($section.find('.aggregates'));
            });
        }
        
        //remove the aggregates table if it's blank.  put a header if it's not
        if ($section.find('.aggregates tr').length == 0) { 
            $section.find('.aggregates').remove(); 
        }
        else {
            $section.find('.aggregates').prepend('<tr><td colspan="2" style="color: #AFAFAF;padding: 5px 0;font-weight: bold;font-style: italic;">Aggregates ('+$section.data('aggregateType')+')</td></tr>');
        }
    });
            
    //add some help text for sections that have no data
    $contentWrapper.find('.content-section').each(function () {
        if ($(this).html() == '') {
            $(this).html('<div style="color:#757575;font-size:10px;font-style:italic;">Use a legend query or add numeric tooltips for additional information.</div>');
        }
    });
            
    //show the legends
    $contentWrapper.find('.legend').show();
    
    //make sure the entire popup is visible (using timeout for smooth animation)
    setTimeout(function () { MA.Map.InfoBubble.adjust(); });
}

function refreshPopups(options)
{
    options = $.extend({ removeOnly: true }, options);
    
    try {
        if (MA.Map.InfoBubble._bubble.anchor instanceof google.maps.Marker) {
            if (MA.Map.InfoBubble._bubble.anchor.getMap() == null) {
                MA.Map.InfoBubble.hide();
            }
            else if (!options.removeOnly) {
                google.maps.event.trigger(MA.Map.InfoBubble._bubble.anchor, 'click');
            }
        }
        else if ($(MA.Map.InfoBubble._bubble.content).is('.standard-cluster-tooltip')) {
            MA.Map.InfoBubble.hide();
        }
    }
    catch (err) {}
}

var unitFactors = {
    'MILES': { 'METERS': 1609.344 },
    'KM': { 'METERS': 1000 },
    'METERS': { 'METERS': 1, "MILES" : 0.000621371, "YARDS" : 1.09361, "FEET" : 3.28084, "KM" : 0.001},
    'YARDS': { 'METERS': 0.9144 },
    'FEET': { 'METERS': 0.3048 },
    'HOURS': { 'SECONDS': 3600 },
    'MINUTES': { 'SECONDS': 60 }
};

//var WayPointLI = '<li class="ui-state-default"><div class="draggable"></div><span id="RowNumber"></span><input type="text" /><a class="button1-white" onclick="RemoveAddressRow(this);" style="float:right;color:#666;margin:-2px 0 0 0;">Remove</a></li>';
var WayPointHeader = '<tr>'
                        + '<th>Order</th>'
                        + '<th class="padLeft">Name</th>'
                        + '<th class="padLeft">Address</th>'
                        + '<th class="padLeft">Notes</th>'
                        + '<th>Distance/Time</th>'
                        + '<th style=\'width: 50px; text-align: center;\'>Remove</th>'
                    + '</tr>';
var WayPointLI = '<tr index="::indexNum::" class="draggable">'
                    + '<td id="RowNumber" class="rownumber">::rowNum::</td>'
                    + '<td class="name"><div><input type="text" id="name" maxlength="80" /></div></td>'
                    + '<td class="address"><textarea rows="3" id="address" /></td>'
                    + '<td class="notes"><textarea rows="3" id="notes" /></td>'
                    + '<td id="distance" class="notes">TBD</td>'
                    + '<td class="remove"><a class="button1-white" onclick="RemoveAddressRow($(this).parent());" style="float:right;color:#666;margin:-2px 2px 0 0;">Remove</a></td>'
                + '</tr>';

function AddMarkerToTrip(pMarker, options)
{
    options = options || {};

    var record = pMarker.record;
    var recordId = record.record.Id;
    var layerType = pMarker.layerType || 'query-marker';
    var $routingTable = notPrintEmailPage ? $('#Routing-Table') : $(window.opener.document.getElementById('Routing-Table'));
    $routingTable.data('plottedQueries') == null ? $routingTable.data('plottedQueries',{}) : $routingTable.data('plottedQueries');
    var tooltipsArray = [];
    try {
        tooltipsArray = record.plottedQuery.data().tooltips;
    }
    catch (err) {}
    var tooltipsList = [];
    var $tooltips = $('<table/>');
    
    $.each(tooltipsArray, function (index, tooltip) 
    {
        var $tooltip = $('<tr class="waypoint-tooltip-row"><td class="label"></td><td class="data"></td></tr>');
        $tooltip.find('.label').text(tooltip.FieldLabel);
        $tooltip.find('.data').html(extractTooltipValue(tooltip, record));
        $tooltip.appendTo($tooltips);
        tooltipsList.push(tooltip.ActualFieldName);
    });

    //add the plottedquery info to the routing table
    if(pMarker.SavedQryId) {
        //check if this plotted query already exists
        if (!$routingTable.data('plottedQueries')[pMarker.SavedQryId]) {
            var $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading');
            $.extend(true, $plottedQuery.data(), record.plottedQuery.data());
            $routingTable.data('plottedQueries')[pMarker.SavedQryId] = $plottedQuery;
        }
    }
    
    var $row = $('#routing-templates .waypoint-row').clone().attr({ 
        Lat             : record.markerLatitude || pMarker.getPosition().lat(), 
        Long            : record.markerLongitude || pMarker.getPosition().lng(),
        Address         : record.markerAddress,
        WayPointTitle   : pMarker.title,
        savedQueryId    : record.savedQueryId || '',
        'data-id'       : recordId || ''
    });

    $('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').length > 0 ? $row.insertBefore($('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').last()) : $row.appendTo('#Routing-Table .waypoints');
    $row.find('.index').append($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, recordId + '_row').replace(/__TEXT__/g, ''));
    $row.find('.address').attr('markerposition', JSON.stringify({ latitude: pMarker.Lat, longitude: pMarker.Long }));
    $row.find('.name')
        .val(pMarker.title)
        .change()
        .prop('readonly', true)
        .attr({ 
            'data-id'       : recordId,
            'baseObject'    : record.record.attributes.type,
            'baseObjectId'  : (record.plottedQuery || $()).data('baseObjectId'),
            'tooltips'      : JSON.stringify(tooltipsList)
        })
        .addClass('DisabledWaypoint')
    ;
    $row.find('.address').val(record.markerAddress).prop('disabled', true).addClass('DisabledWaypoint').prev().text(record.markerAddress);
    if (layerType == 'query-marker') {
        $row.find('.name').addClass('clickable');
        $row.find('[data-for="name"]').attr('onclick', "window.open('/"+recordId+"')").css('cursor', 'pointer');
    }
    if ($tooltips.find('.waypoint-tooltip-row').length > 0) {
        $row.find('.tooltips').empty().append($tooltips).show();
        $row.find('.additionalinfo-header[data-for="tooltips"]').show();
    }
    $row.find('.timeoptions-waypointstart').html($('.timedefaults-routestart').html()).prepend(
        $('<option/>').attr('value', '???').text('???')
    ).val('???').change();
    $row.find('.timeoptions-waypointduration').html($('.timedefaults-appointmentduration').html()).val($('.timedefaults-appointmentduration').val()).change();
    $row.find('.notes').val('').change();
    
    //if this is an event, use it for the start time and duration
    if (record.record.Id.indexOf('00U') == 0) {
        var startTime = moment(record.record.StartDateTime);
        var endTime = moment(record.record.EndDateTime);
        var durationMinutes = endTime.diff(startTime, 'minutes');
        durationMinutes += durationMinutes % 30;
        $row.find('.timeoptions-waypointstart').val(startTime.format('h:mm a')).change();
        $row.find('.timeoptions-waypointduration').val(Math.floor(durationMinutes/60) + ' hr, ' + (durationMinutes%60) + ' min').change();
        if (!$('#tab-routes-route').is('.timebased')) {
            $('#tab-routes-route .toggle.timebased').click();
        }
    }

    //mark this as locked if requested
    if (options.lockType) {
        Waypoint_Lock($row, options.lockType);
    }
            
    OrderNumbersOnWaypoints();
    try { $('#Routing-Table').slimScroll({ scrollBy: $row.position().top }); } catch (err) {}
}
function AddFavoriteToTrip(fav, options)
{
    fav.attributes = { type: 'MALocation__c' };
    AddMarkerToTrip({
        layerType: 'favorite-marker',
        title: fav.Name,
        Lat: fav.Latitude__c,
        Long: fav.Longitude__c,
        record: {
            markerAddress: fav.Address__c,
            markerLatitude: fav.Latitude__c,
            markerLongitude: fav.Longitude__c,
            record: fav
        }
    }, options || {});
}
function AddDataLayerToTrip(datalayer, options)
{
    datalayer.attributes = { type: 'MALayer__c' };
    AddMarkerToTrip({
        layerType: 'datalayer-marker',
        title: datalayer.Name,
        Lat: fav.Latitude__c,
        Long: fav.Longitude__c,
        record: {
            markerAddress: fav.Address__c,
            markerLatitude: fav.Latitude__c,
            markerLongitude: fav.Longitude__c,
            record: fav
        }
    }, options || {});
}

function printthis(which) {
                
    var directions = document.getElementById(which).innerHTML;
    
    var newwindow = window.open("","","height=500,width=320,location=0,scrollbars=1");
    directions += '<br><a href="http://www.cloudbilt.com" target="_blank"><img style="width: 100px; border:0;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
    newwindow.document.write(directions);
    newwindow.focus();
    newwindow.print();
}
var RouteObj = {};
var RouteWaypoints = [];
function PrintEmailDirections() {
    
    try {  totango.track('Print or Email Directions', 'MapAnything'); } catch(err) { }
    
    //remove blank rows
    var needToReorder = false;
    $('#Routing-Table .waypoint-row').each(function(key, value) {
         if (($(this).attr('Lat') === undefined || !$(this).find('.address').hasClass('DisabledWaypoint')) && $(this).find('.address').val() == '') {
            $(this).remove();
            needToReorder = true;
         }
    });
    
    //renumber the waypoints if needed
    if (needToReorder) {
        OrderNumbersOnWaypoints();
    }

    //get driving params
    var routeType = notPrintEmailPage ? $('#Routing-Settings #RouteMode').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#RouteMode').val();
    
    var newwindow = window.open(MA.resources.PrintEmailRoute+pageSuffix+"?mode="+routeType+"&distance="+userSettings.RouteDefaults.unit,"","height=800,width=800,location=0,scrollbars=1");
    RouteObj = $('#Routing-Table').data('dragRoute');
    RouteWaypoints = MA.Routing.mapComponents.waypointMarkers;
    newwindow.focus();
}

function SendDirectionsEmail()
{
    var EmailAddresses = prompt("Please enter one or more email addresses separated by ;", UserEmailAddress);
    if (EmailAddresses != null && EmailAddresses != "")
    {
        //http://stackoverflow.com/questions/9382167/serializing-object-that-contains-cyclic-object-value 
        
        var htmlBody = '';
        if(notPrintEmailPage)
        {
            htmlBody = $('#DirectionsOutput').clone().wrap('<div/>').parent().html();
        }
        else
        {
            var directionsHTML = '';
            var directionsClone = $('#directions').clone();
            directionsClone.find('img').remove();
            
            //remove the maneuvers if needed
            if(!$('#showDirectionsCheckbox').prop('checked'))
            {
                directionsClone.find('.directions-row').remove();
            }
            
            //remove the custom fields if needed
            if(!$('#showFieldsCheckbox').prop('checked')) { $(directionsClone).find('.waypointTooltips').text(''); }
            
            //build html body
            directionsHTML += $(directionsClone).html() + '<br /><br />';
            htmlBody = '<br /><br />' + $('#overview').html() + '<br /><br />' + directionsHTML 
                        + '<a href="http://www.cloudbilt.com" target="_blank"><img id="logo" style="width: 100px; border:0; margin-left: -25px;" src="http://cloudbilt.com/wp-content/uploads/Cloudbilt_logo_small-192x39.jpg" title="Cloudbilt" alt="Cloudbilt"/></a>';
        }
        
        var MyJSObject = {
                action: 'email_directions',
                replyTo: UserEmailAddress,
                subject: 'Map Anything Directions',
                toAddresses: EmailAddresses.split(";"),
                htmlBody: htmlBody              
        };
        
        $.ajax({
            url: MA.resources.Email,
            type: 'POST',
            dataType: 'JSON',
            data: { MyJSObject: JSON.stringify(MyJSObject) },
            complete: function (response)
            {
                var obj = $.parseJSON(response.responseText);                      
                
                if(obj.success)
                {
                    showSuccess($('#mapdiv').parent(), 'Your directions have been sent');
                }
                else
                {
                    NotifyError("Error Sending Directions Email",obj.error);
                    Debug("Error Sending Directions Email " + obj.error);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) { 
                Debug("<b>Error Sending Directions Email</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
                NotifyError("Error Sending Directions Email",textStatus + " : " + errorThrown); 
            }
        }); 
    }
}

function SetDefaultMapLocation()
{   
    $.getJSON(MA.resources.User,"action=set_default_map_location&id=" + UserId + "&zoomlvl=" + MA.map.getZoom() + "&lat=" + MA.map.getCenter().lat() + "&long=" + MA.map.getCenter().lng() + "&type="+$('.MapViewTitle.Active').closest('td').attr('data-basemaptype'),function(json)
    { 
        if(json.success) {
            $.extend(userSettings.defaultMapSettings, {
                latitude    : MA.map.getCenter().lat(),
                longitude   : MA.map.getCenter().lng(),
                zoomLevel   : MA.map.getZoom(),
                mapType     : MA.map.getMapTypeId()
            });
            growlSuccess($('#growl-wrapper'), 'Default View Saved');
        }
        else {
            NotifyError("Error Updating Default Location",json.error);
            Debug("Error Updating Default Location " + json.error);
        }
    })
    .error(function(jqXHR, textStatus, errorThrown) {        
        Debug("<b>Error Updating Default Location</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
        NotifyError("Error Updating Default Location",textStatus + " : " + errorThrown); 
    });
}       
        
function StorePreferredMeasurementType()
{
    if (OnUserLoadEventCompletd)
    {
        $.getJSON(MA.resources.User,"action=store_pref_measure_type&id=" + UserId + "&preftype=" + document.getElementById("ProximityRadiusMeasurementType").value + "&proxrad=" + document.getElementById("ProximityRadius").value,function(json)
        { 
            if(json.success)
            {
                Debug("Updated Preferred Unit of Measurement " + json.id);
            }
            else
            {
                NotifyError("Error Updating Preferred Unit of Measurement:",json.error);
                Debug("Error Updating Preferred Unit of Measurement: " + json.error);
            }
        })
        .error(function(jqXHR, textStatus, errorThrown) {        
            Debug("<b>Error Updating Preferred Unit of Measurement</b></br>&nbsp;&nbsp;Status: " + textStatus + "</br>&nbsp;&nbsp;Error: " + errorThrown);
            NotifyError("Error Updating Preferred Unit of Measurement",textStatus + " : " + errorThrown); 
        });
    }
}

function NotifyError(pTitle,pMessage)
{
    if ($.fn.notify) {
        $("#container").show().notify("create", 
            {
                title: pTitle,
                text: pMessage
            },
            {
                expires: false,
                speed: 100
            }
        );
    }
    else {
        MA.log(pTitle + ': ' + pMessage);
    }
}

function NotifyWarrning(pTitle,pMessage)
{
    if ($.fn.notify) {
        $("#container").show().notify("create", "Warning-Template", 
            {
                title: pTitle,
                text: pMessage
            },
            {
                expires: 5000,
                speed: 1000
            }
        );
    }
    else {
        MA.log(pTitle + ': ' + pMessage);
    }
}

function NotifySuccess(pTitle,pMessage)
{
    if ($.fn.notify) {
        $("#container").show().notify("create", "Success-Template", 
            {
                title: pTitle,
                text: pMessage
            },
            {
                expires: 5000,
                speed: 1000
            }
        );
    }
    else {
        MA.log(pTitle + ': ' + pMessage);
    }
}

function GetAddressFieldResults(record, FieldName)
{
    var rValue = "";
    
    if (FieldName != null)
    {
        //Debug("GetAddressFieldResults - FieldName: " + FieldName);
        //Debug("GetAddressFieldResults - record: " + record);
        
        if (FieldName.indexOf(".") > -1)
        {
            if (record[FieldName.split(".")[0]] != null)
            {
                rValue = (record[FieldName.split(".")[0]][FieldName.split(".")[1]]) ? record[FieldName.split(".")[0]][FieldName.split(".")[1]] : "";
            }
        }
        else
        {
            rValue  = (record[FieldName]) ? record[FieldName] : "";
        }
    }
    
    return rValue;  
}

function GetFieldLabel(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.label;
        }
    }
    return "";
}

function GetFieldType(prdescribeSObj, FieldName)
{
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.type;
        }
    }
    return "";
}

function GetFieldReferenceTo(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.relationshipName == FieldName)
        {
            return field.referenceTo;
        }
    }
    return "";
}

function GetRelationshipName(prdescribeSObj, FieldName)
{
    if (FieldName.indexOf(".") > -1)
    {
        FieldName = FieldName.split(".")[0];
    }
    
    for (var i=0; i < prdescribeSObj.fields.length; i++) 
    {
        var field = prdescribeSObj.fields[i];
        if (field.name == FieldName)
        {
            return field.relationshipName;
        }
    }
    return "";
}

function unique(arrayName)
{
    //Return Unique Array
    var ReturnArray = new Array();
    $.each(arrayName, 
        function(index, value) 
        { 
            if ($.inArray(value, ReturnArray) < 0)
            {
                ReturnArray.push(value);
            } 
        }
    );
    
    return ReturnArray;
}
        
////////////////////  Format Tooltip Types  /////////////////////////////////////
var sforce = sforce || { internal: {}, connection: {} };
if(!sforce.internal) {
    sforce.internal = {};
}
if(!sforce.connection) {
    sforce.connection = {};
}
sforce.internal.stringToDateTime = function(source) {
    var bc = false;
    if (source === null || source.length === 0) {
        throw "Unable to parse dateTime1";
    }

    if (source.charAt(0) == '+') {
        source = source.substring(1);
    }
    if (source.charAt(0) == '-') {
        source = source.substring(1);
        bc = true;
    }

    if (source.length < 19) {
        throw ("Unable to parse dateTime2");
    }

    if (source.charAt(4) != '-' || source.charAt(7) != '-' ||
        source.charAt(10) != 'T') {
        throw ("Unable to parse dateTime3");
    }

    if (source.charAt(13) != ':' || source.charAt(16) != ':') {
        throw ("Unable to parse dateTime4");
    }

    var year = source.substring(0, 4);
    var month = source.substring(5, 7);
    var day = source.substring(8, 10);
    var hour = source.substring(11, 13);
    var min = source.substring(14, 16);
    var sec = source.substring(17, 19);

    var date = new Date(year, month-1, day, hour, min, sec);

    var pos = 19;

    // parse optional milliseconds
    if (pos < source.length && source.charAt(pos) == '.') {
        var milliseconds = 0;
        var start = ++pos;
        while (pos < source.length && sforce.internal.isDigit(source.charAt(pos))) {
            pos++;
        }
        var decimal = source.substring(start, pos);
        if (decimal.length == 3) {
            milliseconds = decimal;
        } else if (decimal.length < 3) {
            milliseconds = (decimal + "000").substring(0, 3);
        } else {
            milliseconds = decimal.substring(0, 3);
            if (decimal.charAt(3) >= '5') {
                ++milliseconds;
            }
        }

        date.setMilliseconds(milliseconds);
    }

    var offset = date.getTimezoneOffset() * 60000;
    //offset in milli;

    // parse optional timezone
    if (pos + 4 < source.length &&
    (source.charAt(pos) == '+' || (source.charAt(pos) == '-'))) {
        
        var hours = (source.charAt(pos + 1) - '0') * 10 + source.charAt(pos + 2) - '0';
        var mins = 0;
        if(source.charAt(pos + 3) == ':' )
        {
            mins = (source.charAt(pos + 4) - '0') * 10 + source.charAt(pos + 5) - '0';
            pos += 6;
        }       
        else
        {
            mins = (source.charAt(pos + 3) - '0') * 10 + source.charAt(pos + 4) - '0';
            pos += 5;
        }
        var mseconds = (hours * 60 + mins) * 60 * 1000;

        // subtract milliseconds from current date to obtain GMT
        if (source.charAt(pos) == '+') {
            mseconds = -mseconds;
        }

        date = new Date(date.getTime() - offset + mseconds);        
    }

    if (pos < source.length && source.charAt(pos) == 'Z') {
        pos++;
        date = new Date(date.getTime() - offset);
    }

    if (pos < source.length) {
        throw ("Unable to parse dateTime " + pos + " " + source.length);
    }

    return date;
};

function FormatsObjectValue(v, type, RefId, options)
{
    options = options || {};

    if(v == null) v = "";
    if(v != "")
    {
        type = type.toLowerCase();
        if(type == "boolean")
        {
            //this might be boolean or it might be a string
            if (typeof v == 'string') {
                v = v.toUpperCase();
            }
            else {
                v = (!v) ? "FALSE" : "TRUE";
            }
        }
        else if(type == "double")
        {
            v = isNaN(v) || v === '' || v === null ? 0 : v;
            var a = parseFloat(v).toString().split(".");
            //var a = parseFloat(v).toFixed(2).toString().split(".");
            var b = a[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                        
            if(parseFloat(a[1]) > 0)
            {
                v = (b + "." + a[1]); 
            }
            else
            {
                v = b; 
            }           
        }
        else if (type == 'location')
        {
            //create string from object
            v = 'latitude: ' + v.latitude + ', <br>longitude: ' + v.longitude;             
        }
        else if(type == "currency")
        {
            v = isNaN(v) || v === '' || v === null ? 0.00 : v;
            var userCurrency = '';
            
            //show user currency in parentheses
            if(options.conversionRate) {
                userCurrency = v/options.conversionRate;
                var c = parseFloat(userCurrency).toFixed(2).toString().split(".");
                var d = c[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
                
                userCurrency = ' (' + userSettings.userCurrency + ' ' + d + "." + c[1] + ')';
            }
            
            //var n = v < 0 ? true : false;
            var parts = parseFloat(v).toFixed(options.precision || 2).toString().split(".");
            var integerPartWithCommas = parts[0].split("").reverse().join("").replace(/.{3,3}/g, "$&,").replace(/\,$/, "").split("").reverse().join("");
            
            v = (options.currency + " " + integerPartWithCommas + "." + parts[1] + userCurrency);
        }
        else if(type == "date")
        {
            try {
                var formatedDate = formatUserLocaleDate({datepicker: true}).replace('mm','MM').replace('dd','DD').replace('yy','YYYY');
                v = moment(v).format(formatedDate);
            }
            catch (e)
            {
                v = sforce.internal.stringToDate(v).toLocaleDateString();
            }
        }
        else if(type == "datetime")
        {
            try {
                //format date to display correct user locale
                var formatedDate = formatUserLocaleDate({moment: true});
                v = moment(v).format(formatedDate);
            }
            catch (e)
            {
                //should not get in here but just in case (no user locale set)
                v = sforce.internal.stringToDateTime(v);
                v = v.toLocaleDateString() + " " + v.toLocaleTimeString().replace(/([^:]*):([^:]*):00(.*)/, '$1:$2$3'); //remove the seconds portion of the datetime
            }
        }
        else if (type == "percent")
        {
            v = (v != "") ? v + "%" : "";
        }
        else if (type == "url")
        {
            if (v.indexOf("http://") > -1 || v.indexOf("https://") > -1)
            {
                v = '<a href="' + v + '" target=_blank>' + v + "</a>";
            }
            else
            {
                v = '<a href="http://' + v + '" target=_blank>' + v + "</a>";
            }
        }
        else if(type == "reference")
        {
            v = '<a href="/' + RefId + '" target=_blank>' + v + "</a>";
        }
        else if (type == "textarea")
        {
            v = v.replace(/\n/g, '<br />');
        }
        /*
        else
        {
            v = type;
        }
        */
    }
    
    return v;
}

function launchQueryEditor(url)
{
    //scroll to top
    $("html, body").animate({ scrollTop: 0 }, "slow");
    
    //launch editor
    var $dialog = $('#queryeditor-modal');
    $dialog.find('.query-editor-modal-loader').show();
    $dialog.find('.query-editor-modal-content').hide().html('').load(url, function () {
        $dialog.dialog('widget').fadeOut(200, function () {
            $dialog.find('.query-editor-modal-loader').hide(); 
            $dialog.find('.query-editor-modal-content').show();
            $dialog.dialog('widget').fadeIn(200);
            $('#queryeditor-modal').dialog('widget').css({
                left: ($(window).width()/2) - 400,//($('#queryeditor-modal').width()/2),
                top: '30px'
            });
        });
    });
    $dialog.dialog({resizable: false, closeOnEscape: false}).css('min-height', '0').dialog('widget').css({
        'width': 'auto',
        'top': '30px'
    });

    //add the fade layer
    /*$('body').append('<div id="fade"></div>');
    $('#fade').css({
        'filter' : 'alpha(opacity=80)', 
        'z-index': '1000'
    }).fadeIn();*/
    
    //backdrop v2
    MA.Popup.showBackdrop();
}

function CreatePopupWindow(popID,popWidth,noBackground)
{
    //Fade in the Popup and add close button
    $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) });
    
    //Define margin for center alignment (vertical + horizontal) - we add 80 to the height/width to accomodate for the padding + border width defined in the css
    //var popMargTop = ($('#' + popID).height() + 100) / 2;
    var popMargTop = 50;
    var popMargLeft = ($('#' + popID).width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#' + popID).css({ 
        'top' : popMargTop,
        'margin-left' : -popMargLeft
    });
    
    //Fade in Background
    /*if (typeof noBackground == 'undefined') {
        $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
        $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer
    }*/
    
    //backdrop v2
    MA.Popup.showBackdrop();
}

function LaunchAlert (options) {
    /*
    options = {
        title : 'your title',
        subTitle : 'appear under title',
        template : 'html or text for main body',
        button : {
            color : 'button-blue',
            text : 'Save',
            function : 'doSomething() || $('.select')...
        }
    }
    */
    //grab the popup
    var $popup = $('#AlertPopup');

    //clear the popup
    $popup.find('.popup-head .popup-title').text('');
    $popup.find('.popup-head .popup-sub-title').text('');
    $popup.find('.popup-body').html('');

    //add the new values
    $popup.find('.popup-head .popup-title').text(options.title || 'Attention');
    $popup.find('.popup-head .popup-sub-title').text(options.subTitle || '');
    $popup.find('.popup-body').html(options.template || '');

    //show the popup
    $popup.addClass('active');
}

function LaunchPopupWindow($popup, width, skipAppend)
{
    //scroll to top
    $('body').animate({ scrollTop: 0 }, "slow");
    
    //add the popup
    if (skipAppend) {   //quick fix for broken comboboxes due to dom manipulation
        $popup.fadeIn().css({
            width: width + 'px',
            position: 'absolute',
            top: '15px',
            left: Math.floor(($('body').width() - width) / 2) + 'px'
        });
    }
    else {
        $popup.appendTo('body').fadeIn().css({
            width: width + 'px',
            position: 'absolute',
            top: '15px',
            left: Math.floor(($('body').width() - width) / 2) + 'px'
        });
    }
    
    //add the fade layer
    //$('body').append('<div id="fade"></div>');
    //$('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn();
    MA.Popup.showBackdrop();
    $popup.trigger('blah');
    
    //backdrop v2
    

    //try to focus on input
    setTimeout(function(){
        $popup.find('input[type=text]').eq(0).focus();
    });
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ClosePopupWindow()
{
    $('#fade , .popup_block').fadeOut(function() {
            $('#fade, a.close').remove();  
    }); //fade them both out
    
    //backdrop v2
    MA.Popup.hideBackdrop();
    
}

function CreateFavoriteFolder(options)
{
    options = options || {};

    if(options.node || $('#FavTree').jstree('get_selected').attr('rel') == 'root' || $('#FavTree').jstree('get_selected').attr('rel') == 'folder')
    {
        //show the create folder form
        showForm($('#FavoriteLocationsPopup .loadmask-wrapper'), $('#FavoriteLocations_CreateFolder').clone().wrap('<div/>').parent().html());
        
        //get the selected node
        var selectedNode = options.node || $('#FavTree').jstree('get_selected');
        $('#FavoriteLocations_CreateFolder .new-folder-location')
            .text(selectedNode.find('a:first').text())
            .data('node', selectedNode);
    }
    else
    {
        alert('You must select a folder before continuing.');
    }
}

function CreateFavoriteLocation(options)
{
    
    var options = options || {};

    if(options.node || $('#FavTree').jstree('get_selected').attr('rel') == 'root' || $('#FavTree').jstree('get_selected').attr('rel') == 'folder')
    {
        //show the create location form
        showForm($('#FavoriteLocationsPopup .loadmask-wrapper'), $('#FavoriteLocations_CreateLocation').clone().wrap('<div/>').parent().html());
        
        //get the selected node
        var selectedNode = options.node || $('#FavTree').jstree('get_selected');
        $('#FavoriteLocations_CreateLocation .fav-folder-location')
            .text(selectedNode.find('a:first').text())
            .data('node', selectedNode);
        
        //handle selecting a different marker type
        $('#FavoriteLocations_CreateLocation .fav-markertype-selector').on('click', '.fav-markertype-selector img', function () {
                             
            //only show the markertype selector that matches the selected type
            if ($(this).is('.fav-markertype-selector-color')) {
                $(this).closest('.fav-markertype-wrapper').find('.fav-markertype-image').hide();
                $(this).closest('.fav-markertype-wrapper').find('.fav-markertype-color').show();
            }
            else {
                $(this).closest('.fav-markertype-wrapper').find('.fav-markertype-color').hide();
                $(this).closest('.fav-markertype-wrapper').find('.fav-markertype-image').show();
            }
                                
        });
        
        //init colorpickers
        jscolor.init();
        
        //empty marker options on load for populate
        $('#FavoriteLocations_CreateLocation').find('select.fav-markertype-image').empty();
        
        //populate marker image options
        $.ajax({
            url: MA.resources.FavoriteLocations+"?securityToken="+securityToken+"&action=getImageOptions&core.apexpages.devmode.url=0",
            type: 'POST',
            dataType: 'JSON',
            success: function (response)
            {
                var $markerImageFields = $('#FavoriteLocations_CreateLocation select.fav-markertype-image');
                $.each(response.data, function (index, option) {
                    $('<option></option>').attr('value', option.itemValue).text(option.itemLabel).appendTo($markerImageFields);
                });
                $markerImageFields.removeAttr('disabled');
            }
        });
    }
    else
    {
        alert('A folder must be selected before continuing.');
    }
}

function MoveFavoriteFolder()
{
    showForm($('#FavoriteLocationsPopup .loadmask-wrapper'), $('#FavoriteLocations_MoveFolder').clone().wrap('<div/>').parent().html());
    //move favorite folder tree
    $(".movefavtree").jstree({
        "json_data" : {
            "data" : [
                { 
                    attr : { "data-id" : "myLocations" }, 
                    data : "My Locations",
                    state : 'closed'
                },
                { 
                    attr : { "data-id" : "company" }, 
                    data : 'Company',
                    state : 'closed' 
                }
            ],
            "ajax" : {
                url : MA.resources.FavoriteLocations,
                data: function (nodeAboutToOpen) {
                    return {
                        action: 'getFolderContent',
                        securityToken: securityToken,
                        folderId: nodeAboutToOpen.attr('data-id')
                    };
                },
                success: function (response) {
                            var nodes = [];
                            $.each(response.data.folders, function (index, folder) {
                                nodes.push({
                                    data: folder.Name, 
                                    attr: 
                                        { 
                                            "data-id" : folder.Id,
                                            'rel': 'root'
                                        }, 
                                    state: "closed"
                                });
                            });
                            return nodes;   
                        }
                    }
                },
        "plugins" : [ "themes", "json_data" ,"ui", "types" ]
    });
}

function DisplayPropertiesOfObject(obj,LevelsDeep)
{
    for(var key in obj)
    {
        Debug(GenDash(LevelsDeep) + '<b>' + key + '</b>: ' + obj[key]);
        
        if (typeof(obj[key]) == "object")
        {
            //DisplayPropertiesOfObject(obj[key],LevelsDeep+1);
        } 
    }
}
        
function GenDash(LevelsDeep)
{
    if (LevelsDeep == 0)
        return '';
    else if (LevelsDeep == 1)
        return "-";
    else if (LevelsDeep == 2)
        return "--";
    else if (LevelsDeep == 3)
        return "---";
    else if (LevelsDeep == 4)
        return "----";
    else if (LevelsDeep == 5)
        return "-----";
    else if (LevelsDeep == 6)
        return "------";
    else if (LevelsDeep == 7)
        return "-------";
    else
        return "--------";
}

function Debug(str)
{
    $('#DebugOut').append("<br/>" + str);
}

function ClearDebugWindow()
{
    $('#DebugOut').html("<b>Log Cleared</b>");
}

function ShowSavedQryPopup()
{

    $('#tabs-SavedQry').tabs({remote:true}); 
    jscolor.init();
    
    $('#LoadingPopup').fadeOut();
    
    $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
    $('#fade').css({'filter' : 'alpha(opacity=80)'}); //Fade in the fade layer 
    MA.Popup.showBackdrop();
    
    $('#SavedQueryPopup').fadeIn().css({ 'width': Number( 700 ) });
    

    var popMargLeft = ($('#SavedQueryPopup').width() + 80) / 2;
    
    //Apply Margin to Popup
    $('#SavedQueryPopup').css({ 
        'margin-left' : -popMargLeft,
        'max-height': '550px'
    });
    
    //$('#SavedQueryPopup').css("top", (($(window).height() - $('#SavedQueryPopup').outerHeight()) / 2) + $(window).scrollTop() + "px");
    $('#SavedQueryPopup').css("top", "150px");
}

function OpenMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":hidden"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function CloseMenuIfOpen(MenuId)
{
    if($('#' + MenuId).is(":visible"))
    {
        //Menu is Visible, Hide Menu
        $('#' + MenuId).slideToggle('normal', function() {
            // Animation complete.
        });
    }
}

function DisplayMapViewPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapToolsPopup');

    $('#MapViewPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function DisplayMapToolsPopup()
{
    CloseMenuIfOpen('ProximityPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#MapToolsPopup').slideToggle('normal', function() {
        // Animation complete.
    });  
}

function DisplayProximityPopup()
{
    CloseMenuIfOpen('MapToolsPopup');
    CloseMenuIfOpen('MapViewPopup');
    
    $('#ProximityPopup').slideToggle('normal', function() {
        // Animation complete.
    });
}

function PreparePickListEntry(str)
{
    return str.replace(/\s/g,"");
}

function ChangeDivStatus(DivId,str)
{
    document.getElementById(DivId).innerHTML = str;
}

function ShowLoadingDialog()
{
    Debug("ShowLoadingDialog");
}

function HideLoadingDialog()
{
    $('#modalPage123').hide();
}

function ZoomToFit(options)
{
    options = $.extend({
        queries: [],
        dataLayers : []
    }, options);

    //loop through the plotted queries to see if they are all heat maps
    var allHeatMaps = true;
    $('#PlottedQueriesContainer .PlottedRowUnit .renderButtons-button.on').each(function () {
        if ($(this).attr('data-renderAs') != 'Heatmap') {
            allHeatMaps = false;
            return false;
        }
    });
    if(options.dataLayers.length > 0) {
        allHeatMaps = false;
    }
    
    //if we only have heat maps, zoom out to country level
    if ($('#PlottedQueriesContainer .PlottedRowUnit').length > 0 && allHeatMaps) {
        MA.map.setZoom(5);
    }
    else {
        try {
            var bounds = new google.maps.LatLngBounds();
            if (options.queries.length > 0) {
                $.each(options.queries, function (index, $query) {
                    $.each($query.data('records'), function (index, record) {
                        if (record.marker && (record.isVisible || record.isClustered || record.isScattered)) {
                            bounds.extend(record.marker.getPosition());
                        }
                    });
                });
            }
            else if(options.dataLayers.length > 0) {
                $.each(options.dataLayers, function (index, $dLayer) {
                    $.each($dLayer.data('markers'), function (index, marker) {
                        bounds.extend(marker.getPosition());
                    });
                });
            }
            else
            {
                //queries
                $('#PlottedQueriesContainer .PlottedRowUnit').each(function () 
                {
                    if($(this).hasClass('DataLayer')) {
                        $.each($(this).data('markers'), function (index, marker) {
                            bounds.extend(marker.getPosition());
                        });
                    }
                    else {
                        //records
                        $.each($(this).data('records'), function (index, record) {
                            if (record.marker && (record.isVisible || record.isClustered || record.isScattered)) {
                                bounds.extend(record.marker.getPosition());
                            }
                        });
    
                        //distance limit circle
                        if($(this).data('distanceLimitCircle')) {
                            bounds.union($(this).data('distanceLimitCircle').getBounds());
                        }
                    }
                });
                
                
                
                //boundary layers
                $('#PlottedQueriesContainer .proximity.layer').each(function () {
                    $.each($(this).data('proxObjects') || [], function (index, proxObj) {
                        if (proxObj instanceof google.maps.Polygon) {
                            proxObj.getPath().forEach(function (latlng, i) {
                                bounds.extend(latlng);
                            });
                        }
                        else {
                            bounds.union(proxObj.getBounds());
                        }
                    });
                    if ($(this).data('proxObject')) {
                        if ($(this).data('proxObject') instanceof google.maps.Polygon) {
                            $(this).data('proxObject').getPath().forEach(function (latlng, i) {
                                bounds.extend(latlng);
                            });
                        }
                        else {
                            bounds.union($(this).data('proxObject').getBounds());
                        }
                    }
                });

                //shape layers
                function processPoints(geometry, callback, thisArg) {
                    if (geometry instanceof google.maps.LatLng) {
                        callback.call(thisArg, geometry);
                    }
                    else if (geometry instanceof google.maps.Data.Point) {
                        callback.call(thisArg, geometry.get());
                    } 
                    else {
                        geometry.getArray().forEach(function(g) { processPoints(g, callback, thisArg); });
                    }
                }
                $('#PlottedQueriesContainer .PlottedShapeLayer').each(function () {
                    var $plottedLayer = $(this);
                    if($plottedLayer.data('proxObjects').length > 0) {
                        //this should be a normal shape.
                        try {
                            var shapes = $plottedLayer.data('proxObjects') || [];
                            for(var s = 0; s < shapes.length; s++) {
                                var shape = shapes[s];
                                
                                if (shape instanceof google.maps.Polygon) {
                                    shape.getPath().forEach(function (latlng, i) {
                                        bounds.extend(latlng);
                                    });
                                }
                                else {
                                    bounds.union(shape.getBounds());
                                }
                            }
                        }
                        catch (err) { MA.log('Unable to include data layer in zoom to fit calculation', err); }
                    }
                    else {
                        try {
                            $(this).data('dataLayer').forEach(function (feature) {
                                processPoints(feature.getGeometry(), bounds.extend, bounds);
                            });
                        }
                        catch (err) { MA.log('Unable to include data layer in zoom to fit calculation', err); }
                    }
                });

                //routes
                if (MA.Routing.mapComponents.polyline) {
                    MA.Routing.mapComponents.polyline.getPath().forEach(function(e) {
                        bounds.extend(e);
                    });
                }

                //misc markers
                if (PositionEnabled) { bounds.extend(PositionMarker.getPosition()); }
            }
            
            if(options.dataLayers.length > 0) {
                
            }

            if (!bounds.isEmpty()) {
                MA.map.fitBounds(bounds);
            }
        }
        catch (err) {
            MA.log(err);
        }
    }
}

function StringtoXML(text)
{
    if (window.ActiveXObject)
    {
        var doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(text);
    }
    else 
    {
        var parser=new DOMParser();
        var doc=parser.parseFromString(text,'text/xml');
    }
    return doc;
}

function ShowAddressNotFoundPopup()
{
    LaunchPopupWindow($('#AddressNotFoundPopup'), 600);
}

function FavoriteLocationsPopup()
{
    LaunchPopupWindow($('#FavoriteLocationsPopup'), 700);
}

function SlideToTree()
{
    slider1.goToFirstSlide();
    $('#TreeTab').removeClass('TreeTab-Inactive'); 
    $('#TreeTab').addClass('TreeTab-Active');
    $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Active'); 
    $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Inactive');
}

function SlideToPlottedQueries()
{
    if (NewLayerNavigationEnabled())
    {
        MALayers.moveToTab('plotted');
    }
    else
    {
        //slider1.goToSlide(1);
        if (!$('a[href="#tab-plotted"]').is('.tab-open')) {
            $('a[href="#tab-plotted"]').click();
        }
        $('#TreeTab').removeClass('TreeTab-Active'); 
        $('#TreeTab').addClass('TreeTab-Inactive');
        $('#PlottedQueriesTab').removeClass('PlottedQueriesTab-Inactive'); 
        $('#PlottedQueriesTab').addClass('PlottedQueriesTab-Active');
    }
    
    
    
}

//DirectionsInputTab
function SlideToLocations()
{
    slider2.goToFirstSlide();
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsInputTab').addClass('TreeTab-Active'); 
}

//DirectionsOutputTab
function SlideToDirectionsOutput()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab,#DirectionsOptionsTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Active');
}

//DirectionsOptionsTab
function SlideToDirectionsOptions()
{
    slider2.goToSlide(1);
    
    $('#DirectionsInputTab,#DirectionsOptionsTab,#DirectionsOutputTab').removeClass(); 
    $('#DirectionsInputTab').addClass('TreeTab-Inactive'); 
    $('#DirectionsOutputTab').addClass('PlottedQueriesTab-Inactive');
    $('#DirectionsOptionsTab').addClass('TreeTab-Active'); 
}

function MakeActiveSliderTab(id)
{
    $('#' + id).removeClass('PlottedQueriesTab-Inactive'); 
    $('#' + id).addClass('PlottedQueriesTab-Active');
}

function MakeInactiveSliderTab(id)
{
    $('#' + id).removeClass('TreeTab-Active'); 
    $('#' + id).addClass('TreeTab-Inactive');
}

function CloseDebugWindow()
{
    ClosePopupWindow();
}

function EmailDebugLog()
{
    var DebugLogComments = prompt("Comments:","");
    var EmailDebugLogArray = new Array();
    EmailDebugLogArray.push('bbrantly@cloudbilt.com');
    EmailDebugLogArray.push('dkraun@cloudbilt.com');
    
    var MyJSObject = {
            action: 'email_debug_log',
            replyTo: UserEmailAddress,
            subject: 'Map Anything Debug Log',
            htmlBody: '<b>Comments: </b>' + DebugLogComments + '<br /><br />' + $('#DebugOut').html(),
            toAddresses: EmailDebugLogArray
    };
    
    $.ajax({
        url: MA.resources.Email,
        type: 'POST',
        dataType: 'JSON',
        data: { MyJSObject: JSON.stringify(MyJSObject) },
        complete: function (response)
        {
            var obj = $.parseJSON(response.responseText);                      
            
            if(obj.success)
            {
                showSuccess($('#mapdiv').parent(), 'Debug Log Sent');
            }
            else
            {
                NotifyError("Error Sending Debug Log Email",obj.error);
                Debug("Error Sending Debug Log Email " + obj.error);
            }
        }
    });
}

    /************************
    *   Query Editor
    ************************/
    
    function queryEditorClose ()
    {
        $('#queryeditor-modal').dialog('destroy');
        /*$('#fade').fadeOut(function() {
            $('#fade').remove();  
        });*/
        
        //backdrop v2
        MA.Popup.hideBackdrop();
    }
    function queryEditorSaveComplete (queryId, baseObjectLabel, query, plotQueryOnComplete, queryIndex)
    {
        //determine if this query has a dynamic filter
        var isDynamic = false;
        $.each(query.filters || [], function (i, filter) {
            if (filter.value == ':Dynamic' || filter.value2 == ':Dynamic') {
                isDynamic = true;
            }
        });

        if (query.id)
        {
            //grab advancedOptions
            var advancedOptions;
            try {
                advancedOptions = JSON.stringify(query.advancedOptions);
            }
            catch (e) {
                advancedOptions = JSON.stringify({});
            }
            
            //this was an edit
            DoOnCompleteEditSavedQry(query.name, queryId, query.colorAssignmentType, isDynamic, advancedOptions);
        }
        else
        {
            //grab advancedOptions
            var advancedOptions;
            try {
                advancedOptions = JSON.stringify(query.advancedOptions);
            }
            catch (e) {
                advancedOptions = JSON.stringify({});
            }
            
            //this was new
            DoOnCompleteNewForSavedQry(
                query.name, 
                queryId,
                baseObjectLabel,
                query.folderId, 
                query.folderType.indexOf('Personal') == -1 ? 'CorporateSavedQuery' : 'PersonalSavedQuery', 
                "false", 
                query.colorAssignmentType == 'Static' ? 'Standard' : 'Legend',
                query.colorAssignmentType == 'Static' ? 'SavedQuery' : 'LegendSavedQuery',
                isDynamic,
                advancedOptions
            );
        }
        
        //update the icon color
        try
        {
            updateIcon($("#SQTree #"+queryId).attr('IconColor', query.iconColor));
        }
        catch (err) { }
        
        queryEditorClose();
        
        if (plotQueryOnComplete) {
            //determine if this is a visible area only query
            var visibleOnly = false;
            if(query.advancedOptions && query.advancedOptions.defaultRenderArea == 'VisibleArea') {
                visibleOnly = true;
                console.log('visible area!')
            }

            if (queryIndex) {
                //check if visible area has changed
                if(visibleOnly) {
                    $('#PlottedQueriesTable').children().eq(queryIndex).data('visibleAreaOnly', true).addClass('visibleOnly');
                }
                else {
                    $('#PlottedQueriesTable').children().eq(queryIndex).data('visibleAreaOnly',false).removeClass('visibleOnly');
                }
                refreshQuery($('#PlottedQueriesTable').children().eq(queryIndex));
            }
            else {
                if(visibleOnly) {
                    PlotQuery({ savedQueryId: (query.id || queryId) }, 'Default', true);
                }
                else {
                    PlotQuery({ savedQueryId: (query.id || queryId) }, 'Default');
                }
            }
        }
    }
            
    /**********************
    *   Helper Methods
    ***********************/
    
    //helper method for geocoding
    function geocode(options)
    {
        MA.Geocoding.geocode({ address: options.address }, function (response) {
            try {
                options.complete({
                    success: true,
                    request: options,
                    results: response.result
                });
            }
            catch (err) {
                options.complete({success: false});
            }
        });
    }
    
    //helper method for reverse geocoding
    function reverseGeocode(options)
    {
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ latLng: options.latLng }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                options.complete({
                    success: true,
                    request: options,
                    results: results
                });
            }
            else {
                MA.log('Bad Reverse Geocode', status);
                options.complete({success: false});
            }
        });
    }
    
    //helper method for extracting nested objects using a dot notation field name
    function extractValue(obj, field)
    {
        try {
            var fieldParts = field.split('.');
            var currentObj = obj;
            for (var i = 0; i < fieldParts.length; i++)
            {
                currentObj = currentObj[fieldParts[i]];
            }
            return (typeof currentObj == 'undefined' || currentObj == null) ? '' : currentObj;
        }
        catch (err) { }
        
        return '';
    }
    
    //helper method for updating nested objects using a dot notation field name
    function updateValue(obj, field, value)
    {
        try {
            var fieldParts = field.split('.');
            var currentObj = obj;
            for (var i = 0; i < fieldParts.length - 1; i++) {
                currentObj = currentObj[fieldParts[i]] = currentObj[fieldParts[i]] || {};
            }
            currentObj[fieldParts[fieldParts.length - 1]] =  value;
            return true;
        }
        catch (err) { }
        
        return false;
    }

    /**********************
    *   Stress Test Methods
    ***********************/
    function Stress_Markers(num, type)
    {
        if (type == 'rich') {
            for (var i = 0; i < num; i++) {
                new RichMarker({
                    position: new google.maps.LatLng(Math.floor(Math.random()*90), Math.floor(Math.random()*180)),
                    anchor: RichMarkerPosition.BOTTOM,
                    map: MA.map,
                    flat: true,
                    content: MA.Marker.createSVG()
                });
            }
        }
        else if (type == 'svg') {

            var svg = [
                '<svg class="svg-marker" width="28" height="42" preserveAspectRatio="xMidYMid meet" viewBox="0 0 28 42" xmlns="http://www.w3.org/2000/svg">',
                    '<circle cx="13.5" cy="14" fill="#001a00" r="4.5" stroke="#00bf00" stroke-dasharray="null" stroke-linecap="null" stroke-linejoin="null" stroke-width="2"></circle>',
                '</svg>'
            ].join('');

            for (var i = 0; i < num; i++) {
                new google.maps.Marker({ map: MA.map, position: new google.maps.LatLng(Math.floor(Math.random()*90), Math.floor(Math.random()*180)), icon: 'data:image/svg+xml;base64,'+CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(svg)) });
            }
        }
        else {
            for (var i = 0; i < num; i++) {
                new google.maps.Marker({ map: MA.map, position: new google.maps.LatLng(Math.floor(Math.random()*90), Math.floor(Math.random()*180)) });
            }
        }
    }
    
</script>
</apex:component>