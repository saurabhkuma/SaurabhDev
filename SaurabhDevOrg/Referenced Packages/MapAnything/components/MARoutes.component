<apex:component controller="sma.MAComponentCon" layout="none">

	<!-- CSS -->
	<style type='text/css'>

		/* Routes Calendar */
        #routesCalendar .routes-row:hover {
        	background: rgba(242, 242, 242, 0.6);
        }
        #routesCalendar .deleteDiv, #Routing-Table .deleteDiv {
        	display: none;
        	position: absolute;
        	top: 5px;
			right: 10px;
			padding: 0;
			font-size: 10px;
			font-weight: bold;
			line-height: 10px;
			color: #000;
			text-shadow: 0 1px 0 #FFF;
			opacity: 0.2;
			filter: alpha(opacity=20);
        }
        #routesCalendar .deleteDiv:hover, #Routing-Table .deleteDiv:hover {
			color: #000;
			text-decoration: none;
			cursor: pointer;
			opacity: 0.4;
			filter: alpha(opacity=40);
		}
        #routesCalendar .routes-row:hover .deleteDiv, #Routing-Table .waypoint-row:hover .deleteDiv {
        	display: block;
        }
        
        /* Time Based Route Options Visibility */
        #tab-routes-route .timeoptions {
        	overflow: hidden;
        	max-height: 0;
        	transition: max-height 500ms linear;
        }
        #tab-routes-route.timebased .timeoptions {
        	max-height: 16px;
        }
        
        /* Route Header */
        #tab-routes-route .route-header {
        	line-height: 1;
        }
        #tab-routes-route .route-header .editable[data-for="routename"] {
        	color: #2265BB;
        	font-size: 18px;
        }
        #tab-routes-route .route-header .timeoptions {
        	padding: 0;
			margin: 0;
			color: #757575;
			font-size: 10px;
        }
        
        /* Route Settings */
        #Routing-Settings .timedefaults h2 {
        	display: block;
        	margin-top: 10px;
        }
        #Routing-Settings .timedefaults > div {
        	margin: 6px 0;
        }
        #Routing-Settings .timedefaults > div > div {
        	font-size: 12px; font-weight: bold;
        }
        #Routing-Settings .timedefaults-startlocation, #Routing-Settings .timedefaults-endlocation {
        	width: 120px;
        	box-sizing: border-box;
        }
        
        /* Route Options */
        #tab-routes-route .route-header .toggle {
        	opacity: .25;
        	display: inline-block;
        	padding: 0;
        	cursor: pointer;
        }
        #tab-routes-route.timebased .route-header .toggle.active {
        	opacity: 1;
        }
        #tab-routes-route .route-header .toggle img {
        	height: 16px;
        }
        
        /* Route Defaults */
        #tab-routes-route .timedefaults > div > div {
        	font-size: 10px;
        	color: #ADADAD;
        	margin-top: 5px;
        }
        #tab-routes-route .timedefaults .ui-autocomplete-input {
        	width: 50px;
        	font-size: 8px;
        }
        
        /* Route Buttons */
        #Routing-Actions, #Routing-Buttons {
        	padding: 0 !important;
        	float: none;
        	height: 40px;
        }
        #Routing-Buttons div {
        	padding: 0 !important;
        }
        #Routing-Buttons > div {
        	background: transparent !important;
        	opacity: .9;
        }
        #Routing-Buttons > div:hover {
        	opacity: 1;
        }
        #Routing-Buttons img {
        	height: 20px;
        	margin-top: 8px;
        }
        
        /* Waypoint Row */
        .waypoint-row {
        	position: relative;
        	padding: 0 !important;
        	border-bottom: 1px solid #C0C0C0;
        	min-height: 45px;
        }
        .waypoint-row.invalid {
        	background-color: #FFD5D5;
        }
        .waypoint-row-basic {
        	padding: 0 10px 10px 40px !important;
        }
        .waypoint-row .index {
        	position: absolute;
        	top: 2px;
        	left: 5px;
        	color: #2265BB;
        	font-weight: bold;
        	padding: 0 !important;
        	cursor: move;
        }
        .waypoint-row .index .flag {
        	padding: 0 !important;
        }
        .waypoint-row .index .flag img {
        	height: 30px;
        	display: none;
        }
        .waypoint-row.startend .index .flag img {
        	height: 22px;
        }
        .waypoint-row.start .index .flag img.start, .waypoint-row.end .index .flag img.end, .waypoint-row.startend .index .flag img {
        	display: block;
        }
        .waypoint-row.start .index .svg-marker-waypoint, .waypoint-row.end .index .svg-marker-waypoint, .waypoint-row.startend .index .svg-marker-waypoint {
        	display: none;
        }
        
        .waypoint-row .additionalinfo-button {
        	/*display: none;*/
        	position: absolute;
        	bottom: 2px;
        	right: 10px;
        	cursor: pointer;
        }
        .waypoint-row:hover .additionalinfo-button {
        	display: block;
        }
        .waypoint-row .additionalinfo {
        	padding: 0 10px 5px 10px !important;
        	background: rgba(255,255,255,0.95);
        }
        .waypoint-row .additionalinfo-header {
        	font-size: 10px;
        	padding: 5px 0;
        	display: block;
        }
        .waypoint-row .editable[data-for="name"] {
        	color: #2265BB;
        	font-weight: bold;
        	font-size: 12px;
        	padding: 0 !important;
        	text-overflow: ellipsis;
			white-space: nowrap;
			overflow: hidden;
			display: inline-block;
			clear: both;
			max-width: 230px;
        }
        .waypoint-row .editable[data-for="name"].clickable {
        	cursor: pointer;
        }
        .waypoint-row .editable[data-for="address"] {
        	color: #757575;
        	font-size: 10px;
        	padding: 0 !important;
        }
        .waypoint-row .editable[data-for="notes"] {
        	padding: 0 !important;
        	box-sizing: border-box;
        	width: 95%;
        	font-size: 10px;
        }
        .waypoint-row .editable.blank {
        	color: #757575;
        }
        .waypoint-row .timeoptions {
        	padding: 0 !important;
			margin: 0 !important;
			color: #757575;
			font-size: 10px;
        }
        .waypoint-row.startend:last-child .timeoptions {
        	display: none;
        }
        .waypoint-row .tooltips {
        	font-size: 10px;
        	padding: 0 !important;
        }
        .waypoint-row .tooltips .label {
        	font-weight: bold;
        	font-size: 11px;
        	color: #555555;
        }
        .waypoint-row .tooltips .data {
        	color: #555555;
        }
        .waypoint-row .editable + * {
        	box-sizing: border-box;
        	width: 95%;
        	font-size: 10px;
        }
        .waypoint-row .timeoptions .editable + * {
        	width: auto;
        }
        .waypoint-row textarea {
        	height: 75px;
        }
        
        /* bxSlider Fixes */
        .bx-wrapper, .bx-viewport, #tab-routes-slider, #tab-routes-routes, #tab-routes-route {
        	padding: 0 !important;
        }
				
		/********ComboBox Styling****************/
		#SaveRoutesPopup input.ui-autocomplete-input.ui-widget {
			width: 90px;
			border-radius: 5px;
			font-size: 12px;
			text-align: center;
		}
		#SaveRoutesPopup input.autocomplete {
			height: 20px;
			border: 1px solid silver;
			text-align: center;
			width: 100px;
			border-radius: 5px;
			font-weight: bold;
		}
		
		/******************** Calendar CSS ***********************/
		#SaveRoutesPopup {
			overflow:hidden;
			max-height:525px;
			height:525px;
		}
		#SaveRoutesPopup .route-row .calendar-date {
			color: #3684c5;
			font-size: 23px;
			font-weight: 300;
			bottom: auto;
			right: auto;
			top: 10px;
			left: 10px;
			text-shadow: 0 1px 1px rgba(0,0,0,0.3);
			display: inline-block;
			text-align: right;
			box-sizing: border-box;
			display: inline-block;
			width: 30px;
		}
		#SaveRoutesPopup .route-row .day-name {
			padding-left: 5px;
			width: 40px;
			color: #3684c5;
			font-size: 10px;
			text-transform: uppercase;
			box-sizing: border-box;
			display:inline-block;
		}
		#SaveRoutesPopup .calendar-cell {
			border-bottom: 1px solid silver;
			padding: 0px 10px;
			min-width: 70px;
		}
		#SaveRoutesPopup tr:first-child td {
			border-top: 1px solid silver;
		}
		#SaveRoutesPopup .save-route-header {
			position: relative;
			bottom: 11px;
			border-bottom: 2px solid #F15A24;
		}
		#SaveRoutesPopup .save-route-header h2 {
			font-size: 120%;
			margin-left: 10px;
		}
		#SaveRoutesPopup .save-route-buttons {
			position: absolute;
			bottom: 15px;
			right: 20px
		}
		/************ more calendar testing ***************/
		.full-calendar .calendar-wrapper {
			border-left: 1px solid silver;
			border-top: 1px solid silver;
			border-bottom: 1px solid silver;
			width: 749px;
		}
		.full-calendar .calendar-row {
			border-bottom: 1px solid silver;
			display: inline-block;
		}
		.full-calendar .calendar-row > div {
		    float: left;
		}
		.full-calendar .calendar-head {
			height: 40px;
			line-height: 40px;
		}
		.full-calendar .calendar-head > div:last-child {
			border-right: none;
		}
		.calendar-row:last-child {
			border-bottom: none;
		}
		.full-calendar .calendar-head > div {
			float: left;
		    width: 107px;
		    position: relative;
		    font-weight: bold;
			font-size: 12px;
			letter-spacing: 2px;
			text-align: center;
			color: #3684c5;
		}
		.full-calendar .calendar-weekday {
			display:none;
		}
		.full-calendar .calendar-date {
			font-weight: bold;
			left: 5px;
			position: relative;
		}
		.full-calendar .full-calendar-cell {
			cursor:pointer;
			border-right: 1px solid silver;
			height: 65px;
		    width: 106px !important;
		    position: relative;
		    color:#3684c5;
		}
		.full-calendar .full-calendar-cell.selected {
			background: #3684c5;
			color: white;
		}
		.full-calendar .full-calendar-cell.saved .route{
			font-size: 11px;
			font-weight: bold;
			text-align: center;
			background: #3684c5;
			color: white;
			margin: 0 3px 2px 3px;
		}
		.full-calendar .full-calendar-cell.disabled {
			cursor: default;
			background: #f2f2f2;
		}
		.full-calendar .full-calendar-cell #newRoute {
			text-align: center;
		}
		.full-calendar .full-calendar-cell #newRoute #savename{
			font-size: 10px;
			max-width: 99px;
			text-align: center;
			border: transparent;
		}
		
		/* Dialogs */
		.ui-widget-overlay {
			opacity: 0.5;
			z-index: 1001;	
			background: #000;
		}
		.routing-dialog-close {
			display: block;
			width: 18px; height: 24px;
			position: absolute; top: 0px; right: 8px;
			font-size: 24px; font-weight: bold;
			line-height: 24px;
			cursor: pointer;
		}
		.routing-dialog-close div {
			color: #FF0000;
		}
	</style>

	<!-- JS -->
	<script type='text/javascript'>
		
		/******************************
		*	Globals
		******************************/
		var routesTabSlider;
		
		/******************************
		*	On Ready
		******************************/
		$(function () {
		
			/****************************************
			*	Init
			****************************************/
			
			//init combobox and slimScroll
			$('#SaveRoutesPopup #saveyear, #SaveRoutesPopup #savemonth').combobox()
			
			//init slider
			routesTabSlider = $('#tab-routes-slider').bxSlider({controls: false, pager: false, infiniteLoop: false, speed: 200});
			
			//Autocomplete reference fields
            $('#saveactiveusers, #routeactiveusers').autocomplete({
            	source: function (request, response) {
		            var searchTerm = request.term;
		            
		            $.ajax({
	             		url: MA.resources.Waypoint+'?securityToken={!securityToken}&action=getRouteUserOptions&core.apexpages.devmode.url=0',
	             		type: 'POST',
		                dataType: 'JSON',
		                data: {
		                	term: searchTerm
		                },
	             		success: function (lookupOptionsResponse) {
	             			
	             			var options = [];
	             			$.each(lookupOptionsResponse.data, function (index, data) {	
	             				options.push({
	             					label: data.Name,
	             					value: data.Id
	             				});
	             			});
	             			
	             			response(options);
	             		}
	            	});
	            },
	            minLength: 2,
	            select: function( event, ui) {
	            	$(this).val(ui.item.label);
	            	$(this).next().val(ui.item.value);
	            	var type = $(this).is('#saveactiveusers') ? 'save' : 'route';
	            	$('#'+type+'year').change();
	            	return false;
	            }
            });
            
            //time based comboboxes
            var $timeSelects = $('.timedefaults-routestart, .timedefaults-routeend, #timeoptions-routestart, #timeoptions-routeend');
            var currentMoment = moment().startOf('day');
            var currentDay = currentMoment.day();
            while (currentMoment.day() == currentDay) {
            	$('<option/>').attr('value', currentMoment.format('h:mm a')).text(currentMoment.format('h:mm a')).appendTo($timeSelects);
            	currentMoment.add('m', 30);
            }
            
            //duration based comboboxes
            var $durationSelects = $('.timedefaults-appointmentduration');
            var currentMinutes = 0;
            while (currentMinutes < 180) {
            	var duration = Math.floor(currentMinutes / 60) + ' hr, ' + (currentMinutes % 60) + ' min';
            	$('<option/>').attr('value', duration).text(duration).appendTo($durationSelects);
            	currentMinutes += 15;
            }
            
            /************************************
            *	Handlers
            ************************************/
            
            //waypoint address updates
            $('#Routing-Table').on('change keydown', '.waypoint-row .address', function () {
            	$(this).removeClass('GoodGeocodeForWaypoint BadGeocodeForWaypoint').removeAttr('markerPosition');
            	$(this).prev().removeClass('GoodGeocodeForWaypoint BadGeocodeForWaypoint');
            	$(this).closest('.waypoint-row').removeAttr('Lat').removeAttr('Long');
            });
            
            //handle editing route fields
            $('#tab-routes-route')
            
            	//clicking a label
            	.on('click', '.editable', function () {
	            	if (!$(this).next().is('.DisabledWaypoint')) {
	            		$(this).hide().next().show().focus();
	            	}
	            })
	            
	            //blur an input
            	.on('blur', '.editable + *', function (e) {
            		$(this).hide().prev().text($(this).val()).show();
	            	$(this).change();
	            })
	            
	            //press enter on an input
	            .on('keypress', '.editable + input', function (e) {
	            	if (e.keyCode == 13) {
	            		$(this).blur();
	            	}
	            })
	            
	            //press tab on an input/textarea
	            .on('keydown', '.editable + *', function (e) {
	            	if (e.keyCode == 9) {
	            	
	            		//find the next element that we want to move focus to
	            		var $waypointRow = $(this).closest('.waypoint-row');
	            		var $nextElement;
	            		if ($(this).is('.name')) {
	            			$nextElement = $waypointRow.find('.address');
	            		}
	            		else if ($(this).is('.address') && $waypointRow.find('.additionalinfo').is(':visible')) {
	            			$nextElement = $waypointRow.find('.notes');
	            		}
	            		else if ($(this).is('.address') || $(this).is('.notes')) {
	            			var $nextWaypointRow = $waypointRow.next();
	            			while ($nextWaypointRow.length > 0) {
	            				if ($nextWaypointRow.find('.name').is('.DisabledWaypoint')) {
	            					$nextWaypointRow = $nextWaypointRow.next();
	            				}
	            				else {
	            					$nextElement = $nextWaypointRow.find('.name');
	            					break;
	            				}
	            			}
	            		} 
	            		
            			//remove focus from this element and click the next one
            			$(this).blur();
            			if ($nextElement) {
            				$nextElement.prev().click();
            			}
            			
            			//cancel the default behavior
            			return false;
	            	
	            	}
	            })
	            
	            //changing an input
	            $('#tab-routes-route').on('change', '.editable + *', function (e) {
	            
	            	//if this is select list and is still visible then blur it automatically
	            	if ($(this).is('select:visible')) {
	            		$(this).blur();
	            		return;
	            	}
	            	
	            	//update the label value
	            	if ($(this).val() == '') {
	            		var placeholder = 'Blank';
	            		switch ($(this).prev().attr('data-for')) {
	            			case 'name':
	            				placeholder = 'Name';
	            				break;
	            			case 'address':
	            				placeholder = 'Address';
	            				break;
	            			case 'notes':
	            				placeholder = 'Notes';
	            				break;
	            			default:
	            				break;
	            		}
	            		$(this).prev().text(placeholder).addClass('blank');
	            	}
	            	else {
	            		$(this).prev().html($(this).val().replace(/\n/g, '<br/>')).removeClass('blank');
	            	}
	            })
	        ;
	        $timeSelects.change();
	        $durationSelects.change();
            
            //handle opening waypoint advanced info
            $('#tab-routes-route').on('click', '.additionalinfo-button', function () {
            	var $row = $(this).closest('.waypoint-row');
            	if ($row.find('.additionalinfo').is(':visible'))
            	{
            		//hide this additional info
            		$row.find('.additionalinfo').slideUp(200);
            	}
            	else
            	{
            		//hide all other additional info and show this
            		$('#tab-routes-route .waypoint-row .additionalinfo:visible').slideUp();
            		$row.find('.additionalinfo').slideDown(200, function () {
            			routesTabSlider.redrawSlider();
            			$('#Routing-Table').slimScroll({ scrollBy: $row.position().top });
            		});
            	}
            });
            
            //handle toggling time based routes
            $('#tab-routes-route .toggle.timebased').click(function () {
            	$(this).toggleClass('active');
        		$('#tab-routes-route').toggleClass('timebased');
        		
        		//test to see if they have enabled or disabled, if they enabled it we should track it in totango.
        		try
        		{
                    if ($(this).hasClass('active'))
                    {
                        try {  totango.track('Enable Time-Based Routing', 'MapAnything'); } catch(err) { }
                    }
        		    
        		}
        		catch(ex) {}
            });
            
            //clear directions to init everything
            ClearDirections();
            
		});
		
		/******************************
		*	Support Methods
		******************************/
		
		//this function will return the total number of days in a month
        function daysInMonth(month, year) {
        	return new Date(year, month, 0).getDate();
        }
        
        function selectSaveDay(selectedRow)
        {
        	//remove selected class
        	$('.full-calendar .full-calendar-cell').each(function (index, row) {
			   $(row).removeClass('selected');
			});
			
			//store entered value and highlight row
			var newRouteName = $('#routename').val();
			$(selectedRow).addClass('selected');
			
			//text entry template
	        var newRoute = '<div id="newRoute" class="route"><input type="text" id="savename" /></div>';
			
			//remove previous selection
			if($('#SaveRoutesPopup #newRoute').length != 0)
        	{
        		newRouteName = $('#SaveRoutesPopup #newRoute #savename').val();
        		$('#SaveRoutesPopup #newRoute').remove();
        	}
			
			$(selectedRow).append(newRoute);
	        $(selectedRow).find('#savename').val(newRouteName).focus().select();
	        $('#newRoute').click( function(e) {
			    e.stopPropagation();
			    return true;
			});
        }
        
        function PrepareSaveRoutePopup(perform)
        {
            try {  totango.track('Save Route', 'MapAnything'); } catch(err) { }
            
        	//remove any waypoints that don't have a name and find those that need to be geocoded
        	var waypointsToGeocode = [];
        	var needToReorder = false;
        	$.each($('#Routing-Table .waypoint-row'), function(index, row) {
        		var waypointName = $(row).find('.name').val();
        		if(waypointName == null || waypointName.trim() == '') { $(row).remove(); needToReorder = true; }
        		else if (!(!!$(row).attr('Lat') || !!$(row).attr('Long'))) {
        			waypointsToGeocode.push({
        				waypoint: $(row),
        				geocoded: false,
        				error: false
        			});
        		}
        	});
        	
        	//renumber the waypoints if needed
        	if (needToReorder) {
        		OrderNumbersOnWaypoints();
        	}
        	
        	//geocode waypoints
        	$.each(waypointsToGeocode, function (index, waypointToGeocode) {
        		geocode({
        			address: waypointToGeocode.waypoint.find('.address').val(),
        			complete: function (response) {
        				waypointToGeocode.geocoded = true;
        				if (response.success) {
        					waypointToGeocode.waypoint.attr({
        						Lat: response.results.Latitude,
        						Long: response.results.Longitude
        					});
        					waypointToGeocode.waypoint.find('.address, .editable[data-for="address"]').addClass('GoodGeocodeForWaypoint').val(response.results.FormattedAddress);
        				}
        				else {
        					waypointToGeocode.error = true;
        					waypointToGeocode.waypoint.find('.address, .editable[data-for="address"]').addClass('BadGeocodeForWaypoint');
        				}
        			}
        		});
        	});
        	
        	//poller for geocode completion
        	var geocodeInterval = setInterval(function () {
        		var done = true;
        		var error = false;
        		$.each(waypointsToGeocode, function (index, waypointToGeocode) {
        			if (!waypointToGeocode.geocoded) { done = false; }
        			if (waypointToGeocode.error) { error = true; }
        		});
        		
        		if (error && done) {
        			clearInterval(geocodeInterval);
        		}
        		else if (done) {
        			clearInterval(geocodeInterval);
        			
        			if(perform != null) { 
        				$('#saveRouteType').val(perform); 
        			}
        			
		        	if(perform == 'update') { 
		        		saveId = $('#routename').attr('data-id'); 
		        		
		        		//set month and year to selected option
       					$('#SaveRoutesPopup').find('#savemonth').val($('#tab-routes-routes #routemonth').val()).next().find('input').val($('#SaveRoutesPopup').find('#savemonth option:selected').text());
       					$('#SaveRoutesPopup').find('#saveyear').val($('#tab-routes-routes #routeyear').val()).next().find('input').val($('#SaveRoutesPopup').find('#saveyear option:selected').text());
		        	}
		        	$('#saveyear').change(); 
		        	LaunchPopupWindow($('#SaveRoutesPopup'), 750);
        		}
        	}, 300);
        }
        
        function CloseMessageWindow()
        {
        	if($('#routeMessage').html() == 'You must select a day and give the route a name before saving.') { PrepareSaveRoutePopup(); }
        	else { ClosePopupWindow(); }
        }
        
        function saveRoute(perform)
        {
        	//make sure the route has a name
        	var routeName = $('#savename').val();
        	if(routeName == null || routeName.trim() == '')
        	{
        		ClosePopupWindow();
        		$('#routeMessage').html("{!$Label.MA_Select_day_saving_msg}");
        		LaunchPopupWindow($('#SaveRoutesPopupMissingWaypointName'), 500);
        		return;
        	}
        	
        	//create an array of waypoint data
        	waypoints = [];
        	$('#Routing-Table .waypoint-row').each(function(i, row) {
        		waypoints.push({
        			name		: $(this).find('.name').val().length <= 80 ? $(this).find('.name').val() : $(this).find('.name').val().substring(0, 77) + '...',
        			address		: $(this).find('.address').val(),
        			notes		: $(this).find('.notes').val(),
        			sortOrder	: i + 1,
        			linkId		: $(this).find('.name').attr('data-id'),
        			baseObject	: $(this).find('.name').attr('baseObject'),
        			baseObjectId: $(this).find('.name').attr('baseObjectId'),
        			tooltips	: $(this).find('.name').attr('tooltips'),
        			latitude	: $(this).attr('Lat'),
        			longitude	: $(this).attr('Long'),
        			savedQueryId: ($(this).attr('savedQueryId') || '').indexOf('OptionsLayer') == 0 ? null : $(this).attr('savedQueryId'),
        			options		: JSON.stringify({ 
        				TimeBasedOptions	: { Start: $(this).find('.timeoptions-waypointstart').val(), Duration: $(this).find('.timeoptions-waypointduration').val() },
        				LockType			: $(this).is('.startend') ? 'startend' : $(this).is('.start') ? 'start' : $(this).is('.end') ? 'end' : 'unlocked'
        			})
        		});
        	});
            //console.log(waypoints);
        	
        	//stringify route options
        	var options = JSON.stringify({
        		TimeBasedOptions: {
        			Enabled	: $('#tab-routes-route').is('.timebased'),
        			Start	: $('#timeoptions-routestart').val(),
        			End		: $('#timeoptions-routeend').val()
        		}
        	});
        	
        	$.ajax({
		    	url: MA.resources.Waypoint+'?action=saveRoute',
			    type: 'POST',
			    dataType: 'JSON',
			    data: {
			    	perform				: perform,
			    	routeId				: $('#routename').attr('data-id'),
			    	day					: $('#savename').closest('.full-calendar-cell').find('.calendar-date').text(),
			    	month				: $('#savemonth').val(),
			    	year				: $('#saveyear').val(),
			    	userId				: $('#saveactiveusers-value').val(),
			    	name				: $('#savename').val(),
			    	options				: options,
			    	serializedWaypoints	: JSON.stringify(waypoints)
			    },
		    	success: function (response) 
		    	{
			    	if (response.success)
			    	{
			    		$('#routename').val($('#savename').val()).change();
			    		$('#routename').attr('data-id', response.routeId);
			    		$('#routeyear').change();
			    		ClosePopupWindow();
			    	}
			    	else
			    	{
			    		//there was a problem so just show an error message
			    		var errorMsg = 'Unable to save: Unknown error.'
			    		if(response.error) {
			    			errorMsg = 'Unable to save route. <br></br>' + response.error;
			    		}
			    		showError($('#SaveRoutesPopup'),errorMsg,8000)
			    	}
			    },
			    error: function (res) 
			    {
			    	console.log(res);
			    }
		    });
        }

        var arrIndex = 0;
        function loopArray (arr,$routingTable) {
        	var queryObj = $routingTable.data('queriesToRequest')[arr[arrIndex]];
        	var $plottedQuery = $('#templates .PlottedRowUnit').clone().addClass('loading').data({ id: arr[arrIndex], savedQueryId: arr[arrIndex], rendered: true });
            $routingTable.data('plottedQueries')[arr[arrIndex]] = $plottedQuery;
            
            //populate default data
            $.extend($plottedQuery.data(), {
                records: {},
                recordsToGeocode: [],
                numGeocodeRequestsOut: 0,
                numSuccessfulGeocodes: 0,
                numFailedGeocodes: 0,
                visibleAreaOnly: false,
                proximityObjects: []
            });
        
            //send analyze request
            analyzeQuery({
                plottedQuery: $plottedQuery,
                includeData: false,
                showDistanceLimit: false,
                callback: function (success, records) {
                    //build the records for this query based on the waypoints we collected earlier
                    var records = $plottedQuery.data('records');
                    var dupeRecord, dupeWaypoint;
                    $.each(queryObj.waypoints, function (index, waypoint)
                    {
                        //options
                        var lockType = 'unlocked';
                        try { lockType = JSON.parse(waypoint.Options__c).LockType || 'unlocked'; }
                        catch (err) {}

                        //add waypoint as a record
                        if (records[waypoint.LinkId__c]) {
                            dupeRecord = records[waypoint.LinkId__c];
                            dupeWaypoint = waypoint;
                        }
                        else {
                            records[waypoint.LinkId__c] = {
                                savedQueryId    : $plottedQuery.data('id'),
                                contentKey      : $plottedQuery.data('id') + '-' + waypoint.LinkId__c,
                                plottedQuery    : $plottedQuery,
                                isProcessed     : false,
                                isGeocoded      : true,
                                latitude        : waypoint.Latitude__c,
                                longitude       : waypoint.Longitude__c,
                                markerLatitude  : waypoint.Latitude__c,
                                markerLongitude : waypoint.Longitude__c,
                                isVisible       : false,
                                isClustered     : false,
                                isRendered      : false
                            };
                        }
                    });

                    //send a batch request to process these records
                    var recordBatch = [];
                    $.each(records, function (index, record) {
                        recordBatch.push(index);
                    });
                    processBatch($plottedQuery, recordBatch, { overwriteCoordinates: false });

                    //the batch has been sent for processing.  start a poller that will periodically check if processing is complete
                    $plottedQuery.data(
                        'processingInterval', 
                        setInterval(function () {

                            //loop through all records.  we're done if everything has been processed
                            var processingComplete = true;
                            var numRecords = 0;
                            var numProcessed = 0;
                            $.each($plottedQuery.data('records'), function (index, record) {
                                if (!record.isProcessed) {
                                    processingComplete = false;
                                }
                                else {
                                    numProcessed++;
                                }
                                numRecords++;
                            });
                            
                            //keep track of the total number of records for use later
                            $plottedQuery.data('numRecords', numRecords);
                            
                            //if we're done processing, we're ready to actually plot the query
                            if (processingComplete) {
                                clearInterval($plottedQuery.data('processingInterval'));
                                
								queryObj.done = true;
								arrIndex++;
                                // any more items in array? continue loop
								if(arrIndex < arr.length) {
									loopArray(arr,$routingTable);   
								}
                            }
                            
                        }, 500)
                    );
                } 
            });
        }
        
        function displayRoute(route)
        {
        	//clear any existing route information
        	//console.log('TESTING!');
        	ClearDirections({ loadDefaultLocations: false });

        	var $routingTable = notPrintEmailPage ? $('#Routing-Table') : $(window.opener.document.getElementById('Routing-Table'));
        	$routingTable.removeData();
        	$routingTable.data('queriesToRequest', {});
        
        	//show waypoints slide
        	routesTabSlider.goToSlide(1);
        
        	var routeId = $(route).attr('id');
        	var queryArray = [];
        	$.ajax({
		    	url: MA.resources.Waypoint+'?action=getRoute',
			    type: 'POST',
			    dataType: 'JSON',
			    data: {
			    	routeId: routeId
			    },
		    	success: function (response) 
		    	{
			    	if (response.success) 
			    	{
			    		//basic info
			    		removeNamespace('{!namespace}', response.route);
			    		$('#tab-routes-route').data('route', response.route);
			    		$('#routename').val(response.route.Name).change().attr('data-id', response.route.Id);
			    		
			    		//options
			    		var options = $.extend({}, MA.defaults.routeOptions, JSON.parse(response.route.Options__c || '{}'));
			    		$('#tab-routes-route .toggle.timebased').toggleClass('active', options.TimeBasedOptions.Enabled);
			    		$('#tab-routes-route').toggleClass('timebased', options.TimeBasedOptions.Enabled);
			    		$('#timeoptions-routestart').val(options.TimeBasedOptions.Start).change();
			    		$('#timeoptions-routeend').val(options.TimeBasedOptions.End).change();
			    		
			    		//waypoints
					    if(response.waypoints.length > 0) {
						    $.each(response.waypoints, function(index, waypoint) {
						    	removeNamespace('{!namespace}', waypoint);
						    
		        				var $row = $('#routing-templates .waypoint-row').clone().appendTo('#Routing-Table .waypoints');
		        				$row.find('.index').append($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, waypoint.Id + '_table').replace(/__TEXT__/g, waypoint.SortOrder__c));
		        				$row.find('.name').val(waypoint.Name).change();
		        				$row.find('.address').val(waypoint.Address__c).change();
		        				$row.find('.timeoptions-waypointstart').html($('.timedefaults-routestart').html()).prepend(
									$('<option/>').attr('value', '???').text('???')
								);
								$row.find('.timeoptions-waypointduration').html($('.timedefaults-appointmentduration').html()).val($('.timedefaults-appointmentduration').val());
		        				$row.find('.notes').val(waypoint.Notes__c).change();
		        				
		        				//options
					    		var options = $.extend({}, MA.defaults.waypointOptions, JSON.parse(waypoint.Options__c || '{}'));
					    		$row.find('.timeoptions-waypointstart').val(options.TimeBasedOptions.Start).change();
					    		$row.find('.timeoptions-waypointduration').val(options.TimeBasedOptions.Duration).change();
					    		if (options.LockType != 'unlocked') {
					    			$row.addClass(options.LockType);
					    		}
		        				
		        				//add long/long info if we have it
		        				if (waypoint.Latitude__c && waypoint.Longitude__c) {
		        					$row.attr({ Lat: waypoint.Latitude__c, Long: waypoint.Longitude__c });
		        					$row.find('.address').attr('markerposition', JSON.stringify({ latitude: waypoint.Latitude__c, longitude: waypoint.Longitude__c }));
		        				}
		        				
		        				//add saved query id if we have it
		        				if (waypoint.MASavedQry__c) {
		        					$row.attr('savedQueryId', waypoint.MASavedQry__c);
		        					$row.attr('data-id', waypoint.LinkId__c);

		        					//yes, make sure the query exists in our list
		                            if (!$routingTable.data('queriesToRequest')[waypoint.MASavedQry__c]) {
		                            	queryArray.push(waypoint.MASavedQry__c);
		                                $routingTable.data('queriesToRequest')[waypoint.MASavedQry__c] = {
		                                    waypoints: [],
		                                    done: false
		                                };
		                            }
		                            
		                            //add this waypoint to the query
		                            $routingTable.data('queriesToRequest')[waypoint.MASavedQry__c].waypoints.push(waypoint);
		        				}
		        				
		        				if(waypoint.LinkId__c != null) {
		        					$.ajax({
								    	url: MA.resources.Waypoint+'?action=getTooltips',
									    type: 'POST',
									    dataType: 'JSON',
									    data: {
									    	linkId			: waypoint.LinkId__c,
									    	baseObject		: waypoint.BaseObject__c,
									    	tooltips		: waypoint.AdditionalData__c,
									    	format			: 'html'
									    },
								    	success: function (response) 
								    	{
									    	if (response.success) {
									    		$row.find('.tooltips').html(response.tooltips).show();
									    		$row.find('.additionalinfo-header[data-for="tooltips"]').show();
									    	}
									    	else {
									    		//there was a problem so just show an error message
									    	}
									    },
									    error: function () {
									    }
								    });
		        					
		        					$row.find('.name').attr('data-id', waypoint.LinkId__c).attr('baseobject', waypoint.BaseObject__c).attr('tooltips', waypoint.AdditionalData__c).prop('disabled', true).addClass('DisabledWaypoint');
		        					$row.find('[data-for="name"]').addClass('clickable').attr('onclick', "window.open('/"+waypoint.LinkId__c+"')");
        							$row.find('.address').prop('disabled', true).addClass('DisabledWaypoint');
		        				}
		        			});
		        		}
		        		
		        		//get plotted query info
		        		if(queryArray.length > 0) {
		        			//show load image
		        			showForm($('#mapdiv'), '<img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/>', false, null, true);
			        		$routingTable.data('plottedQueries', {});
			        		arrIndex = 0;
		                    loopArray(queryArray,$routingTable);
		                }
		        		
		        		$routingTable.data('renderInterval', setInterval( function () {
	                            var done = true;
	                            $.each($routingTable.data('queriesToRequest'), function (index, queryObj) {
	                                if (!queryObj.done) {
	                                    done = false;
	                                    return false;
	                                }
	                            });
	                            
	                            if (done) {
	                                clearInterval($routingTable.data('renderInterval'));
					        		//lock waypoints if needed
					        		$('#Routing-Table .waypoints .waypoint-row.startend').last().remove();
					        		Waypoint_Lock($('#Routing-Table .waypoints .waypoint-row.startend'), 'Both');
					        		Waypoint_Lock($('#Routing-Table .waypoints .waypoint-row.start'), 'Start');
					        		Waypoint_Lock($('#Routing-Table .waypoints .waypoint-row.end'), 'End');
					        		
					        		OrderNumbersOnWaypoints();
					        		GetDirections(true);
					        	}
					    },500));
			    	}
			    	else {
			    		//there was a problem so just show an error message
			    	}
			    },
			    error: function () {
			    }
		    });
        }
        
        function deleteRoute(route)
        {
        	var routeId = $(route).parent().attr('id');
        	
        	$.ajax({
		    	url: MA.resources.Waypoint+'?action=deleteRoute',
			    type: 'POST',
			    dataType: 'JSON',
			    data: {
			    	routeId				: routeId
			    },
		    	success: function (response) 
		    	{
			    	if (response.success)
			    	{
			    		if($('#routename').attr('data-id') == routeId) { $('#routename').attr('data-id', null); }
			    		$('#routeyear').change();
			    	}
			    	else
			    	{
			    		//there was a problem so just show an error message
			    		
			    	}
			    },
			    error: function () 
			    {
			    	
			    }
		    });
        }
        
        //this is not being used
        function downloadRoute()
        {
        	var routeName = $('#routename').val();
        	routeName = routeName != null && routeName.trim() != '' ? routeName : 'MapAnything Route';
        	
        	/*
        	var fileExtension = 'xls';
        	var contentType = 'application/vnd.ms-excel';
        	
        	var fileExtension = 'csv';
        	var contentType = 'text/csv';
        	*/
        	
        	var fileExtension = $('#downloadType').val();
        	var contentType = $('#downloadType:selected').attr('data-type');
        	
        	var waypointsCSV = '';
        	var waypointData = [];
        	var waypoints = [];
        	var headers = [];
        	
        	$.each($('#sortable tr:first th:not(:last)'), function(i, header) {
        		//set up xls format
	        	if(fileExtension == 'xls')
	        	{
		        	headers.push($(header).text());
		        }
		        //set up csv format
		        else if(fileExtension == 'csv')
		        {
		        	waypointsCSV += (waypointsCSV != '' ? ',' : '') + $(header).text();
		        }
        	});
        	
        	$.each($('#sortable tr:not(:first)'), function(i, row) {
       			//set up xls format
	        	if(fileExtension == 'xls')
	        	{
		        	waypointData.push(
	        			$(this).find('#RowNumber').text(),
	        			$(this).find('#name').val(),
	        			$(this).find('#address').val(),
	        			$(this).find('#notes').val(),
	        			$(this).find('#distance').html().replace(/<br>/g, ' / ')
	        		);
	        		
	        		waypoints.push(waypointData);
	        		waypointData = [];
		        }
		        //set up csv format
		        else if(fileExtension == 'csv')
		        {
		        	waypointsCSV += '\n"' + $(this).find('#RowNumber').text() + '"'
	        			+ ',"' + $(this).find('#name').val() + '"'
	        			+ ',"' + $(this).find('#address').val() + '"'
	        			+ ',"' + $(this).find('#notes').val() + '"'
	        			+ ',"' + $(this).find('#distance').html().replace(/<br>/g, '\n') + '"'
		        }
	        });
        	
        	var win = window.open(MA.resources.DownloadRoute+'?routeName='+routeName+'&fileExtension='+fileExtension+'&contentType='+contentType+(fileExtension == 'xls' ? '&headersSerialized='+JSON.stringify(headers)+'&waypointsSerialized='+JSON.stringify([waypoints]) : '&waypointsCSV='+JSON.stringify(waypointsCSV))+'&core.apexpages.devmode.url=0', "_blank");
			
			ClosePopupWindow();
		}
		
		function GetDirections(pHighlight, options)
		{
		    try {  totango.track('Click Get Directions', 'MapAnything'); } catch(err) { }
		    
		    options = $.extend({
		        success: function () {}
		    }, options);
		    
			//loadmask
		   	$('#tab-routes').append('<div class="loadmask"></div>');
		
			highlight = pHighlight;
			
			//if the current page state is route optimization then optimize this route instead of getting directions
			if (currentState == 'Optimize Directions Step 1' || currentState == 'Optimize Directions Step 2' || currentState == 'Optimize Directions Step 3')
			{
				optimizeRoute();
				return;
			}
			
			ClearDirectionsFromMap();
			$('#Routing-Table .waypoint-row').removeClass('invalid').removeAttr('title');
		    HasRoutingErrors = false;
		    
		    var RequiresGeoCoding = false;
		    
		    var WPIndex = 0;
		    
		    
		    //build array of points
		    WayPointArray = [];
		    var tableRows = notPrintEmailPage ? $('#Routing-Table .waypoint-row') : $( window.opener.document.getElementById('Routing-Table') ).find('.waypoint-row');
			$.each(tableRows, function () {
				var WayPoint = {};
				if (!!$(this).attr('Lat') && !!$(this).attr('Long'))
				{
					//this does not need to be geocoded
					WayPoint['Done'] = true;
			        WayPoint['WayPointTitle'] = $(this).find('.name').val();
			        WayPoint['lat'] = $(this).attr('Lat');
			        WayPoint['long'] = $(this).attr('Long');
			        WayPoint['Address'] = $(this).find('.address').val();
			        WayPoint['Index'] = $(this).find('.rownumber').text();
			        WayPoint['Row'] = $(this);
			        WayPointArray.push(WayPoint);
			        
			        WPIndex++;
				}
				else if ($(this).find('.address').val() != '')
				{
					RequiresGeoCoding = true;
					
					WayPoint['Done'] = false;
			        WayPoint['WayPointTitle'] = $(this).find('.name').val();
			        WayPoint['Address'] = $(this).find('.address').val();
			        WayPoint['Index'] = $(this).find('.rownumber').text();
			        WayPoint['Row'] = $(this);
			        WayPointArray.push(WayPoint);
			        
			        WPIndex++;
			    }
			    else
			    {
		            //Remove Element
		            $(this).remove();
		        }
			});
			
			//geocode array of points
			if (WPIndex < 2)
		    {
		    	showError($('#mapdiv'), 'At least 2 points are required for directions');
		    	$('#tab-routes .loadmask').remove();
		    	ClearDirectionsFromMap();
		    	return;
		    }
		    else if (RequiresGeoCoding)
		    {
		    	$.each(WayPointArray, function (index, waypoint) {
		    		if (!waypoint.Done) {
						geocode({
							address: waypoint.Address,
							complete: function(response) {
								if (response.success) {
									waypoint.Done = true;
									waypoint.lat = response.results.Latitude;
							        waypoint.long = response.results.Longitude;
							        waypoint.Row.attr({ Lat: response.results.Latitude, Long: response.results.Longitude }).find('.address, [data-for="address"]').addClass('GoodGeocodeForWaypoint');
							        waypoint.address = response.results.FormattedAddress;
							    }
							    else {
							    	waypoint.Done = true;
							    	waypoint.Row.find('.address, [data-for="address"]').addClass('BadGeocodeForWaypoint');
							    	waypoint.error = true;
							    }
							}
						});
					}
		    	});
		    }
		    
		    //loop through directions and check if done : continue
		    var interval = setInterval(function ()
		    {
		    	var done = true;
		    	var error = false;
		    	$.each(WayPointArray, function (index, waypoint) 
		    	{
		    		if(waypoint.Done == false) {
		    			done = false;
		    		}
		    		else if (waypoint.error) {
		    			error = true;
		    		}
		    	});
		    	
		    	if(done) {
		    		if (error) {
		    			$('#tab-routes .loadmask').remove();
		    		}
		    		else {
		    			if ($('#tab-routes-route').is('.timebased') && notPrintEmailPage) {
		    				ProcessWayPoints_TimeBased(pHighlight, {
		    				    success: function () {
		    				        options.success();
		    				    }
		    				});
		    			}
		    			else {
		    				ProcessWayPoints(pHighlight, {
		    				    success: function () {
		    				        options.success();
		    				    }
		    				});
		    			}
		    		}
		    		clearInterval(interval);
		    	}
		    },100);
		}
		
		function ProcessWayPoints(pHighlight, options)
		{
		    options = $.extend({
		        success: function () {}
		    }, options);
		    
			//make sure the waypoints are ordered (some could have been removed if they were blank)
			OrderNumbersOnWaypoints();

		    try
		    {
		        if (HasRoutingErrors)
		        {
		            //Cant Process Way Points  
		        	$('#tab-routes .loadmask').remove();
		        }
		        else
		        {
		        	//manage print page or bottom table
		        	var tableRows = notPrintEmailPage ? $('#Routing-Table .waypoint-row') : $( window.opener.document.getElementById('Routing-Table') ).find('.waypoint-row');
		        	
		        	//set up draggable routes/reset
		        	MA.Routing.mapComponents.changeIndex = 0;
		        	if(MA.Routing.mapComponents.displayRoute == null) {
		        		var dragOptions = {
	        				draggable: true,
	        				suppressInfoWindows : true,
	        				map : MA.map,
	        				hideRouteList : true,
	        				markerOptions : {
	        					icon: {
									path: google.maps.SymbolPath.CIRCLE,
									fillColor: '#E7E7E7',
									fillOpacity : 1,
									strokeColor : '#000000',
									strokeWeight : 1,
									scale: 3
								}
							}
		        		};
		        		MA.Routing.mapComponents.displayRoute = new google.maps.DirectionsRenderer(dragOptions);

		        		//add listener
		        		google.maps.event.addListener(MA.Routing.mapComponents.displayRoute, 'directions_changed', function() {
		        			if(MA.Routing.mapComponents.changeIndex > 0) {
								var directions = MA.Routing.mapComponents.displayRoute.getDirections();
								if (directions.status == google.maps.DirectionsStatus.OK) {
		                            //check the total number of points returned
									var request = directions.request;

									//show warning if the drag limit has been reached
									if(request.waypoints.length > 23) {
										NotifyError("Route modification warning.", "Only 25 points are allowed for draggable routes.  Please use the white dots to modify the route further.");
									}
									else {
										//store the direction as a data object for access on print email
										$('#Routing-Table').data('dragRoute',$.extend({},directions));
										var route = directions.routes[0];
										var tableRows = notPrintEmailPage ? $('#Routing-Table .waypoint-row') : $( window.opener.document.getElementById('Routing-Table') ).find('.waypoint-row');
										//recalc the route info
										var totalSeconds = 0;
										var totalMeters = 0;

										//get the rows
										var waypointsArray = [];
										
										//add first row to array always
										var initialWaypoint = {
											lat : tableRows.eq(0).attr('lat'),
					            			long : tableRows.eq(0).attr('long'),
					            			row : tableRows.eq(0)
										};
										waypointsArray.push(initialWaypoint);
										
										//begin loop over other rows
										var currentRow = tableRows.eq(0);
										var nextRow = tableRows.eq(1);
										
										//check for duplicates and skip if needed
										while(nextRow.length > 0)
										{
											//add to good address
											var waypoint = {
												lat : nextRow.attr('lat'),
						            			long : nextRow.attr('long'),
						            			row : nextRow
											};
											waypointsArray.push(waypoint);
											
											//set current row to next non matching
											currentRow = nextRow;

											//skip to next row and repeat
											nextRow = nextRow.next();
											
										}//end check for duplicates
										var currentWaypointIndex = 1;
										$.each(route.legs, function (index, leg)
										{
											//process leg information
											var distance = $('#UnitType').val() == 'mi' ? (leg.distance.value * 0.000621371).toFixed(1) + ' miles' : (leg.distance.value / 1000).toFixed(1) + ' kilometers';
											var distanceTime = distance + ' / ' + leg.duration.text;
											totalSeconds += leg.duration.value;
											totalMeters += leg.distance.value;
											
											//update waypoint row with leg information
											var $row = waypointsArray[currentWaypointIndex].row;
											$row.find('.distance').text(distanceTime);
											$row.data('leg', leg);
											currentWaypointIndex++;
										});
									}
		                        }
							}
							MA.Routing.mapComponents.changeIndex++;
						});
		        	}

		        	//build array
					var waypointsArray = [];
					
					//add first row to array always
					var initialWaypoint = {
						lat : tableRows.eq(0).attr('lat'),
            			long : tableRows.eq(0).attr('long'),
            			row : tableRows.eq(0)
					};
					waypointsArray.push(initialWaypoint);
					
					//begin loop over other rows
					var currentRow = tableRows.eq(0);
					var nextRow = tableRows.eq(1);
					
					//check for duplicates and skip if needed
					while(nextRow.length > 0)
					{
						//add to good address
						var waypoint = {
							lat : nextRow.attr('lat'),
	            			long : nextRow.attr('long'),
	            			row : nextRow
						};
						waypointsArray.push(waypoint);
						
						//set current row to next non matching
						currentRow = nextRow;

						//skip to next row and repeat
						nextRow = nextRow.next();
						
					}//end check for duplicates
					
		        	//show load image
		        	showForm($('#mapdiv'), '<img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/>', false, null, true);
		            
		            //check for valid points
		            if (waypointsArray.length >= 2)
		            {
		            	//boolean value for draggable route
		            	var routeDraggable = waypointsArray.length <= 20 ? true : false;

		            	//Array for building initial directions
						var GeocodeArray = [];
						
						//batch requests for TomTom
		        		var requestsOut = 0;
						var waypointBatch = [];
						
						//Array for storing all layer information to add to map
						var DirectionsArray = [];
						
		            	//build options for TomTom directions
		            	var routeUnit = notPrintEmailPage ? $('#UnitType').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#UnitType').val();
		            	var routeType = notPrintEmailPage ? $('#Routing-Settings #RouteMode').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#RouteMode').val();
		            	switch (routeType) {
		            		case 'driving' :
		            			routeType = google.maps.TravelMode.DRIVING;
		            			break;
		            		case 'bicycling' :
		            			routeType = google.maps.TravelMode.BICYCLING;
		            			break;
		            		case 'transit' :
		            			routeType = google.maps.TravelMode.TRANSIT;
		            			break;
		            		case 'walking' :
		            			routeType = google.maps.TravelMode.WALKING;
		            			break;
		            		default: 
		            			routeType = google.maps.TravelMode.DRIVING;
		            			break;
		            	}
						var directionsOptions = {
							travelMode: routeType,
							unitSystem: userSettings.RouteDefaults.unit == 'mi' ? google.maps.UnitSystem.IMPERIAL : google.maps.UnitSystem.METRIC,
							durationInTraffic: userSettings.RouteDefaults.displayTrafficTime == false ? false : true
						};

						//set initial batch count
						var batchCount = 0;
						
						//loop over waypoints and get directions
						var currentWaypointIndex = 1;
						var pathParts = {};
						var totalSeconds = 0;
						var totalTrafficSeconds = 0;
						var totalMeters = 0;
						$.each(waypointsArray, function (waypointIndex, waypoint)
						{
							if (!directionsOptions.origin) {
								directionsOptions.origin = new google.maps.LatLng(waypoint.lat, waypoint.long);
							}
							else if (waypointBatch.length == 23 || waypointIndex == waypointsArray.length - 1) {
								directionsOptions.destination = new google.maps.LatLng(waypoint.lat, waypoint.long);
							}
							else {
								waypointBatch.push({ location: new google.maps.LatLng(waypoint.lat, waypoint.long), stopover: true });
							}

							if(directionsOptions.destination)
							{
								requestsOut++; 
								batchCount++;

								//get route legs
								var batchIndex = batchCount;
								MA.Routing.route($.extend({}, { waypoints: waypointBatch }, directionsOptions), function (response)
								{
									//check for errors
									if (!response.success)
									{
										NotifyError("The routing request failed.", "");
						            	hideMessage($('#mapdiv'));
					     				$('#tab-routes .loadmask').remove();
					     				MALog('Failed to process waypoints', response);
					     				requestsOut = 0;
									}
									else
									{
										var route = response.route.routes[0];
										//loop through each leg of the route to build directions
										var path = [];
										$.each(route.legs, function (index, leg)
										{
											//process leg information
											var distance = $('#UnitType').val() == 'mi' ? (leg.distance.value * 0.000621371).toFixed(1) + ' miles' : (leg.distance.value / 1000).toFixed(1) + ' kilometers';
											var distanceTime = distance + ' / ' + leg.duration.text;
											totalSeconds += leg.duration.value;
											totalTrafficSeconds += leg.duration_in_traffic != null ? leg.duration_in_traffic.value : 0;
											totalMeters += leg.distance.value;

											if(!routeDraggable) {
												$.each(leg.steps, function (i, step) {
													path = path.concat(step.path);
												});
											}
											
											//update waypoint row with leg information
											var $row = waypointsArray[currentWaypointIndex].row;
											$row.find('.distance').text(distanceTime);
											$row.data('leg', leg);
											currentWaypointIndex++;
										});
										pathParts[batchIndex] = path;

										//if this is a draggable route, use google service 
										if(routeDraggable) {
											//build polyline
											MA.Routing.mapComponents.displayRoute.setDirections(response.route);
											MA.Routing.mapComponents.displayRoute.setMap(MA.map);
										}
									}
									requestsOut--;
								});
								directionsOptions.origin = directionsOptions.destination;
								directionsOptions.destination = null;
								waypointBatch = [];
							}
						});
						
						//set an interval to track when all the batches have returned
			           	var interval = setInterval(function () 
			           	{
			           		//all legs are done
		            		if(requestsOut == 0)
							{
								//display total time
								var totalHours = Math.floor(totalSeconds / 3600);
								var totalMinutes = Math.floor((totalSeconds - (totalHours * 3600)) / 60);

								//do traffic time
								var totalTrafficHours = Math.floor(totalTrafficSeconds / 3600);
								var totalTrafficMinutes = Math.floor((totalTrafficSeconds - (totalTrafficHours * 3600)) / 60);

								//compare traffic time and normal time
								var totalNormalTime = totalHours == 0 ? totalMinutes + ' min ' : totalHours + ' hour' + (totalHours == 1 ? '' : 's') + ' ' + totalMinutes + ' min ';
								var totalTrafficTime = totalTrafficHours == 0 ? totalTrafficMinutes + ' min ' : totalTrafficHours + ' hour' + (totalTrafficHours == 1 ? '' : 's') + ' ' + totalMinutes + ' min ';


								//display traffic info if needed
								if(totalTrafficSeconds != 0 && totalTrafficSeconds > totalSeconds) {
									$('#totalTime').html('<span style="color: #E54E4E;font-weight: bold;">'+ totalTrafficTime + ' with traffic </span>(' + totalNormalTime +  ' normally)');
								}
								else {
									$('#totalTime').text(totalNormalTime);
								}

								//display total distance
								$('#drivingDistance').text($('#UnitType').val() == 'mi' ? (totalMeters * 0.000621371).toFixed(1) + ' miles' : (totalMeters / 1000).toFixed(1) + ' kilometers');
					
								//build polyline if this was not a draggable route
								if(!routeDraggable) {
									var path = [];
									for (var i = 1; i <= batchCount; i++) {
										path = path.concat(pathParts[i]);
									}
									MA.Routing.mapComponents.polyline = new google.maps.Polyline({
										map: MA.map,
										path: path,
										strokeColor: 'blue',
										strokeWeight: 5,
										strokeOpacity: 0.7
									});
									MA.Map.zoomToFit(MA.Routing.mapComponents.polyline);
								}
								
								//highlight waypoints if needed
								if (pHighlight) {
									highlightWaypoints(true);
								}
								
								//clear this interval because we're done
				            	clearInterval(interval);
				            	
				            	//hide load image
				            	hideMessage($('#mapdiv'));
			     				$('#tab-routes .loadmask').remove();
			     				routesTabSlider.redrawSlider();
			     				
			     				//fire success callback
			     				options.success();
				            }
				        },500);
					}
		        }
		    }
		    catch(err)
		    {
		        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
		        MALog(err);
		        
		        //hide load image
		        hideMessage($('#mapdiv'));
				$('#tab-routes .loadmask').remove();
		    }
		}
		
		function ProcessWayPoints_TimeBased(pHighlight, options)
		{
		    options = $.extend({
		        success: function () {}
		    }, options);
		    
			//make sure the waypoints are ordered (some could have been removed if they were blank) and remove all existing data
			OrderNumbersOnWaypoints();
			$('#Routing-Table .waypoint-row').removeData();

		    try
		    {
		        if (HasRoutingErrors)
		        {
		            //Cant Process Way Points  
		        	$('#tab-routes .loadmask').remove();
		        }
		        else
		        {
		        	//manage print page or bottom table
		        	var tableRows = notPrintEmailPage ? $('#Routing-Table .waypoint-row') : $( window.opener.document.getElementById('Routing-Table') ).find('.waypoint-row');
		        	
		        	//build array
					var waypointsArray = [];
					
					//add first row to array always
					var initialWaypoint = {
						lat : tableRows.eq(0).attr('lat'),
            			long : tableRows.eq(0).attr('long'),
            			row : tableRows.eq(0)
					};
					waypointsArray.push(initialWaypoint);
					
					//begin loop over other rows
					var currentRow = tableRows.eq(0);
					var nextRow = tableRows.eq(1);
					
					//check for duplicates and skip if needed
					while(nextRow.length > 0)
					{
						//add to good address
						var waypoint = {
							lat : nextRow.attr('lat'),
	            			long : nextRow.attr('long'),
	            			row : nextRow
						};
						waypointsArray.push(waypoint);
						
						//set current row to next non matching
						currentRow = nextRow;

						//skip to next row and repeat
						nextRow = nextRow.next();
						
					}//end check for duplicates
					
		        	//show load image
		        	showForm($('#mapdiv'), '<img style="display:block;width:120px;margin:0 auto;" src="' + MALoaddingGIFUrl + '"/>', false, null, true);
		            
		            //check for valid points
		            if (waypointsArray.length >= 2)
		            {
		            	//Array for building initial directions
						var GeocodeArray = [];
						
						//Array for storing all layer information to add to map
						var DirectionsArray = [];
						
		            	//build options for TomTom directions
		            	var routeUnit = notPrintEmailPage ? $('#UnitType').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#UnitType').val();
		            	var routeType = notPrintEmailPage ? $('#Routing-Settings #RouteMode').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#RouteMode').val();
		            	switch (routeType) {
		            		case 'driving' :
		            			routeType = google.maps.TravelMode.DRIVING;
		            			break;
		            		case 'bicycling' :
		            			routeType = google.maps.TravelMode.BICYCLING;
		            			break;
		            		case 'transit' :
		            			routeType = google.maps.TravelMode.TRANSIT;
		            			break;
		            		case 'walking' :
		            			routeType = google.maps.TravelMode.WALKING;
		            			break;
		            		default: 
		            			routeType = google.maps.TravelMode.DRIVING;
		            			break;
		            	}
						var directionsOptions = {
							travelMode: routeType,
							unitSystem: userSettings.RouteDefaults.unit == 'mi' ? google.maps.UnitSystem.IMPERIAL : google.maps.UnitSystem.METRIC,
							durationInTraffic: userSettings.RouteDefaults.displayTrafficTime == false ? false : true
						};
						var directionsTime = (moment($('#timeoptions-routestart').val(), 'h:mm a').hour()*60) + moment($('#timeoptions-routestart').val(), 'h:mm a').minute();
						
						//start time validation
						var currentWaypoint = waypointsArray.shift();
						if (!Waypoint_TimeIsValid(currentWaypoint.row, directionsTime)) {
							hideMessage($('#mapdiv'));
							$('#tab-routes .loadmask').remove();
		     				return;
						}
						
						//add appointment duration to time
						directionsTime = Waypoint_AddTime(currentWaypoint.row, directionsTime);
						
						//process each waypoint
						var routeHasWhitespace = false;
						var path = [];
						var totalSeconds = 0;
						var totalTrafficSeconds = 0;
						var totalMeters = 0;
						function doNextWaypoint () {
							if (waypointsArray.length > 0) 
							{
								var nextWaypoint = waypointsArray.shift();
								MA.Routing.route($.extend({ origin: new google.maps.LatLng(currentWaypoint.lat, currentWaypoint.long), destination: new google.maps.LatLng(nextWaypoint.lat, nextWaypoint.long) }, directionsOptions), function(response) {
									if(!response.success)
									{
										//notify the user
										NotifyError("The routing request failed.", "");
										
										//hide load image
						            	hideMessage($('#mapdiv'));
					     				$('#tab-routes .loadmask').remove();
					     				
					     				//log the error
					     				MALog('Failed to process waypoints (time-based)', status);
									}
									else
									{
										var route = response.route.routes[0];
										//loop through each leg of the route to build directions
										$.each(route.legs, function (index, leg)
										{
											//update the time of day in the route options
											directionsTime += Math.ceil(leg.duration.value/60);
											//process leg information
											var nextWaypointTime = Waypoint_GetTime(nextWaypoint.row);
											var distance = $('#UnitType').val() == 'mi' ? (leg.distance.value * 0.000621371).toFixed(1) + ' miles' : (leg.distance.value / 1000).toFixed(1) + ' kilometers';
											var distanceTime = '<div>'+distance+' / '+leg.duration.text+'</div><div style="padding: 0 !important;">' + moment().startOf('d').add('m', directionsTime).format('h:mm a') + ' - ' + moment().startOf('d').add('m', (nextWaypointTime == '???' ? directionsTime : nextWaypointTime) + Waypoint_GetDuration(nextWaypoint.row)).format('h:mm a') + '</div>';
											totalSeconds += leg.duration.value;
											totalTrafficSeconds += leg.duration_in_traffic != null ? leg.duration_in_traffic.value : 0;
											totalMeters += leg.distance.value;
											$.each(leg.steps, function (i, step) {
												path = path.concat(step.path);
											});

											//update waypoint row with leg information
											var $row = nextWaypoint.row;
											$row.find('.distance').html(distanceTime);
											$row.data('leg', leg);
										});
										
										//time validation
										var nextWaypointStart = nextWaypoint.row.find('.timeoptions-waypointstart').val();
										if (!Waypoint_TimeIsValid(nextWaypoint.row, directionsTime)) 
										{
							            	//hide loading and stop processing
							            	hideMessage($('#mapdiv'));
						     				$('#tab-routes .loadmask').remove();
						     				routesTabSlider.redrawSlider();
						     				return;
										}
										
										//if this appointment is not for over an hour, we'll show a message when done
										var nextWaypointTime = Waypoint_GetTime(nextWaypoint.row);
										if (nextWaypointTime != '???' &&  nextWaypointTime > directionsTime + 60) {
											routeHasWhitespace = true;
										}
										
										//add appointment duration to time if this is not the last waypoint (adding the duration of the last waypoint would break validation if that waypoint had a start time)
										if (waypointsArray.length > 0) {
											directionsTime = Waypoint_AddTime(nextWaypoint.row, directionsTime);
										}
										
										//move to next waypoint
										currentWaypoint = nextWaypoint;
										doNextWaypoint();
									}
								});
							}
							else 
							{
								//last appointment time validation
								if (!Waypoint_TimeIsValid(currentWaypoint.row, directionsTime)) {
				     				return;
								}

								//display total time
								var totalHours = Math.floor(totalSeconds / 3600);
								var totalMinutes = Math.floor((totalSeconds - (totalHours * 3600)) / 60);

								//do traffic time
								var totalTrafficHours = Math.floor(totalTrafficSeconds / 3600);
								var totalTrafficMinutes = Math.floor((totalTrafficSeconds - (totalTrafficHours * 3600)) / 60);

								//compare traffic time and normal time
								var totalNormalTime = totalHours == 0 ? totalMinutes + ' min ' : totalHours + ' hour' + (totalHours == 1 ? '' : 's') + ' ' + totalMinutes + ' min ';
								var totalTrafficTime = totalTrafficHours == 0 ? totalTrafficMinutes + ' min ' : totalTrafficHours + ' hour' + (totalTrafficHours == 1 ? '' : 's') + ' ' + totalMinutes + ' min ';


								//display traffic info if needed
								if(totalTrafficSeconds != 0 && totalTrafficSeconds > totalSeconds) {
									$('#totalTime').html('<span style="color: #E54E4E;font-weight: bold;">'+ totalTrafficTime + ' with traffic </span>(' + totalNormalTime +  ' normally)');
								}
								else {
									$('#totalTime').text(totalNormalTime);
								}

								//display total distance
								$('#drivingDistance').text($('#UnitType').val() == 'mi' ? (totalMeters * 0.000621371).toFixed(1) + ' miles' : (totalMeters / 1000).toFixed(1) + ' kilometers');
								
								//build polyline
								MA.Routing.mapComponents.polyline = new google.maps.Polyline({
									map: MA.map,
									path: path,
									strokeColor: 'blue',
									strokeWeight: 5,
									strokeOpacity: 0.7
								});
								MA.Map.zoomToFit(MA.Routing.mapComponents.polyline);

								//highlight waypoints if needed
								if (pHighlight) {
									highlightWaypoints(true);
								}

								//Center the map
								MA.Map.zoomToFit(MA.Routing.mapComponents.polyline);
								
				            	//hide load image
				            	hideMessage($('#mapdiv'));
			     				$('#tab-routes .loadmask').remove();
			     				routesTabSlider.redrawSlider();
			     				
			     				//show a warning if the route has whitespace
			     				if (routeHasWhitespace) {
			     					showWarning($('#tab-routes'), 'Route has at least a 1 hour gap', 3000);
			     				}
			     				
			     				//fire success callback
			     				options.success();
							}
						}
						doNextWaypoint();
					}
		        }
		    }
		    catch(err)
		    {
		        NotifyError("Error!.","Error Occured While Processing Route Waypoints.");
		        MALog(err);
		        
		        //hide load image
		        hideMessage($('#mapdiv'));
				$('#tab-routes .loadmask').remove();
		    }
		}
        
        function removeHighlights(dontUpdateHighlightFlag)
        {
    		$.each(MA.Routing.mapComponents.waypointMarkers, function (index, waypointMarker) {
    			waypointMarker.setMap(null);
    		});
        	MA.Routing.mapComponents.waypointMarkers = [];
        	if(!dontUpdateHighlightFlag) { highlightOnOff = false; }
        }
        
        function highlightWaypoints(toggle)
        {
        	removeHighlights(true);
        	
        	var show = true;
        	if(toggle) { show = !highlightOnOff; }
        	
        	if(!show) { 
        		highlightOnOff = false;
        		$('.highlightwaypoints').css('opacity', 0.25); 
        	}
        	else
        	{
        		highlightOnOff = true;
        		$('.highlightwaypoints').css('opacity', 1);
        		
        		var $routingTable = notPrintEmailPage ? $('#Routing-Table') : $(window.opener.document.getElementById('Routing-Table'));
        		$routingTable.data('waypointMarkers', $routingTable.data('waypointMarkers') || []);
        		
        		var lockOffset = $routingTable.find('.waypoint-row.start, .waypoint-row.startend').length > 0 ? 1 : 0;
	        	$routingTable.find('.waypoint-row').each(function(index, waypoint) {
	        		var textLabel = index + 1 - lockOffset;
	        		
	        		//test this waypoint to make sure it has a valid lat/lng
	        		if (!MA.Util.testLatLng($(this).attr('Lat'), $(this).attr('Long'))) {
	        			return;
	        		}
	        		
	        		var waypointMarker;
	        		if($(this).attr('savedqueryid')) {
	        			//find the correct record from the plotted queries
	        			var recData = $routingTable.data('plottedQueries')[$(this).attr('savedqueryid')].data('records');
	        			//create a clickable record
	        			try {
	        				waypointMarker = CreateMarkerFromRecord(recData[$(this).attr('data-id')],{'markerType':'Waypoint', index: textLabel});
	        			}
	        			catch (e) {
	        				//just create a non clickable marker
							if (!(window.ActiveXObject) && "ActiveXObject" in window && !$(this).is('.start, .end, .startend')) {
								waypointMarker = new RichMarker({
									map: MA.map,
									position: new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')),
					                anchor: RichMarkerPosition.BOTTOM,
					                flat: true,
					                dataName : $(this).find('.editable[data-for="name"]').text(),
					                dataAddress : $(this).find('.editable[data-for="address"]').text(),
					                zIndex: 1000,
					                content: $('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel),
					            });
							}
							else {
			        			waypointMarker = new google.maps.Marker({
				        			map: MA.map,
				        			position: new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')),
			        				icon: $(this).is('.start, .end, .startend')
			        					? 	{
												url: $(this).is('.start') || ($(this).is('.startend') && $(this).index() == 0) ? "{!URLFOR($Resource.Leaflet, 'images/route_start_angle.png')}" : "{!URLFOR($Resource.Leaflet, 'images/route_finish_angle.png')}",
												anchor: new google.maps.Point($(this).is('.start') || ($(this).is('.startend') && $(this).index() == 0) ? 31 : 5, 50)
											}
										:	{
												url: 'data:image/svg+xml;base64,' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel))),
												anchor: new google.maps.Point(14, 42)
											}
									, 
			        				layerType: 'waypoint-marker',
			        				dataName : $(this).find('.editable[data-for="name"]').text(),
					                dataAddress : $(this).find('.editable[data-for="address"]').text(),
			        				zIndex: 1000
				        		});
			        		}
			        		google.maps.event.addListener(waypointMarker, 'click', function (e) { waypoint_Click.call(this); });
	        			}
	        		}
	        		else {
		        		//store a waypoint marker for this waypoint
						if (!(window.ActiveXObject) && "ActiveXObject" in window && !$(this).is('.start, .end, .startend')) {
							waypointMarker = new RichMarker({
								map: MA.map,
								position: new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')),
				                anchor: RichMarkerPosition.BOTTOM,
				                flat: true,
				                dataName : $(this).find('.editable[data-for="name"]').text(),
					            dataAddress : $(this).find('.editable[data-for="address"]').text(),
				                zIndex: 1000,
				                content: $('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel),
				            });
						}
						else {
		        			waypointMarker = new google.maps.Marker({
			        			map: MA.map,
			        			position: new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')),
		        				icon: $(this).is('.start, .end, .startend')
		        					? 	{
											url: $(this).is('.start') || ($(this).is('.startend') && $(this).index() == 0) ? "{!URLFOR($Resource.Leaflet, 'images/route_start_angle.png')}" : "{!URLFOR($Resource.Leaflet, 'images/route_finish_angle.png')}",
											anchor: new google.maps.Point($(this).is('.start') || ($(this).is('.startend') && $(this).index() == 0) ? 31 : 5, 50)
										}
									:	{
											url: 'data:image/svg+xml;base64,' + CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, textLabel).replace(/__TEXT__/g, textLabel))),
											anchor: new google.maps.Point(14, 42)
										}
								, 
		        				layerType: 'waypoint-marker',
		        				dataName : $(this).find('.editable[data-for="name"]').text(),
					            dataAddress : $(this).find('.editable[data-for="address"]').text(),
		        				zIndex: 1000
			        		});
		        		}
		        		google.maps.event.addListener(waypointMarker, 'click', function (e) { waypoint_Click.call(this); });
		        	}
	        		MA.Routing.mapComponents.waypointMarkers.push(waypointMarker);

	        		//handle events
	        		google.maps.event.addListener(waypointMarker, 'rightclick', marker_Context);
	        	});
	        }
        }
        
        function ClearDirectionsFromMap()
		{
		    if (MA.Routing.mapComponents.polyline != null) {
		    	MA.Routing.mapComponents.polyline.setMap(null);
		    	MA.Routing.mapComponents.polyline = null;
		    }
		    if(MA.Routing.mapComponents.displayRoute != null) {
		    	MA.Routing.mapComponents.displayRoute.setMap(null);
		    	$('#Routing-Table').removeData('dragRoute');
		    }
		    removeHighlights();
		}
		
		function ClearDirections(options)
		{
		    options = $.extend({
		       loadDefaultLocations: true 
		    }, options);
		    
			$('#tab-routes-route').removeData('route');
		    if (MA.Routing.mapComponents.polyline != null) {
		    	MA.Routing.mapComponents.polyline.setMap(null);
		    	MA.Routing.mapComponents.polyline = null;
		    }
		    if(MA.Routing.mapComponents.displayRoute != null) {
		    	MA.Routing.mapComponents.displayRoute.setMap(null);
		    	$('#Routing-Table').removeData('dragRoute');
		    }
		    removeHighlights();
		    
		    $('#DirectionsOutput').empty();
		    $('#DirectionControls').hide();
		    
		    //Reset Address Elements
		    resetAddressElements(options);
		}
		
		function ShowDirectionsTab()
		{
		    if (!$('#tabs-nav-routes').parent().is('.ui-state-active')) {
		    	$('#tabs-nav-routes').click();
		    }
		    routesTabSlider.goToSlide(1);
		    routesTabSlider.redrawSlider();
		}
		
		function OrderNumbersOnWaypoints()
		{
			//fix any locked waypoints that were moved
        	$('#Routing-Table .waypoint-row.start:not(:first-child)').removeClass('start');
        	$('#Routing-Table .waypoint-row.end:not(:last-child)').removeClass('end');
        	if ($('#Routing-Table .waypoint-row.startend:not(:first-child):not(:last-child)').length > 0) {
        		$('#Routing-Table .waypoint-row.startend:first-child, #Routing-Table .waypoint-row.startend:last-child').remove();
        		$('#Routing-Table .waypoint-row.startend').removeClass('startend');
        	}
        	
        	//relabel
        	var lockOffset = $('#Routing-Table .waypoint-row.start, #Routing-Table .waypoint-row.startend').length > 0 ? 1 : 0;
		    $('#Routing-Table .waypoint-row').each(function(key, value) {
		        $(this).find('.svg-marker-waypoint text').text(key + 1 - lockOffset);
		    });
		    
		    //update summary data
		    $('#tab-routes-route .waypoints-count').text($('#Routing-Table .waypoint-row').length + ' stops');
		    $('#Routing-Table .waypoint-row .distance').text('');
		    $('#drivingDistance, #totalTime').text('');
		    routesTabSlider.redrawSlider();
		}
		function AddAddressRow()
		{
			var $row = $('#routing-templates .waypoint-row').clone();
			$('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').length > 0 ? $row.insertBefore($('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').last()) : $row.appendTo('#Routing-Table .waypoints');
			$row.find('.index').append($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, MA.componentIndex++ + '_table').replace(/__TEXT__/g, ''));
			$row.find('.name').val('').change();
			$row.find('.address').val('').change();
			$row.find('.timeoptions-waypointstart').html($('.timedefaults-routestart').html()).prepend(
				$('<option/>').attr('value', '???').text('???')
			).val('???').change();
			$row.find('.timeoptions-waypointduration').html($('.timedefaults-appointmentduration').html()).val($('.timedefaults-appointmentduration').val()).change();
			$row.find('.notes').val('').change();
		    OrderNumbersOnWaypoints();
		    $('#Routing-Table').slimScroll({ scrollBy: $row.position().top });
		}
		
		function RemoveAddressRow($row)
		{
			$row.remove();
			OrderNumbersOnWaypoints();
			ClearDirectionsFromMap();
		}
		
		function resetAddressElements(options)
		{
		    options = $.extend({
		       loadDefaultLocations: true 
		    }, options);
		    
			//Reset Address Elements
		    $('#Routing-Table .waypoints').empty();
		    $('#routename').val('New Route').change().attr('data-id', null);
		    $('#tab-routes-route .toggle.timebased').toggleClass('active', $('.timedefaults-routetype').val() == 'TimeBased');
			$('#tab-routes-route').toggleClass('timebased', $('.timedefaults-routetype').val() == 'TimeBased');
		    $('#timeoptions-routestart').val($('.timedefaults-routestart').val()).change();
		    $('#timeoptions-routeend').val($('.timedefaults-routeend').val()).change();

		    //populate default start/end locations
		    if (options.loadDefaultLocations) {
    		    var startLocationId = $('.timedefaults-startlocation').attr('data-id');
    		    var endLocationId = $('.timedefaults-endlocation').attr('data-id');
    		    if (startLocationId) {
    		    	$.ajax({
    		    		url: MA.resources.FavoriteLocations+"?securityToken={!securityToken}&action=getLocationInfo&core.apexpages.devmode.url=0",
    		    		type: 'POST',
    		    		dataType: 'JSON',
    		    		data: { folderId: startLocationId },
    		    		success: function (response) {
    		    			if (response.data.locations.length > 0)
    		    			{
    		    			    AddFavoriteToTrip(removeNamespace('{!namespace}', response.data.locations[0]), { lockType: startLocationId == endLocationId ? 'Both' : 'Start' });
    		    			}
    		    		}
    		    	});
    		    }
    		    if (endLocationId && endLocationId != startLocationId) {
    		    	$.ajax({
    		    		url: MA.resources.FavoriteLocations+"?securityToken={!securityToken}&action=getLocationInfo&core.apexpages.devmode.url=0",
    		    		type: 'POST',
    		    		dataType: 'JSON',
    		    		data: { folderId: endLocationId },
    		    		success: function (response) {
    		    			if (response.data.locations.length > 0)
    		    			{
    		    			    AddFavoriteToTrip(removeNamespace('{!namespace}', response.data.locations[0]), { lockType: 'End' });
    		    			}
    		    		}
    		    	});
    		    }
		    }

		    OrderNumbersOnWaypoints();
		}
		
		/***********************************
        *	Route Optimization
        **********************************/
        
        function optimizeRoute()
        {
            try {  totango.track('Optimize Route', 'MapAnything'); } catch(err) { }
            
        	//used time based optimization if needed
        	if ($('#tab-routes-route').is('.timebased')) {
        		optimizeRoute_TimeBased();
        		return;
        	}
        
        	//loadmask
        	$('#tab-routes').append('<div class="loadmask"></div>');
        
        	geocodeWaypoints(function (response) {
        		
        		//check for errors
        		if (!response.success)
			    {
			    	currentState = '';
			    	try {
			    		$currentStateGrowl = growlError($currentStateGrowl, 'Unable to optimize route: bad geocode');
			    	}
			    	catch(err) {
			    		$currentStateGrowl = growlError($('#growl-wrapper'), 'Unable to optimize route: bad geocode');
			    	}
			    	return;
			    }
			    
			    var $currentRow = $('#Routing-Table .waypoint-row').first();
			    while ($currentRow.nextAll().length > 1)
			    {
			    	//find the next row based on distance to the current row
			    	var $nextRow;
			    	var distanceToNextRow = -1;
			    	$currentRow.nextAll().each(function () {
			    		if (!$(this).is('.end, .startend')) {
				    		var distanceToThisRow = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng($currentRow.attr('Lat'), $currentRow.attr('Long')), new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')));
				    		if (distanceToNextRow == -1 || distanceToNextRow > distanceToThisRow) {
				    			distanceToNextRow = distanceToThisRow;
				    			$nextRow = $(this);
				    		}
				    	}
			    	});
			    	
			    	//insert the next row after the current row
			    	$nextRow.insertAfter($currentRow);
			    	
			    	//update the current row
			    	$currentRow = $nextRow;
			    }
			    OrderNumbersOnWaypoints();
			    $currentStateGrowl.remove();
			    
			    //remove loadmask
			    $('#tab-routes .loadmask').remove();
			    
			    //get directions
			    GetDirections(true);
        	});
        }
        
        function orderTimeBasedWaypoints () {
            
        }
        
        function optimizeRoute_TimeBased()
        {
        	//loadmask
        	$('#tab-routes').append('<div class="loadmask"></div>');
        
        	MA.Routing.optimizationLog = 'Geocoding Waypoints...';
        	geocodeWaypoints(function (response) {
        		
        		//check for errors
        		if (!response.success)
			    {
			    	MA.Routing.optimizationLog += 'Error';
			    	currentState = '';
			    	try {
			    		$currentStateGrowl = growlError($currentStateGrowl, 'Unable to optimize route: bad geocode');
			    	}
			    	catch(err) {
			    		$currentStateGrowl = growlError($('#growl-wrapper'), 'Unable to optimize route: bad geocode');
			    	}
			    	return;
			    }
			    MA.Routing.optimizationLog += 'Done\n';
			    
			    //build options for directions
            	var routeUnit = notPrintEmailPage ? $('#UnitType').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#UnitType').val();
            	var routeType = notPrintEmailPage ? $('#Routing-Settings #RouteMode').val() : $( window.opener.document.getElementById('Routing-Settings') ).find('#RouteMode').val();
				var directionsOptions = {
					travelMode: google.maps.TravelMode.DRIVING,
					unitSystem: userSettings.RouteDefaults.unit == 'mi' ? google.maps.UnitSystem.IMPERIAL : google.maps.UnitSystem.METRIC,
					durationInTraffic: userSettings.RouteDefaults.displayTrafficTime == false ? false : true
				};
            	
            	/* Look Here - departure times are not supported */
				var options = {
					day: $('#tab-routes-route').data('route') 
						? moment($('#tab-routes-route').data('route').Date__c).format('dddd').toLowerCase()
						: moment().format('dddd').toLowerCase(),
					time: (moment($('#timeoptions-routestart').val(), 'h:mm a').hour()*60) + moment($('#timeoptions-routestart').val(), 'h:mm a').minute(),
					avoidTraffic: true,
					routeType: routeType,
					pathPoints: '18:abs'
				};
			    
			    //start by validating the first waypoint
			    MA.Routing.optimizationLog += 'Validating First Waypoint...';
			    var $currentRow = $('#Routing-Table .waypoint-row').first();
			    if (!Waypoint_TimeIsValid($currentRow, options.time)) {
			    	try {
				    	hideMessage($('#mapdiv'));
						$('#tab-routes .loadmask').remove();
						$currentStateGrowl.remove();
					}
					catch (err) {}
     				return;
			    }
			    MA.Routing.optimizationLog += 'Done\n';
			    
			    //add the duration of this appointment to our timer
			    options.time = Waypoint_AddTime($currentRow, options.time);

				//continue processing until we hit the second to last waypoint
				function doNextRow () {
					MA.Routing.optimizationLog += 'Next Row...';
					if ($currentRow.nextAll().length > 1) {
					
				    	//find the next unscheduled row based on distance to the current row and the next scheduled row
				    	var $nextUnscheduledRow;
				    	var $nextScheduledRow;
				    	var distanceToNextRow = -1;
				    	var nextRowTime = -1;
				    	$currentRow.nextAll().each(function () {
				    		if (!$(this).is('.end, .startend') && $(this).find('.timeoptions-waypointstart').val() == '???') {
					    		var distanceToThisRow = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng($currentRow.attr('Lat'), $currentRow.attr('Long')), new google.maps.LatLng($(this).attr('Lat'), $(this).attr('Long')));
					    		if (distanceToNextRow == -1 || distanceToNextRow > distanceToThisRow) {
					    			distanceToNextRow = distanceToThisRow;
					    			$nextUnscheduledRow = $(this);
					    		}
					    	}
					    	else if (!$(this).is('.end, .startend')) {
					    		var thisRowTime = Waypoint_GetTime($(this));
					    		if (nextRowTime == -1 || nextRowTime > thisRowTime) {
					    			nextRowTime = thisRowTime;
					    			$nextScheduledRow = $(this);
					    		}
					    	}
				    	});
				    	MA.Routing.optimizationLog += '\nNext Unscheduled...' + ($nextUnscheduledRow ? $nextUnscheduledRow.find('.name').val() : 'None');
				    	MA.Routing.optimizationLog += 'Next Scheduled...' + ($nextScheduledRow ? $nextScheduledRow.find('.name').val() : 'None') + '\n';
				    	
				    	//get directions to this row
				    	var $nextRow = $nextUnscheduledRow || $nextScheduledRow;
				    	MA.Routing.route($.extend({ origin: new google.maps.LatLng($currentRow.attr('Lat'), $currentRow.attr('Long')), destination: new google.maps.LatLng($nextRow.attr('Lat'), $nextRow.attr('Long')) }, directionsOptions), function(response) {
							
							//try to get the duration of this trip
							var route = response.route.routes[0];
							var durationMinutes = -1;
							try {
								durationMinutes = Math.ceil(route.legs[0].duration.value/60);
							}
							catch (err) {}
							MA.Routing.optimizationLog += 'Duration To Next...' +durationMinutes+ '\n';
							
							//handle errors
							if(!response.success || durationMinutes < 0) {
								NotifyError("The routing request failed.", "");
				            	hideMessage($('#mapdiv'));
			     				$('#tab-routes .loadmask').remove();
			     				MALog('Failed to get directions to next row (time-based optimization)', response);
							}
							
							//add the travel time to our timer
							options.time += durationMinutes;
							MA.Routing.optimizationLog += 'Adding travel time...' + options.time + '\n';
							
							//validate the next waypoint
							if (!Waypoint_TimeIsValid($nextRow, options.time)) {
								MA.Routing.optimizationLog += 'Time Not Valid\n';
								$currentRow = $('#Routing-Table .waypoint-row').last().prev();	//go to last row just to finish the process
								doNextRow();
			     				return;
						    }
						    
							//add the duration of this appointment to our timer
			    			options.time = Waypoint_AddTime($nextRow, options.time);
			    			MA.Routing.optimizationLog += 'Adding waypoint time...' + options.time + '\n';
			    			
			    			//if this is an unscheduled appointment and there are scheduled appointments later, check the next scheduled appointment to make sure we can still make it.  otherwise we can lock it in  
			    			if ($nextScheduledRow && $nextRow.find('.timeoptions-waypointstart').val() == '???') {
			    				MA.Routing.optimizationLog += 'Checking Next Scheduled Appointment...';
			    				MA.Routing.route($.extend({ origin: new google.maps.LatLng($nextRow.attr('Lat'), $nextRow.attr('Long')), destination: new google.maps.LatLng($nextScheduledRow.attr('Lat'), $nextScheduledRow.attr('Long')) }, directionsOptions), function(response) {
			    				
			    					//try to get the duration of this trip
			    					var route = response.route.routes[0];
									var durationMinutes = -1;
									try {
										durationMinutes = Math.ceil(route.legs[0].duration.value/60);
									}
									catch (err) {}
									
									//handle errors
									if(!response.success || durationMinutes < 0) {
										NotifyError("The routing request failed.", "");
						            	hideMessage($('#mapdiv'));
					     				$('#tab-routes .loadmask').remove();
					     				MALog('Failed to check get directions to next scheduled waypoint (time-based optimization)', response);
									}
								
		    						//validate appointment time
		    						MA.Routing.optimizationLog += options.time +' + '+ durationMinutes + '...';
		    						if (!Waypoint_TimeIsValid($nextScheduledRow, options.time + durationMinutes))
		    						{
		    							//this unscheduled appointment will make us miss the next one so use the next scheduled appointment instead
		    							MA.Routing.optimizationLog += 'Not Okay, Using Next Scheduled\n';
		    							options.time = Waypoint_GetTime($nextScheduledRow) + Waypoint_GetDuration($nextScheduledRow);
		    							$nextRow = $nextScheduledRow;
		    						}
		    						else {
		    							MA.Routing.optimizationLog += 'Okay\n';
		    						}
		    						
		    						//insert the next row after the current row
		    						$nextRow.insertAfter($currentRow);
		    						
		    						//update the current row and process the next one
	    							$currentRow = $nextRow;
	    							doNextRow();

			    				});
			    			}
			    			else {
			    				MA.Routing.optimizationLog += 'No More Scheduled, This Is Fine\n';
			    				
			    				//insert the next row after the current row
						    	$nextRow.insertAfter($currentRow);
						    	
						    	//update the current row and process the next one
						    	$currentRow = $nextRow;
						    	doNextRow();
			    			}
						});
			    	}
			    	else {
			    		MA.Routing.optimizationLog += 'None\n';
			    	
			    		//done
			    		OrderNumbersOnWaypoints();
					    $currentStateGrowl.remove();
					    
					    //remove loadmask
					    $('#tab-routes .loadmask').remove();
					    
					    //get directions
					    GetDirections(true);
			    	}
				}
				doNextRow();
        	});
        }
        
        function Waypoint_GetTime($waypoint)
        {
        	var waypointStart = $waypoint.find('.timeoptions-waypointstart').val();
        	return waypointStart == '???' ? '???' : (moment(waypointStart, 'h:mm a').hour()*60) + moment(waypointStart, 'h:mm a').minute();
        }
        function Waypoint_GetDuration($waypoint)
        {
        	var waypointDurationParts = $waypoint.find('.timeoptions-waypointduration').val().replace(/hr|min|\s/g, '').split(',');
			return (parseInt(waypointDurationParts[0])*60) + parseInt(waypointDurationParts[1]);
        }
        function Waypoint_TimeIsValid($waypoint, time)
        {
			var waypointStart = $waypoint.find('.timeoptions-waypointstart').val();
			var waypointTime = waypointStart == '???' ? '???' : (moment(waypointStart, 'h:mm a').hour()*60) + moment(waypointStart, 'h:mm a').minute();
			var routeEndTime = (moment($('#timeoptions-routeend').val(), 'h:mm a').hour()*60) + moment($('#timeoptions-routeend').val(), 'h:mm a').minute();
			if (waypointTime != '???' && waypointTime < time)
			{
				//waypoint already needed to be hit.  mark as invalid and scroll to it
				$waypoint.addClass('invalid').attr('title', 'Late for appointment: ' + moment().startOf('day').add('m', time).format('h:mm a'));
				$('#Routing-Table').slimScroll({ scrollBy: $waypoint.position().top });
   				return false;
			}
			else if ((waypointTime != '???' && waypointTime > routeEndTime) || (waypointTime == '???' && time > routeEndTime))
			{
				//this waypoint will be hit after the route is supposed to end.  mark as invalid and scroll to it
				$waypoint.addClass('invalid').attr('title', 'Appointment too late: ' + moment().startOf('day').add('m', waypointTime == '???' ? time : waypointTime).format('h:mm a'));
				$('#Routing-Table').slimScroll({ scrollBy: $waypoint.position().top });
   				return false;
			}
			return true;
        }
        function Waypoint_AddTime($waypoint, time)
	    {
	    	var waypointDurationParts = $waypoint.find('.timeoptions-waypointduration').val().replace(/hr|min|\s/g, '').split(',');
			var waypointDurationTime = (parseInt(waypointDurationParts[0])*60) + parseInt(waypointDurationParts[1]);
			var waypointStart = $waypoint.find('.timeoptions-waypointstart').val();
			var waypointStartTime = waypointStart == '???' ? -1 : (moment(waypointStart, 'h:mm a').hour()*60) + moment(waypointStart, 'h:mm a').minute();
			return Math.max(time, waypointStartTime) + waypointDurationTime;
	    }
	    function Waypoint_Lock($waypointRow, type)
	    {
	    	if ($waypointRow.length == 0) { return; }
	    
	    	switch (type)
	    	{
	    		case 'Start':
	    		
			    	//clear existing locks
		   			if ($('#Routing-Table .waypoint-row.startend').length > 1) {
		   				$('#Routing-Table .waypoint-row.startend').last().remove();
		   			}			                			
		   			$waypointRow.removeClass('start end startend');
		   			$('#Routing-Table .waypoint-row.start').removeClass('start');
		   			$('#Routing-Table .waypoint-row.startend').removeClass('startend').addClass('end').insertAfter($('#Routing-Table .waypoint-row').last());
		   			
		   			//lock this one
		   			if ($waypointRow.prev().length != 0) {
		   				$waypointRow.insertBefore($('#Routing-Table .waypoint-row').first());
		   			}
		   			$waypointRow.addClass('start');
		   			OrderNumbersOnWaypoints();
		   			
		   			//update the duration for this waypoint to be 0 (we are assuming this is home...)
		   			$waypointRow.find('.timeoptions-waypointduration').val('0 hr, 0 min').change();

		   		break;

		   		case 'End':
		   		
		   			//clear existing locks
               		if ($('#Routing-Table .waypoint-row.startend').length > 1) {
               			$('#Routing-Table .waypoint-row.startend').last().remove();
               		}	
               		$waypointRow.removeClass('start end startend');
               		$('#Routing-Table .waypoint-row.end').removeClass('end');
               		$('#Routing-Table .waypoint-row.startend').removeClass('startend').addClass('start').remove().insertBefore($('#Routing-Table .waypoint-row').first());
               			
               		//lock this one
               		if ($waypointRow.next().length != 0) {
               			$waypointRow.insertAfter($('#Routing-Table .waypoint-row').last());
               		}
               			
               		$waypointRow.addClass('end');
               		OrderNumbersOnWaypoints();
               		
		   		break;

		   		case 'Both':
		   		
		   			//clear existing locks
		            if ($('#Routing-Table .waypoint-row.startend').length > 1) {
		            	$('#Routing-Table .waypoint-row.startend').last().remove();
		            }	
		            $('#Routing-Table .waypoint-row').removeClass('start end startend');
		               			
		            //lock this one
		            if ($waypointRow.prev().length != 0) {
		            	$waypointRow.insertBefore($('#Routing-Table .waypoint-row').first());
		            }
		            $waypointRow.addClass('startend').clone().removeClass('context-menu-active').insertAfter($('#Routing-Table .waypoint-row').last());
		            OrderNumbersOnWaypoints();
		                			
		            //update the duration for this waypoint to be 0 (we are assuming this is home...)
		            $('#Routing-Table .waypoint-row:first-child, #Routing-Table .waypoint-row:last-child').find('.timeoptions-waypointduration').val('0 hr, 0 min').change();

		   		break;
	   		}
	    }
        
        function geocodeWaypoints(callback)
        {
        	try {
        		$currentStateGrowl = growlLoading($currentStateGrowl, 'Geocoding...');
        	}
	    	catch(err) {
	    		$currentStateGrowl = growlLoading($('#growl-wrapper'), 'Geocoding...');
	    	}
	    	
		    //build array of points
		    WayPointArray = [];
		    var RowsToRemove = [];
		    var tableRows = notPrintEmailPage ? $('#Routing-Table .waypoint-row') : $( window.opener.document.getElementById('Routing-Table') ).find('.waypoint-row');
			$.each(tableRows, function (index, row) {
				var WayPoint = {};
				if (MA.Util.testLatLng($(this).attr('Lat'), $(this).attr('Long')))
				{
					//we have valid coordinates so this does not need to be geocoded
					WayPoint['Done'] = true;
			        WayPoint['WayPointTitle'] = $(this).find('.name').val();
			        WayPoint['lat'] = $(this).attr('Lat');
			        WayPoint['long'] = $(this).attr('Long');
			        WayPoint['Address'] = $(this).find('.address').val();
			        WayPoint['Index'] = index + 1;
			        WayPoint['Row'] = $(this);
			        WayPointArray.push(WayPoint);
				}
				else
				{
					//need to either remove or geocode
					if ($(this).find('.address').val() != "") {
						
						//geocode
						RequiresGeoCoding = true;
						WayPoint['Done'] = false;
				        WayPoint['WayPointTitle'] = $(this).find('.name').val();
				        WayPoint['Address'] = $(this).find('.address').val();
				        WayPoint['Index'] = index + 1;
				        WayPoint['Row'] = $(this);
				        WayPointArray.push(WayPoint);
					}
					else {
					
						//mark this row to be removed
			            $(this).addClass('remove');
					}
				}
			});
			
			//remove rows that we don't need
			$('#Routing-Table .waypoint-row.remove').remove();
			
			//geocode array of points
	    	$.each(WayPointArray, function (index, waypoint) {
	    		if (!waypoint.Done) {
	    			MA.Geocoding.geocode({ address: waypoint.Address }, function (response) {
						if (response.success) {
							waypoint.Done = true;
							waypoint.lat = response.result.Latitude;
					        waypoint.long = response.result.longitude;
					        waypoint.Row.attr({ Lat: response.result.latitude, Long: response.result.longitude }).find('.address, [data-for="address"]').addClass('GoodGeocodeForWaypoint');
					        waypoint.address = response.results.FormattedAddress;
					    }
					    else {
					    	waypoint.Done = true;
					    	waypoint.Row.find('.address, [data-for="address"]').addClass('BadGeocodeForWaypoint');
					    	waypoint.error = true;
					    }
					});
				}
	    	});
		    
		    //loop through and check if done : continue
		    var interval = setInterval(function ()
		    {
		    	var done = true;
		    	var error = false;
		    	$.each(WayPointArray, function (index, waypoint) 
		    	{
		    		if(waypoint.Done == false) {
		    			done = false;
		    		}
		    		else if (waypoint.error) {
		    			error = true;
		    		}
		    	});
		    	
		    	if(done) {
		    		if (error) {
		    			callback({success: false});	
		    		}
		    		else {
		    			callback({success: true});
		    		}
		    		clearInterval(interval);
		    	}
		    },100);
        }
        
        /***********************
        * Routing Settings
        ***********************/
        function ShowRoutingSettings()
        {
        	$('#Routing-Settings').dialog({
        		draggable: false,
        		resizable: false,
        		modal: true
        	});
        }
        function CloseRoutingSettings()
        {
        	try { $('#Routing-Settings').dialog('close'); }
        	catch(err) {}
        }
        
        /***********************
        * Event Integration
        ***********************/
        function ImportEvents()
        {
            try {  totango.track('Import Events for Directions', 'MapAnything'); } catch(err) { }
            
        	//remove existing dialogs
        	$('[id$="importevents-wrapper"]').dialog('destroy').remove();
        
        	//launch new dialog
        	var $dialog = $("<div id='importevents-wrapper' class='loadmask-wrapper'></div>")
        		.append("<h2>Import Events</h2>")
        		.append("<div id='importevents-date' style='margin: 10px 0;' />")
        		.append("<span id='importevents-close' class='link' style='font-size: 10px; line-height: 22px;'>Cancel</span>")
        		.on('click', '#importevents-close', function () {
        			$dialog.dialog('close');
        		})
        	;
        	$dialog.find('#importevents-date').datepicker({
        		onSelect: function (textVal, el) {
        			showLoading($('#importevents-wrapper'), 'Importing...');
        			$.ajax({
						url: MA.resources.RouteCalendarAPI,
					    type: 'POST',
					    dataType: 'JSON',
					    data: {
					    	action: 'getEvents',
					    	securityToken: MA.SecurityToken,
					    	start: moment(textVal).startOf('day').format('YYYY-MM-DD HH:mm:ss'),
					    	end: moment(textVal).endOf('day').format('YYYY-MM-DD HH:mm:ss')
					    },
				    	success: function (response) 
				    	{
				    		if (response.success) {
				    		    $.each(response.data.events, function (eventId, e) {
				    		        var opts = {};
				    		        
				    		        //event base object options
        			    			if (response.data.eventBaseObject) {
        			    				removeNamespace(MA.Namespace, response.data.eventBaseObject);
        			    				$.extend(opts, {
        				        			title: e.event.Subject,
        				        			latitude: extractValue(e.event, response.data.eventBaseObject.Latitude__c),
        				        			longitude: extractValue(e.event, response.data.eventBaseObject.Longitude__c),
        				        			verifiedLatitude: extractValue(e.event, response.data.eventBaseObject.VerifiedLatitude__c),
        				        			verifiedLongitude: extractValue(e.event, response.data.eventBaseObject.VerifiedLongitude__c),
        				        			markerAddress: extractValue(e.event, response.data.eventBaseObject.Street__c) + "," + extractValue(e.record, response.data.eventBaseObject.City__c) + " " + extractValue(e.record, response.data.eventBaseObject.State__c) + "," + extractValue(e.record, response.data.eventBaseObject.PostalCode__c) + (extractValue(e.record, response.data.eventBaseObject.Country__c) == '' ? '' : ','+extractValue(e.record, response.data.eventBaseObject.Country__c))
        				        		});
        				        		opts.markerLatitude = (opts.verifiedLatitude || opts.latitude);
        				        		opts.markerLongitude = (opts.verifiedLongitude || opts.longitude);
        			    			}
        
        			    			//related record options
        			    			if (e.record) {
        			    				var baseObj = removeNamespace(MA.Namespace, response.data.baseObjects[(e.event.What || e.event.Who).Type]);
        
        			    				//extend the title
        			    				if (e.record.Name) {
        			    					if(opts.title == null) {
        			    						opts.title = e.event.Subject;
        			    					}
        			    					
        			    					opts.title += ' (' +e.record.Name+ ')';
        			    				}
        
        				        		//extend with coordinate and address information from the record if we haven't already gotten them from the event
        				        		if (!MA.Util.testLatLng(opts.markerLatitude, opts.markerLongitude)) {
        					        		$.extend(opts, {
        					        			latitude: extractValue(e.record, baseObj.Latitude__c),
        					        			longitude: extractValue(e.record, baseObj.Longitude__c),
        					        			verifiedLatitude: extractValue(e.record, baseObj.VerifiedLatitude__c),
        					        			verifiedLongitude: extractValue(e.record, baseObj.VerifiedLongitude__c),
        					        			markerAddress: extractValue(e.record, baseObj.Street__c) + "," + extractValue(e.record, baseObj.City__c) + " " + extractValue(e.record, baseObj.State__c) + "," + extractValue(e.record, baseObj.PostalCode__c) + (extractValue(e.record, baseObj.Country__c) == '' ? '' : ','+extractValue(e.record, baseObj.Country__c))
        					        		});
        					        		opts.markerLatitude = (opts.verifiedLatitude || opts.latitude);
        					        		opts.markerLongitude = (opts.verifiedLongitude || opts.longitude);
        					        	}
        			    			}
        			    			
        			        		//add waypoint
        			        		var $row = $('#routing-templates .waypoint-row').clone().attr({ 
								    	Lat				: opts.markerLatitude, 
								    	Long			: opts.markerLongitude,
								    	Address			: opts.markerAddress,
								    	WayPointTitle	: opts.title || opts.markerAddress,
								    	savedQueryId	: ''
								    });
								    $('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').length > 0 ? $row.insertBefore($('#Routing-Table .waypoint-row.end, #Routing-Table .waypoint-row.startend').last()) : $row.appendTo('#Routing-Table .waypoints');
								    $row.find('.index').append($('#templates .svg-marker-waypoint').clone().wrap('<div/>').parent().html().replace(/__INDEX__/g, (MA.componentIndex++)+'_row').replace(/__TEXT__/g, ''));
									$row.find('.address').attr('markerposition', JSON.stringify({ latitude: opts.markerLatitude, longitude: opts.markerLongitude }));
								    $row.find('.name').val(opts.title || opts.markerAddress).change().prop('readonly', true).addClass('DisabledWaypoint').prev().attr('onclick', "window.open('/"+eventId+"');").css('cursor', 'pointer').attr('title', opts.title || opts.markerAddress);
								    $row.find('.address').val(opts.markerAddress).prop('disabled', true).addClass('DisabledWaypoint').prev().text(opts.markerAddress);
								    $row.find('.timeoptions-waypointstart').html($('.timedefaults-routestart').html()).prepend(
										$('<option/>').attr('value', '???').text('???')
									).val('???').change();
									$row.find('.timeoptions-waypointduration').html($('.timedefaults-appointmentduration').html()).val($('.timedefaults-appointmentduration').val()).change();
				                    $row.find('.notes').val('').change();
				                    
				                    //add time-based values
									var durationMinutes = e.event.DurationInMinutes;
									var roundUp = 15 - (durationMinutes % 15);
									durationMinutes = roundUp < 8 ?  durationMinutes + roundUp : durationMinutes - (15 - roundUp);
									console.log(e.event);
									$row.find('.timeoptions-waypointstart').val(moment(e.event.StartDateTime).format('h:mm a')).change();
									$row.find('.timeoptions-waypointduration').val(Math.floor(durationMinutes/60) + ' hr, ' + (durationMinutes%60) + ' min').change();
									//if (!$('#tab-routes-route').is('.timebased')) {
										//$('#tab-routes-route .toggle.timebased').click();
									//}
							
									OrderNumbersOnWaypoints();
								    $('#Routing-Table').slimScroll({ scrollBy: $row.position().top });
				    		    });
				    		    $dialog.dialog('close');
				    		}
				    	}
				    });
        		}
        	}).find('.ui-datepicker-inline').css('font-size', '16px');
        	$dialog.dialog({ draggable: false, resizable: false, modal: true });
        }
        
        /***********************
        * Calendar Test
        ******************/
        function createCalendar(options) {
        
			//standard options
			var todayDate = new Date();
			var month = options.month;
			var year = options.year;
			var routes = options.routes;
			
			//setup initial month layout
			var d = new Date( year, month, 0 );
			var monthLength = d.getDate();
			var firstDay = new Date( year, month - 1, 1 );

			// day of the week to start for each month
			var startingDay = firstDay.getDay(); 
			
			//create calendar
			var $calendar = $('<div/>').addClass('calendar-wrapper');
			
			//add first week
			var $week = $('<div/>').addClass('calendar-row').appendTo($calendar);
			
			//start at day1
			var day = 1;

			//create rows (weeks), just stop at 7
			for ( var i = 0; i < 7; i++ ) {
			
				//create days inside rows
				for ( var j = 0; j <= 6; j++ ) {
					
					var $cell = $('<div/>').addClass('full-calendar-cell');
					
					//set starting position for the selected month
					//number of blank cells at beginning
					var pos = startingDay - 1;
					var p = pos < 0 ? 6 + pos + 1 : pos;
					
					//if day in month create info and increase day count else inner content is empty
					if ( day <= monthLength && ( i > 0 || j >= p ) ) 
					{
						$cell.attr('onClick','selectSaveDay(this); return false;');
						var $calDate = $('<span/>').addClass('calendar-date').text(day);
						$calDate.appendTo($cell);
						
						if(routes[day])
						{
							$.each(routes[day], function(index, route) {
								//select 'save as'
		        				if(saveId != route.Id) { 
		        					var $routeInfo = $('<div/>').addClass('route').attr('id', route.Id).attr('data-name', route.Name).text(route.Name).appendTo($cell);
		        				}
		        				//select 'save', update selection
		        				else {
		        					//create div
		        					var $updateInfo = $('<div/>').addClass('route').attr('id', 'newRoute');
		        					var $textinfo = $('<input/>').attr('id', 'savename').val($('#routename').val()).appendTo($updateInfo);
		        					$updateInfo.appendTo($cell);
		        				}
		        			});
		        			
							$cell.addClass('saved').appendTo($week);
						}
						else 
						{
							$cell.attr('onClick','selectSaveDay(this); return false;').appendTo($week);
						}
						day++;
					}
					else
					{
						$cell.addClass('disabled').appendTo($week);
					}
				}

				// stop making rows if we've run out of days
				if (day > monthLength) {
					break;
				}
				//create another row
				else {
					var $week = $('<div/>').addClass('calendar-row').appendTo($calendar);
				}

			}
			
			return $calendar;
		}
        
		
	</script>
	
	<!-- Routes Slider -->
	<div id='tab-routes-slider'>

		<!-- Routes Slide -->
		<div id='tab-routes-routes'>
		
			<!-- Header -->
			<div style='padding: 0 0 10px 10px;'>
	    		<span style='color: #2265BB; font-size: 18px;'>{!$Label.MARoutes_Routes_Title}</span>
	    		<img title="{!$Label.MA_Go_To_Current_Route}" src="{! URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Compass.png') }" onclick="routesTabSlider.goToNextSlide();" style='position: absolute; right: 5px; height: 18px; cursor: pointer;' />
	    	</div>
		
	    	<!-- Route Options -->
	    	<div id='routesOptions' style="margin-bottom: 10px; text-align: center; border-top: 2px solid #3083C7;">
	    		<select id="routemonth">
	               	<option value="1">{!$Label.MA_January}</option>
	               	<option value="2">{!$Label.MA_February}</option>
	               	<option value="3">{!$Label.MA_March}</option>
	               	<option value="4">{!$Label.MA_April}</option>
	               	<option value="5">{!$Label.MA_May}</option>
	               	<option value="6">{!$Label.MA_June}</option>
	               	<option value="7">{!$Label.MA_July}</option>
	               	<option value="8">{!$Label.MA_August}</option>
	               	<option value="9">{!$Label.MA_September}</option>
	               	<option value="10">{!$Label.MA_October}</option>
	               	<option value="11">{!$Label.MA_November}</option>
	               	<option value="12">{!$Label.MA_December}</option>
	            </select>
	            <select id="routeyear">
	            </select> 
	            <input type='text' id='routeactiveusers' class='autocomplete' style='width: 80px;' />
	            <input type='hidden' id='routeactiveusers-value' />
	        </div>
	    	
	    	<!-- Routes Calendar -->
	    	<div id='routesCalendar' style="overflow: auto; width: 100%; padding: 0;">
	    		<table id='routeCalendarTable' cellspacing="0px" style='width: 100%; border-top: 1px solid silver; background: rgba(255, 255, 255, 0.5);'>
	    		</table>
	        </div>
	        
	    </div><!-- End Routes Slide -->
	    
	    <!-- Route Slide -->
	    <div id='tab-routes-route'>
	    
	    	<!-- Back to Routes -->
	    	<img title="{!$Label.MA_Back_To_Routes}" src="{! URLFOR($Resource.MapAnything, 'images/ui-icons/calenderb.png') }" onclick="routesTabSlider.goToPrevSlide();" style='position: absolute; right: 5px; height: 18px; cursor: pointer;' />
	    
	    	<!-- Basic Info -->
	    	<div class='route-header' style='padding: 0 0 10px 10px;'>
	    	
	    		<!-- Route Name -->
	    		<span class='editable' data-for='routename' style='display: inline-block; max-width: 200px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;'></span>
	    		<input type='text' id='routename' maxlength='80' style='display: none;' />
	    		
	    		<!-- Toggles -->
	    		<div title="{!$Label.MA_Highlight_Waypoints}" onclick="highlightWaypoints(true);" class='highlightwaypoints' style='opacity: 0.25; display: inline-block; padding: 0; cursor: pointer;'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Waypoint.png')}" style='height: 16px;' /></div>
	    		<div title="{!$Label.MA_Time_Based_Route}" class='toggle timebased'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Time.png')}" /></div>
	    		
	    		<!-- Time Options -->
	    		<div class='timeoptions'>
	    		
	    			<!-- Route Start -->
	    			<span class='editable' data-for='timeoptions-routestart'></span>
	    			<select id='timeoptions-routestart' style='display: none;'></select>
	    			
	    			<span> - </span>
	    			
	    			<!-- Route End -->
	    			<span class='editable' data-for='timeoptions-routeend'></span>
	    			<select id='timeoptions-routeend' style='display: none;'></select>
	    			
	    		</div>
	    		
	    	</div>
	    
	    	<!-- Actions -->
		    <div id='Routing-Actions' style="font-size: 14px; border-top: 2px solid #3083C7;">
        		
        		<!-- Directions Buttons -->
	        	<div id='Routing-Buttons' style="position: relative;">
	        		<div align="center" title="{!$Label.MA_Save}" class='top-row-button' style='opacity: 1;'>
			    		<img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Save.png')}" />
	    				<div style='width: 0px; height: 0px; border-style: solid; border-width: 0 0 6px 6px; border-color: transparent transparent #95A2AD transparent; position: relative; left: 11px; bottom: 2px;'></div>
	    				<div style='display:none; width: 150px; padding: 0 3px; top:38px; z-index: 1;' class='menu'>
						    <table class="DefaultViewOverlayTable" style="width:150px;" cellpadding="0" cellspacing="5">
						        <tr class='mapview-row'>
						        	<td style='padding: 5px;' onclick="PrepareSaveRoutePopup('update');">
							        	<div style='position: relative; top: 8px; width: 0px; height: 0px; border-style: solid; border-width: 3px 0 3px 6px; border-color: transparent transparent transparent #3685c5;'></div>
							            <div style='position: relative; bottom: 2px; margin-left: 15px; font-size: 12px;'>{!$Label.Ma_Save}</div>
									</td>
								</tr>
								<tr class='mapview-row'>
									<td style='padding: 5px;' onclick="PrepareSaveRoutePopup('insert');">
										<div style='position: relative; top: 8px; width: 0px; height: 0px; border-style: solid; border-width: 3px 0 3px 6px; border-color: transparent transparent transparent #3685c5;'></div>
							            <div style='position: relative; bottom: 2px; margin-left: 15px; font-size: 12px;'>{!$Label.MA_SaveAs}</div>
									</td>
								</tr>
							</table>
						</div>
					</div>
			    	<div align="center" title="{!$Label.MA_Print_Email}" onclick="PrintEmailDirections();" class='top-row-button'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Print.png')}" /></div>
			    	<div align="center" title="{!$Label.MA_Optimize}" onclick="optimizeRoute();" class='top-row-button'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Optimize.png')}" /></div>			    	
			    	<div align="center" title="{!$Label.MA_Get_Directions}" onclick="GetDirections(true);" class='top-row-button'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Directions.png')}" /></div>
			    	<div align="center" title="Import Events" onclick="ImportEvents();" class='top-row-button'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_ImportEvents.png')}" /></div>
					<div align="center" title="{!$Label.MA_Clear}" onclick="ClearDirections();" class='top-row-button'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Clear.png')}" /></div>
					<div align="center" title="{!$Label.MASettings_Settings}" onclick="LaunchSettings({page:'routes'});" class='top-row-button' style='float: right; opacity: 1;'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/settings.png')}" /></div>
					<div align="center" title="{!$Label.MA_Add_Row}" onclick="AddAddressRow();" class='top-row-button' style='float: right;'><img src="{!URLFOR($Resource.MapAnything, 'images/ui-icons/Routing_Add.png')}" /></div>
	        	</div>
	            
        	</div>
			
        	<!-- Waypoints Table -->
        	<div class='wrapper-shadow'>
	        	<div id='Routing-Table' style='overflow: hidden; height: auto !important; max-height: 400px; padding: 0;'>
	        		<div class='waypoints' style='padding: 0;'></div>
	        	</div>
        	</div>
        	
        	<!-- Totals -->
        	<div style='padding: 5px; text-align: center;'>
        		<span style='font-weight: bold; font-size: 10px;'>{!$Label.MARoutes_Total_Trip}: </span>
        		<span class='waypoints-count' style='font-size: 10px; color: black;'></span>
        		<span style='font-weight: bold; font-size: 10px;'>, </span>
        		<span id='drivingDistance' style='font-size: 10px; color: black;'></span>
        		<span style='font-weight: bold; font-size: 10px;'>, </span>
        		<span id='totalTime' style='font-size: 10px; color: black;'></span>
        	</div>
	    
	    </div><!-- End Waypoints Slide -->
	    
	</div><!-- End Routes Slider -->
	
	<!-- Routing Templates -->
	<div id='routing-templates' style='display: none;'>
	
		<!-- Waypoint Row -->
		<div class='waypoint-row'>
			
			<!-- Basic -->
			<div class='waypoint-row-basic'>
				
				<!-- Index -->
				<div class='index'>
					<div class='flag'>
						<img src="{! URLFOR($Resource.MapAnything, 'images/Routing_Start.png') }" class='start' />
						<img src="{! URLFOR($Resource.MapAnything, 'images/Routing_Finish.png') }" class='end' />
					</div>
				</div>
				
				<!-- Delete Button -->
		    	<div class='deleteDiv' onclick="RemoveAddressRow($(this).closest('.waypoint-row'));">X</div>
				
				<!-- Info -->
				<div>
					<div class='editable' data-for='name'></div>
					<input type='text' class='name' style='display: none;' />
					
					<div class='editable' data-for='address'></div>
					<input type='text' class='address' style='display: none;' />
					
					<div class='timeoptions'>
						<span class="editable" data-for="timeoptions-waypointstart"></span>
		    			<select class="timeoptions-waypointstart" style="display: none;"></select>
		    			
		    			<span> - </span>
		    			
		    			<span class="editable" data-for="timeoptions-waypointduration"></span>
		    			<select class="timeoptions-waypointduration" style="display: none;"></select>
					</div>
					
					<div class='distance' style='padding: 0; color: #757575; font-size: 10px;'></div>
				</div>
			
			</div>
			
			<!-- Additional Info -->
			<div class='additionalinfo-button'>...</div>
			<div class='additionalinfo' style='display: none;'>
			
				<b class='additionalinfo-header' data-for='tooltips' style='display: none;'>{!$Label.MA_Tooltips}</b>
				<div class='tooltips' style='display: none;'></div>
			
				<b class='additionalinfo-header' data-for='notes'>{!$Label.MA_Notes}</b>
				<div class='editable' data-for='notes'></div>
				<textarea class='notes' style='display: none;'></textarea>
				
			</div>
			
		</div>
		
	</div>

</apex:component>