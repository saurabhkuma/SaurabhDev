<apex:component >
	
	<!-- CSS -->
	<style type='text/css'>
	
		/*Traffic Icons*/
		#mapcontainer .leaflet-marker-pane .traffic-icon
		{
			position: absolute;
			height: 28px !important;
			width: 28px !important;
			margin-top: -14px !important;
			margin-left: -14px !important;
		}
		
		#mapcontainer .leaflet-popup-content .traffic-icon
		{
			float:left;
			position: relative;
			height: 28px !important;
			width: 28px !important;
			top: 3px;
		}
		
		#mapcontainer .leaflet-marker-pane .traffic-icon:hover
		{
			position: absolute;
			height: 56px !important;
			width: 56px !important;
			margin-top: -28px !important;
			margin-left: -28px !important;
			background-position: -28px 0 !important;
			z-index: 1000 !important;
		}
		
		#mapcontainer .leaflet-marker-pane .traffic-cluster
		{
			position: absolute;
			width: 32px !important;
			height: 16px !important;
			margin-top: -16px !important;
			margin-left: -16px !important;
			padding-top: 17px !important;
			text-align: center;
			color: white;
			font-size: 9px;
		}
		
		#mapcontainer .leaflet-popup-content .delay, #mapcontainer .leaflet-popup-content .length, #mapcontainer .leaflet-popup-content .road
		{
			display: inline-table;
			position: relative;
		}
		#mapcontainer .leaflet-marker-pane .traffic-cluster:hover
		{
			position: absolute;
			width: 56px !important;
			height: 25px !important;
			margin-top: -28px !important;
			margin-left: -28px !important;
			padding-top: 31px !important;
			background-position: -32px 0;
			font-size: 14px;
			z-index: 1000 !important;
		}
		
		/* Traffic Clusters*/
		#mapcontainer  .unknown-cluster
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/cluster-unknown.png')}');
		}
		
		#mapcontainer  .minor-cluster
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/cluster-minor.png')}');
		}
		
		#mapcontainer  .moderate-cluster
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/cluster-moderate.png')}');
		}
		
		#mapcontainer  .major-cluster
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/cluster-major.png')}');
		}
		
		/*Traffic Markers*/
		#mapcontainer  .traffic-0-1, 
		#mapcontainer  .traffic-2-1, 
		#mapcontainer  .traffic-3-1, 
		#mapcontainer  .traffic-4-1, 
		#mapcontainer  .traffic-5-1, 
		#mapcontainer  .traffic-6-1, 
		#mapcontainer  .traffic-10-1, 
		#mapcontainer  .traffic-11-1, 
		#mapcontainer  .traffic-12-1
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/traffic-minor.png')}');
		}
		
		#mapcontainer .traffic-0-2, 
		#mapcontainer .traffic-2-2, 
		#mapcontainer .traffic-3-2, 
		#mapcontainer .traffic-4-2, 
		#mapcontainer .traffic-5-2, 
		#mapcontainer .traffic-6-2, 
		#mapcontainer .traffic-10-2, 
		#mapcontainer .traffic-11-2, 
		#mapcontainer .traffic-12-2
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/traffic-moderate.png')}');
		}
		
		#mapcontainer  .traffic-0-3, 
		#mapcontainer  .traffic-2-3, 
		#mapcontainer  .traffic-3-3, 
		#mapcontainer  .traffic-4-3, 
		#mapcontainer  .traffic-5-3, 
		#mapcontainer  .traffic-6-3, 
		#mapcontainer  .traffic-10-3, 
		#mapcontainer  .traffic-11-3, 
		#mapcontainer  .traffic-12-3
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/traffic-major.png')}');
		}
		
		#mapcontainer  .traffic-1-0 { background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/accdnt-unknown.png')}'); }
		#mapcontainer  .traffic-1-1 { background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/accdnt-minor.png')}'); }
		#mapcontainer  .traffic-1-2 { background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/accdnt-moderate.png')}'); }
		#mapcontainer  .traffic-1-3 { background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/accdnt-major.png')}'); }
		#mapcontainer  .traffic-1-4 { background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/accdnt-unknown.png')}'); }
		
		#mapcontainer  .traffic-7-0, 
		#mapcontainer  .traffic-7-1, 
		#mapcontainer  .traffic-7-2, 
		#mapcontainer  .traffic-7-3, 
		#mapcontainer  .traffic-7-4
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/closed-unknown.png')}');
		}
		
		#mapcontainer  .traffic-8-0, 
		#mapcontainer  .traffic-8-1, 
		#mapcontainer  .traffic-8-2, 
		#mapcontainer  .traffic-8-3, 
		#mapcontainer  .traffic-8-4
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/block-unknown.png')}');
		}
		
		#mapcontainer  .traffic-9-0, 
		#mapcontainer  .traffic-9-1, 
		#mapcontainer  .traffic-9-2, 
		#mapcontainer  .traffic-9-3, 
		#mapcontainer  .traffic-9-4
		{
			background: url('{!URLFOR($Resource.TomTom, 'images/traffic-icons/rworks-unknown.png')}');
		}
	
	</style>

	<!-- JS -->
	<script type='text/javascript'>
	
		/*********************
	    *	On Load 
	    *********************/
	    var trafficZoomIndex = 0;
	    MA.on('mapready', function () {
	    
	    	//handle clicking the traffic toggle
	    	$('#ShowTrafficButton').click(function() {
		        trafficZoomIndex++;
		        var options = {};
		        options.trafficZoomIndex = trafficZoomIndex;
		        ToggleTrafficOverlay();
		        refreshTrafficIcons(options);
		    });
	    
		    //re-calculate traffic on map zoom
			leafletMap.on('moveend', function() {
				recalculateTraffic ();
			});
			
		});
	
		/************************
		*	Support Functions
		************************/
		function ToggleTrafficOverlay()
		{
		    
		    if ($('#ShowTrafficButton').html() == "Show Traffic")
		    {
		        $('#ShowTrafficButton').html("Hide Traffic").addClass('btn-active');
		        $('#ShowTrafficButton').data(
		        	'trafficLayer',
		        	L.tileLayer('https://{s}.api.tomtom.com/lbs/map/3/traffic/s3/{z}/{x}/{y}.png?key=p4q9ceey33a4nhjqkffyc9s5', {
						maxZoom: 18,
						subdomains: 'abcd'
					}).addTo(leafletMap)
				);
		    }
		    else
		    {
		        $('#ShowTrafficButton').html("Show Traffic").removeClass('btn-active');
		        leafletMap.removeLayer($('#ShowTrafficButton').data('trafficLayer'));
		        leafletMap.closePopup();
		    }
		}
		
		function recalculateTraffic ()
		{
			if ($('#ShowTrafficButton').hasClass('btn-active'))
	       	{
	       		var options = {};
	       		trafficZoomIndex++;
	       		options.trafficZoomIndex = trafficZoomIndex;
	       		
				//run ajax call
				refreshTrafficIcons(options);
	       		
	       		//check if previous and remove
	       		try
	       		{
	        		leafletMap.removeLayer($('.MAToolBar #ShowTrafficButton').data('trafficMarkers'));
	       			$('.MAToolBar #ShowTrafficButton').removeData('trafficMarkers');
	       		}
	       		catch (e)
	       		{
	       			//do nothing
	       		}
	       	}
		}
		
		function refreshTrafficIcons(options)
		{
			if ($('#ShowTrafficButton').html() == 'Hide Traffic' && options.trafficZoomIndex == trafficZoomIndex)
			{
				var trafficService = new tomtom.services.TrafficService();
				var bounds = leafletMap.getBounds();
				var trafficBounds = { top: bounds.getNorthEast().lat, right: bounds.getNorthEast().lng, bottom: bounds.getSouthWest().lat, left: bounds.getSouthWest().lng };
				trafficService.getTrafficModel(trafficBounds, leafletMap.getZoom(), function(response) {
					
					if(response.tm.poi)
					{
						//array to store markers
						trafficMarkersArray = [];
						
						//loop through and build markers
						$.each(response.tm.poi, function(index, traffic)
						{
							//find markers first
							if(traffic.cs == 0)
							{
								//convert meters to miles or yards
								var toMiles = traffic.l/1609.34;
								if(traffic.l < 200)
								{
									toMiles = Math.round(((toMiles * 10 ) / 10) * 1760) + ' yards';
								}
								else
								{
									toMiles = Math.round( toMiles * 10 ) / 10 + ' mile(s)';
								}
								
								//var to store each marker
								var options = {
									description : traffic.d != undefined ? traffic.d : '--',
									from : traffic.f != undefined ? traffic.f : '--',
									to : traffic.t != undefined ? traffic.t : '--',
									delaytime : traffic.dl != undefined ? Math.round(traffic.dl/60) + ' min(s)' : '--',
									length : traffic.l != undefined ? toMiles : '--',
									category: traffic.ic,
									magnitude: traffic.ty,
									road: traffic.r != undefined ? traffic.r : '--'
								};
								var point = [traffic.p.y, traffic.p.x];
								
								//css rules determine anchor and size
								var myIcon = L.divIcon({
									className: 'traffic-icon traffic-'+traffic.ic+'-'+traffic.ty+''
								});
								
								var marker = L.marker(point, $.extend(options, {icon: myIcon})).on('click', traffic_marker_Click);
								trafficMarkersArray.push(marker);
							}
							else if(traffic.cbl)
							{
								//var to store each marker
								var point = [traffic.p.y, traffic.p.x];
								var incidents = [];
								
								//splice cluster to return only first 4 incidents
								var sortTrafficArray;
								if(traffic.cpoi.length > 4)
								{
									var oldTrafficArray = traffic.cpoi;
									//sort by severity and limit to 4 results
									oldTrafficArray.sort(function(a, b)
									{
										if(a.dl == undefined)
										{
											return 1;
										}
										return b.dl-a.dl
									});
									sortTrafficArray = oldTrafficArray.slice(0, 4);
								}
								else
								{
									var oldTrafficArray = traffic.cpoi;
									//sort by severity
									oldTrafficArray.sort(function(a, b)
									{
										if(a.dl == undefined)
										{
											return 1;
										}
										return b.dl-a.dl
									});
									sortTrafficArray = oldTrafficArray;
								}
								
								//loop over incidents in cluster
								$.each(sortTrafficArray, function(index, incident)
								{
									//convert meters to miles or yards
									toMiles = incident.l/1609.34;
									if(incident.l < 200)
									{
										toMiles = Math.round(((toMiles * 10 ) / 10) * 1760) + ' yards';
									}
									else
									{
										toMiles = Math.round( toMiles * 10 ) / 10 + ' mile(s)';
									}
									
									//build object for options to send
									var incident = {
										description : incident.d != undefined ? incident.d : '--',
										from : incident.f != undefined ? incident.f : '--',
										to : incident.t != undefined ? incident.t : '--',
										delaytime : incident.dl != undefined ? Math.round(incident.dl/60) + ' min(s)' : '--',
										length : incident.l != undefined ? toMiles : '--',
										category: incident.ic,
										magnitude: incident.ty,
										road: incident.r != undefined ? incident.r : '--'
									};
									incidents.push(incident);
									
								});
								
								var options = {
									totalDetails : incidents,
									totalIncidents : traffic.cs
								};
								
								//set class name based on cluster size
								var clusterClass;
								if(traffic.cbl && traffic.ty == 0)
								{
									clusterClass = 'traffic-cluster unknown-cluster';
								}
								else if(traffic.cbl && traffic.ty == 1)
								{
									clusterClass = 'traffic-cluster minor-cluster';
								}
								else if (traffic.cbl && traffic.ty == 2)
								{
									clusterClass = 'traffic-cluster moderate-cluster';
								}
								else if (traffic.cbl && traffic.ty == 3)
								{
									clusterClass = 'traffic-cluster major-cluster';
								}
								
								//css rules determine anchor and size
								var myIcon = L.divIcon({
									className: clusterClass,
									html: traffic.cs
								});
								
								var marker = L.marker(point, $.extend(options, {icon: myIcon})).on('click', traffic_cluster_Click);
								//var marker = L.marker(point, {icon: myIcon});
								trafficMarkersArray.push(marker);
							}
							//quick fix to catch tomtom switching from array to an object
							else if (typeof(traffic) == 'object' && isNaN(index))
							{
								//convert values for popup
								var toMiles = response.tm.poi.l/1609.34;
								
								//var to store each marker
								var options = {
									description : response.tm.poi.d != undefined ? response.tm.poi.d : '--',
									from : response.tm.poi.f != undefined ? response.tm.poi.f : '--',
									to : response.tm.poi.t != undefined ? response.tm.poi.t : '--',
									delaytime : response.tm.poi.dl != undefined ? Math.round(response.tm.poi.dl/60) + ' min(s)' : '--',
									length : response.tm.poi.l != undefined ? Math.round( toMiles * 10 ) / 10 : '--',
									category: response.tm.poi.ic,
									magnitude: response.tm.poi.ty,
									road: response.tm.poi.r != undefined ? response.tm.poi.r : '--'
								};
								var point = [response.tm.poi.p.y, response.tm.poi.p.x];
								
								//css rules determine anchor and size
								var myIcon = L.divIcon({
									className: 'traffic-icon traffic-'+response.tm.poi.ic+'-'+response.tm.poi.ty+''
								});
								
								//var marker = L.marker(point, {icon: myIcon});
								var marker = L.marker(point, $.extend(options, {icon: myIcon})).on('click', traffic_marker_Click);
								trafficMarkersArray.push(marker);
							}
							
							//Layer group for all markers
							var trafficGroup = L.layerGroup(trafficMarkersArray);
							
							//store info in search box for removal later and add to map
							$('.MAToolBar #ShowTrafficButton').data('trafficMarkers', trafficGroup,
							trafficGroup.addTo(leafletMap))
							
						});
					}
					else
					{
						//do nothing
					}
				});
			}
			else
			{
				if($('#ShowTrafficButton').data('trafficMarkers'))
				{
					leafletMap.removeLayer($('#ShowTrafficButton').data('trafficMarkers'));
				}
			}
		}
		
		function traffic_marker_Click()
		{
			var marker = this;
			
			//create popup
			var $trafficContent = $(
		   		'<div class="trafficContent incident" style="display: block;">' +
					'<div style="background: rgba(45, 117, 209, 0.09);">' +
						'<div class="icon"></div>' +
						'<div style="font-weight: bold; min-width:200px; top:6px;" class="road"></div>' +
						'<div class="delay">' +
							'<label style="font-size: 90%;">Delay: </label>' +
							'<div>::delay::</div>' +
						'</div>' +
						'<div style="padding-left:20px" class="length">' +
							'<div style="font-size: 90%;">Length: </div>' +
							'<div>::length::</div>' +
						'</div>' +
					'</div>' +
					'<div style="font: 11px Verdana; position: relative;left: 5%; width: 90%; border-bottom:1px dotted silver; padding-top: 5px;">' +
						'<div style="border-bottom: 1px dotted silver;" class="description">::description::</div>' +
						'<div class="from" style="display: block;">' +
							'<div style="padding-left: 20px; display: inline-table; padding-right: 10px;">from: </div>' +
							'<div style="display: inline-table;">::from::</div>' +
						'</div>' +
						'<div class="to" style="display: block;">' +
							'<div style=" padding-left: 36px;display: inline-table; padding-right: 10px;">to: </div>' +
							'<div style="display: inline-table;">::to::</div>' +
						'</div>' +
					'</div>' +
				'</div>'
		    );
		    $trafficContent.find('.icon').addClass('traffic-icon traffic-' +marker.options.category+ '-' +marker.options.magnitude+ '');
		    $trafficContent.find('.road').text(marker.options.road.length > 20 ? marker.options.road.substring(0, 19) + '...' : marker.options.road);
		    
		    //set location and replace values
			marker.popupHandle = L.popup({ minWidth: 360, offset: L.point(0, -10), autoPanPadding: L.point(325, 65), layerType: 'popup' })
			.setLatLng(this.getLatLng())
			.setContent(
				$trafficContent.wrap('<div></div>').show().parent().html()
		          .replace(/::delay::/g, marker.options.delaytime)
		          .replace(/::length::/g, marker.options.length)
		          .replace(/::description::/g, marker.options.description)
		          .replace(/::from::/g, marker.options.from)
		          .replace(/::to::/g, marker.options.to)
			)
			.openOn(leafletMap);
		}
		
		function traffic_cluster_Click()
		{
			var marker = this;
			
			//create popup
			var $trafficContent = $(
		   		'<div class="trafficContent cluster" style="display: block;">' +
					'<div style="background: rgba(45, 117, 209, 0.09); padding: 2px; margin-bottom: 5px; font-weight: bold;">Incidents in this area: ::totalIncidents::</div>' +
					'<div style="margin-bottom: 5px; font-weight: bold; border-bottom: 1px dotted silver; border-top: 1px dotted silver; padding: 2px;" class="description">::listtotal:: most severe incidents <label style="font-size: 90%; font-weight: normal;">(Ordered by delay)</label></div>' +
					'<table class="traffic-list">' +
					'</table>' +
				'</div>'
		    );
		    
		    //build row with traffic info
		    $.each(marker.options.totalDetails, function (index,incident)
		    {
		    	var $clusterRow = $(
			   		'<tr style="display:block; border-bottom: 1px dotted silver;" class="cluster-row">' +
						'<td class="traffic-icon">' +
							'<div style="margin: 4px 5px 0px -2px;"></div>' +
						'</td>' +
						'<td style="width: 200px;" class="traffic-info" title="">' +
							'<span style="font-weight:bold;" class="traffic-road"></span><br>' +
							'<span class="traffic-from" ></span><br>' +
							'<span class="traffic-to"></span>' +
						'</td>' +
						'<td style="padding-right: 20px; width: 40px; text-align: center;" class="traffic-delay"></td>' +
						'<td style="width: 40px; text-align: center;" class="traffic-distance"></td>' +
					'</tr>'
		    	);
		    	$clusterRow.find('.traffic-icon > div').addClass('traffic-icon traffic-' +incident.category+ '-' +incident.magnitude+ '');
		    	$clusterRow.find('.traffic-from').text(incident.from.length > 20 ? incident.from.substring(0, 19) + '... to' : incident.from + ' to');
		    	$clusterRow.find('.traffic-to').text(incident.to.length > 20 ? incident.to.substring(0, 19) + '... ' : incident.to);
		    	$clusterRow.find('.traffic-road').text(incident.road.length > 20 ? incident.road.substring(0, 19) + '...' : incident.road);
		    	$clusterRow.find('.traffic-delay').text(incident.delaytime);
		    	$clusterRow.find('.traffic-info').attr('title', ''+incident.from+' to ' +incident.to+'');
		    	$clusterRow.find('.traffic-distance').text(incident.length);
		    	$clusterRow.appendTo($trafficContent.find('.traffic-list'));
		    });
		    
			marker.popupHandle = L.popup({ minWidth: 360, offset: L.point(0, -10), autoPanPadding: L.point(325, 85), layerType: 'popup' })
			.setLatLng(this.getLatLng())
			.setContent(
				$trafficContent.wrap('<div></div>').show().parent().html()
		          .replace(/::totalIncidents::/g, marker.options.totalIncidents)
		          .replace(/::listtotal::/g, marker.options.totalDetails.length)
			)
			.openOn(leafletMap);
		}
	
	</script>
</apex:component>