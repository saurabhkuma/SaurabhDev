<apex:component controller="sma.MAComponentCon">

	<!-- CSS -->
	<style type='text/css'>
	
		/* Base Object Rows */
    	.baseobject-row {
    		cursor: pointer;
    	}
    	.baseobject-row:hover td {
    		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ccfcff', endColorstr = '#96fff9') !important;
			-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr = '#ccfcff', endColorstr = '#96fff9')" !important;
			background-image: -moz-linear-gradient(top, #ccfcff, #96fff9) !important;
			background-image: -ms-linear-gradient(top, #ccfcff, #96fff9) !important;
			background-image: -o-linear-gradient(top, #ccfcff, #96fff9) !important;
			background-image: -webkit-gradient(linear, center top, center bottom, from(#CCFCFF), to(#96FFF9)) !important;
			background-image: -webkit-linear-gradient(top, #CCFCFF, #96FFF9) !important;
			background-image: linear-gradient(top, #ccfcff, #96fff9) !important;
    	}
    	.baseobject-row .label .name {
    	}
    	.baseobject-row .label .fields {
    		color: #757575;
    		font-size: 10px;
    		font-style: italic;
    	}
    	.baseobject-row .data {
    		text-align: center;
    	}
    	.baseobject-row .data div {
    		width: 32px;
    		height: 32px;
    		margin: 0 auto;
    	}
    	.baseobject-row .data.checked div {
    		background: transparent url('{!URLFOR($Resource.MapAnything, 'images/checkbox-checked-32.png')}') no-repeat center;
    	}
    	.baseobject-row .data.unchecked div {
    		background: transparent url('{!URLFOR($Resource.MapAnything, 'images/checkbox-unchecked-32.png')}') no-repeat center;
    	}
    	.baseobject-row .data.loading div {
    		background: transparent url('{!URLFOR($Resource.MapAnything, 'images/chatter-loader.gif')}') no-repeat center;
    	}
    	
    	/* Forms */
    	#MATutorial-Content .ui-combobox, #MATutorial-Content .ui-combobox input  {
    		width: 100%;
    		-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
    	}
    	#MATutorial-Content input[type='text'] {
    		width: 100%;
    		height: 25px;
    		padding: 0.3em;
    		-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
    		border-radius: 4px;
    		font-family: Verdana, Arial, sans-serif;
    		font-size: 13px;
    		font-weight: bold;
    	}
    	
    	/* Buttons */  
    	#MATutorial-Content .buttons {
    		text-align: right;
    	}
    	#MATutorial-Content .buttons .bigbutton {
    		padding: 5px !important;
    	}
        #MATutorial-Content .bigbutton {
        	-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;
        	-webkit-border-radius: 3px;
			-moz-border-radius: 3px;
			border-radius: 3px;
			display: inline-block;
			font-family: Georgia;
			font-size: 15px;
			font-weight: bold;
			margin: 0;
			padding: 12px;
			cursor: pointer;
        }
        #MATutorial-Content .bigbutton:active {
			position:relative;
			top:1px;
		}
		#MATutorial-Content .bigbutton.blue {
			-moz-box-shadow: inset 0px 1px 0px 0px #bee2f9; 
			-webkit-box-shadow: inset 0px 1px 0px 0px #bee2f9; 
			box-shadow: inset 0px 1px 0px 0px #bee2f9;
			background: -webkit-gradient( linear, left top, left bottom, color-stop(0.05, #63b8ee), color-stop(1, #468ccf) );
			background: -moz-linear-gradient( center top, #63b8ee 5%, #468ccf 100% );
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#63b8ee', endColorstr='#468ccf');
			background-color: #63b8ee;
			border: 1px solid #3866a3;
			color: #14396a;
			text-shadow: 1px 1px 0px #7cacde;
		}
		#MATutorial-Content .bigbutton.blue:hover {
			background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #468ccf), color-stop(1, #63b8ee) );
			background:-moz-linear-gradient( center top, #468ccf 5%, #63b8ee 100% );
			filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#468ccf', endColorstr='#63b8ee');
			background-color:#468ccf;
		}
		#MATutorial-Content .bigbutton.orange {
			-moz-box-shadow:inset 0px 1px 0px 0px #fed897;
			-webkit-box-shadow:inset 0px 1px 0px 0px #fed897;
			box-shadow:inset 0px 1px 0px 0px #fed897;
			background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #f6b33d), color-stop(1, #d29105) );
			background:-moz-linear-gradient( center top, #f6b33d 5%, #d29105 100% );
			filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#f6b33d', endColorstr='#d29105');
			background-color:#f6b33d;
			border:1px solid #eda933;
			color:#ffffff;
			text-shadow:1px 1px 0px #cd8a15;
		}
		#MATutorial-Content .bigbutton.orange:hover {
			background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #d29105), color-stop(1, #f6b33d) );
			background:-moz-linear-gradient( center top, #d29105 5%, #f6b33d 100% );
			filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#d29105', endColorstr='#f6b33d');
			background-color:#d29105;
		}
		#MATutorial-Content .bigbutton.gray {
			-moz-box-shadow:inset 0px 1px 0px 0px #ffffff;
			-webkit-box-shadow:inset 0px 1px 0px 0px #ffffff;
			box-shadow:inset 0px 1px 0px 0px #ffffff;
			background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #ededed), color-stop(1, #dfdfdf) );
			background:-moz-linear-gradient( center top, #ededed 5%, #dfdfdf 100% );
			filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ededed', endColorstr='#dfdfdf');
			background-color:#ededed;
			border:1px solid #dcdcdc;
			color:#777777;
			text-shadow:1px 1px 0px #ffffff;
		}
		#MATutorial-Content .bigbutton.gray:hover {
			background:-webkit-gradient( linear, left top, left bottom, color-stop(0.05, #dfdfdf), color-stop(1, #ededed) );
			background:-moz-linear-gradient( center top, #dfdfdf 5%, #ededed 100% );
			filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#dfdfdf', endColorstr='#ededed');
			background-color:#dfdfdf;
		}
		#MATutorial-Content .bigbutton .title {
			line-height: 24px;
			height: 24px;
			padding: 5px;
			text-align: left;
		}
		#MATutorial-Content .bigbutton .subtitle {
			line-height: 10px;
			color: #DADADA;
			font-style: italic;
			font-size: 10px;
			text-align: left;
		}
		
		#MATutorial-Content .closebtn {
			float: right;
			font-size: 14px;
			font-weight: bold;
			line-height: 14px;
			color: #000;
			text-shadow: 0 1px 0 #FFF;
			opacity: 0.2;
			filter: alpha(opacity=20);
		}
		#MATutorial-Content .closebtn:hover {
			color: #000;
			text-decoration: none;
			cursor: pointer;
			opacity: 0.4;
			filter: alpha(opacity=40);
		}
	
	</style>
	
	<!-- JS -->
	<script type='text/javascript'>
	
		/**************************************
		*	Data
		**************************************/
		
		//default base object configurations
		var defaultSettings = '{"CheckInPostTo":"Chatter|Task","VerificationDistance":"","VerificationUnit":"ft","VerificationRequired":false}';
       	var baseObjectDefinitions = {
       		Account		: { Name: 'Account', Name__c: 'Account (Billing)', AddressObject__c: 'SAME', Street__c: 'BillingStreet', City__c: 'BillingCity', State__c: 'BillingState', PostalCode__c: 'BillingPostalCode', Country__c: 'BillingCountry', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings },
       		Contact		: { Name: 'Contact', Name__c: 'Contact', AddressObject__c: 'AccountId', Street__c: 'Account.BillingStreet', City__c: 'Account.BillingCity', State__c: 'Account.BillingState', PostalCode__c: 'Account.BillingPostalCode', Country__c: 'Account.BillingCountry', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings },
       		Lead		: { Name: 'Lead', Name__c: 'Lead', AddressObject__c: 'SAME', Street__c: 'Street', City__c: 'City', State__c: 'State', PostalCode__c: 'PostalCode', Country__c: 'Country', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings },
       		Opportunity	: { Name: 'Opportunity', Name__c: 'Opportunity', AddressObject__c: 'AccountId', Street__c: 'Account.BillingStreet', City__c: 'Account.BillingCity', State__c: 'Account.BillingState', PostalCode__c: 'Account.BillingPostalCode', Country__c: 'Account.BillingCountry', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings },
       		Case		: { Name: 'Case', Name__c: 'Case', AddressObject__c: 'AccountId', Street__c: 'Account.BillingStreet', City__c: 'Account.BillingCity', State__c: 'Account.BillingState', PostalCode__c: 'Account.BillingPostalCode', Country__c: 'Account.BillingCountry', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings },
       		Task		: { Name: 'Task', Name__c: 'Task', AddressObject__c: 'AccountId', Street__c: 'Account.BillingStreet', City__c: 'Account.BillingCity', State__c: 'Account.BillingState', PostalCode__c: 'Account.BillingPostalCode', Country__c: 'Account.BillingCountry', Latitude__c: '--Create New--', Longitude__c: '--Create New--', Settings__c: defaultSettings }
       	};
       	var addressLocationDefinitions = {
       		Account: { 
       			'SAME': { baseObject: 'Account', parentBaseObject: '', relationshipName: '' }
       		},
       		Contact: {
       			'AccountId': { baseObject: 'Account', parentBaseObject: '', relationshipName: 'Account' }
       		},
       		Lead: {
       			'SAME': { baseObject: 'Lead', parentBaseObject: '', relationshipName: '' }
       		},
       		Opportunity: {
       			'AccountId': { baseObject: 'Account', parentBaseObject: '', relationshipName: 'Account' }
       		},
       		Case: {
       			'AccountId': { baseObject: 'Account', parentBaseObject: '', relationshipName: 'Account' }
       		},
       		Task: {
       			'AccountId': { baseObject: 'Account', parentBaseObject: '', relationshipName: 'Account' }
       		}
       	};
	
		/**************************************
		*	Map Ready
		**************************************/
		MA.on('mapready', function () {
			
			//send a request to determine if the tutorial should be launched
			$.ajax({
				url: MA.resources.Admin+'?action=get_tutorial_details&core.apexpages.devmode.url=0',
				type: 'POST',
				dataType: 'JSON',
				data: {
					securityToken: '{!securityToken}'
				},
				success: function (response) {
					if (response.success) {
					
						//populate base object options
						var $baseObjectSelect = $('#MATutorial-Steps-Custom-Object');
						$.each(response.available, function (index, baseObject) {
							if (baseObject.label.length < 17) {
								$baseObjectSelect.append(
									$('<option/>').attr('value', baseObject.label).text(baseObject.name)
								);
							}
						});
						$baseObjectSelect.next().find('input').val($baseObjectSelect.find('option:selected').text());
					
						//launch the tutorial if we don't have any base objects
						if (response.hasBaseObjects == false) {
							LaunchPopupWindow($('#MATutorial-Content'), 600);
						}
						
					}
				},
				error: function (response) {
				}
			});
			
			//handle clicking component rows
			$('#MATutorial-BaseObjects').on('click', '.baseobject-row', function () {
				var $row = $(this);
			
				//toggle the checkbox
				if ($row.find('.data').is('.checked')) {
					$row.find('.data').removeClass('checked').addClass('unchecked');
				}
				else if ($row.find('.data').is('.unchecked')) {
					$row.find('.data').removeClass('unchecked').addClass('checked');
				}
				
			});
			
		});
		
		/**************************************
		*	Page Ready
		**************************************/
		$(function () {
			
			//init comboboxes
			$('#MATutorial-Content .combobox').combobox();
			
			//handle changing the address location field
			$('#MATutorial-Steps-Custom-AddressLocation').change(function () {
			
				//show loading
				showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Updating Address Options...');
				
				//send request to get address field options
				var action = $('#MATutorial-Steps-Custom-AddressLocation option').length == 0 ? 'populate_available_fields' : 'repopulate_available_fields';
				$.ajax({
					url: MA.resources.Admin+'?action='+action+'&core.apexpages.devmode.url=0',
					type: 'POST',
					dataType: 'JSON',
					data: {
						securityToken: '{!securityToken}',
						object: $('#MATutorial-Steps-Custom-Object').val(),
						addressloc: $('#MATutorial-Steps-Custom-AddressLocation').val()
					},
					success: function (response) {
						if (response.success) {
						
							//populate address location options if needed
							var $addressLocationSelect = $('#MATutorial-Steps-Custom-AddressLocation');
							if ($addressLocationSelect.children().length == 0) {
								$.each(response.RelationshipFields, function (index, field) {
									$addressLocationSelect.append(
										$('<option/>').attr('value', field.value).text(field.name)
									);
								});
								$addressLocationSelect.next().find('input').val($addressLocationSelect.find('option:selected').text());
							}
							
							//keep track of the address object information (for use later when creating fields and workflow rules)
							$addressLocationSelect.data('addressLocationMetadata', {
								baseObject: response.ObjectName,
								parentBaseObject: response.ParentBaseObject,
								relationshipName: response.RelationshipName
							});
							addressLocationDefinitions[$('#MATutorial-Steps-Custom-Object').val()] = addressLocationDefinitions[$('#MATutorial-Steps-Custom-Object').val()] || {};
							addressLocationDefinitions[$('#MATutorial-Steps-Custom-Object').val()][$('#MATutorial-Steps-Custom-AddressLocation').val()] = {
								baseObject: response.ObjectName,
								parentBaseObject: response.ParentBaseObject,
								relationshipName: response.RelationshipName
							};
							
							//populate address field options
							var $addressFieldSelects = $('#MATutorial-Steps-Custom-FieldMap .addressfield').empty();
							$.each(response.AddressFields, function (index, field) {
								$addressFieldSelects.append(
									$('<option/>').attr('value', field.value).text(field.name)
								);
							});
							$addressFieldSelects.prepend($('<option/>').attr('value', '--Please Choose--').text('--Please Choose---')).val('--Please Choose--').next().find('input').val('--Please Choose--');
							
							//populate coordinate field options
							var $coordinateFieldSelects = $('#MATutorial-Steps-Custom-FieldMap .coordinatefield').empty();
							$.each(response.CoordinateFields, function (index, field) {
								$coordinateFieldSelects.append(
									$('<option/>').attr('value', field.value).text(field.name)
								);
							});
							$coordinateFieldSelects.prepend($('<option/>').attr('value', '--Create New--').text('--Create New---')).val('--Create New--').next().find('input').val('--Create New--');
							
							//hide loading
							hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
						}
					},
					error: function (response) {
					}
				});
			
			});
			
		});
		
		/**************************************
		*	Wizard Support Functions
		**************************************/
		
		//handle suggesting a field map
		function MATutorial_Steps_Custom_FieldMap_Suggest()
		{
			//loop over address field options looking for appropriate suggestions
            $('#MATutorial-Steps-Custom-Street > option').each(function() {
                var FieldNameLowered = this.value.toLowerCase();                    
                if (FieldNameLowered.indexOf('street') !== -1 && !FieldNameLowered.indexOf('clean') !== -1 && ($('#MATutorial-Steps-Custom-Street').val() == '--Please Choose--' || $('#MATutorial-Steps-Custom-Street').val() == '')) {
                   $('#MATutorial-Steps-Custom-Street').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }                   
                else if (FieldNameLowered.indexOf('city') !== -1 && !FieldNameLowered.indexOf('clean') !== -1 && ($('#MATutorial-Steps-Custom-City').val() == '--Please Choose--' || $('#MATutorial-Steps-Custom-City').val() == '')) {
                   $('#MATutorial-Steps-Custom-City').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }
                else if (FieldNameLowered.indexOf('state') !== -1 && !FieldNameLowered.indexOf('clean') !== -1 && ($('#MATutorial-Steps-Custom-State').val() == '--Please Choose--' || $('#MATutorial-Steps-Custom-State').val() == '')) {
                   $('#MATutorial-Steps-Custom-State').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }
                else if (FieldNameLowered.indexOf('postalcode') !== -1 && !FieldNameLowered.indexOf('clean') !== -1 && ($('#MATutorial-Steps-Custom-PostalCode').val() == '--Please Choose--' || $('#MATutorial-Steps-Custom-PostalCode').val() == '')) {
                   $('#MATutorial-Steps-Custom-PostalCode').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }
                else if (FieldNameLowered.indexOf('country') !== -1 && !FieldNameLowered.indexOf('clean') !== -1 && ($('#MATutorial-Steps-Custom-Country').val() == '--Please Choose--' || $('#MATutorial-Steps-Custom-Country').val() == '')) {
                   $('#MATutorial-Steps-Custom-Country').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }
            });
            
            //loop over coordinate field options looking for appropriate suggestions
            $('#MATutorial-Steps-Custom-Latitude > option').each(function() {
                var FieldNameLowered = this.value.toLowerCase();
                if (FieldNameLowered.indexOf('latitude') !== -1 && ($('#MATutorial-Steps-Custom-Latitude').val() == '--Create New--' || $('#MATutorial-Steps-Custom-Latitude').val() == '')) {
                   $('#MATutorial-Steps-Custom-Latitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }
                else if (FieldNameLowered.indexOf('longitude') !== -1 && ($('#MATutorial-Steps-Custom-Longitude').val() == '--Create New--' || $('#MATutorial-Steps-Custom-Longitude').val() == '')) {
                   $('#MATutorial-Steps-Custom-Longitude').val(this.value).next().find('.ui-autocomplete-input').val(this.text);
                }                    
            });
		}
		
		//handle saving a custom configuration
		function MATutorial_Steps_Custom_Save()
		{
			//save the current configuration as a review row
			var $newRow = $('<tr class="baseobject-row"><td class="label"><div class="name"></div><div class="address fields"></div><div class="coordinate fields"></div></td></tr>');
			$newRow.find('.name').text($('#MATutorial-Steps-Custom-Name').val());
			$newRow.find('.address.fields').text($('#MATutorial-Steps-Custom-FieldMap .addressfield').map(function () { return $(this).val() == '--Please Choose--' ? null : $(this).find('option:selected').text(); }).get().join(', '));
			$newRow.find('.coordinate.fields').text($('#MATutorial-Steps-Custom-FieldMap .coordinatefield').map(function () { return $(this).find('option:selected').text(); }).get().join(', '));
			$newRow.appendTo($('#MATutorial-Steps-Review-SelectedConfigurations')).data({
				baseObjectDefinition: {
					Name				: $('#MATutorial-Steps-Custom-Object').val(),
					Name__c 			: $('#MATutorial-Steps-Custom-Name').val(),
					AddressObject__c	: $('#MATutorial-Steps-Custom-AddressLocation').val(),
					Street__c			: $('#MATutorial-Steps-Custom-Street').val() == '--Please Choose--' ? '' : $('#MATutorial-Steps-Custom-Street').val(),
					City__c				: $('#MATutorial-Steps-Custom-City').val() == '--Please Choose--' ? '' : $('#MATutorial-Steps-Custom-City').val(),
					State__c			: $('#MATutorial-Steps-Custom-State').val() == '--Please Choose--' ? '' : $('#MATutorial-Steps-Custom-State').val(),
					PostalCode__c		: $('#MATutorial-Steps-Custom-PostalCode').val() == '--Please Choose--' ? '' : $('#MATutorial-Steps-Custom-PostalCode').val(),
					Country__c			: $('#MATutorial-Steps-Custom-Country').val() == '--Please Choose--' ? '' : $('#MATutorial-Steps-Custom-Country').val(),
					Latitude__c			: $('#MATutorial-Steps-Custom-Latitude').val(),
					Longitude__c		: $('#MATutorial-Steps-Custom-Longitude').val(),
					Settings__c			: '{"CheckInPostTo":"Chatter|Task","VerificationDistance":"","VerificationUnit":"ft","VerificationRequired":false}'
				},
				addressLocationMetadata: $('#MATutorial-Steps-Custom-AddressLocation').data('addressLocationMetadata')
			});
			
			//clear the configuration pages
			$('#MATutorial-Steps-Custom-Name').val('');
			$('#MATutorial-Steps-Custom-Object').val($('#MATutorial-Steps-Custom-Object option:first').attr('value')).next().find('input').val($('#MATutorial-Steps-Custom-Object option:first').text());
		}
		
		/************************************
		*	Wizard Button Handlers
		************************************/
		function MATutorial_Steps_BaseObjectSelection_Next()
		{
			//add each selected base object to the review table
			$('#MATutorial-BaseObjects .baseobject-row.standard').each(function () {
				if ($(this).find('.data').is('.checked')) {
					var $newRow = $(this).clone();
					$newRow.find('.data').remove();
					$newRow.appendTo($('#MATutorial-Steps-Review-SelectedConfigurations')).data({
						baseObjectDefinition: baseObjectDefinitions[$newRow.attr('data-baseobject')],
						addressLocationMetadata: addressLocationDefinitions[baseObjectDefinitions[$newRow.attr('data-baseobject')]['Name']][baseObjectDefinitions[$newRow.attr('data-baseobject')]['AddressObject__c']]
					});
				}
			});
			
			//move to either the review step or a custom configuration depending on user selection
			$('#MATutorial-Steps > div:visible').slideUp(300);
			if ($('#MATutorial-BaseObjects .baseobject-row.custom .data').is('.checked')) {
				$('#MATutorial-Steps-Custom-BasicInfo').slideDown(300);
			}
			else {
				$('#MATutorial-Steps-Review').slideDown(300);
			}
		}
		function MATutorial_Steps_Custom_BasicInfo_Back()
		{
			//show loading
			showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Resetting...');
			
			//remove all selected configurations
			$('#MATutorial-Steps-Review-SelectedConfigurations .baseobject-row').remove();
			
			//return to the base object selection step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-BaseObjectSelection').slideDown(300, function () {
				hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
			});
		}
		function MATutorial_Steps_Custom_BasicInfo_Next()
		{
			//make sure that a name has been entered
			if ($('#MATutorial-Steps-Custom-Name').val() == '') {
				showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Please enter a name before proceeding');
				return;
			}
		
			//send a request to get the address field options
			$('#MATutorial-Steps-Custom-AddressLocation').empty().change();
		
			//show the field map step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-Custom-FieldMap').slideDown(300);
		}
		function MATutorial_Steps_Custom_FieldMap_Back()
		{
			//show loading
			showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Loading...');
			
			//return to the basic info step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-Custom-BasicInfo').slideDown(300, function () {
				hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
			});
		}
		function MATutorial_Steps_Custom_FieldMap_Next()
		{
			//make sure at least one address field has been mapped
			var valid = false;
			$('#MATutorial-Steps-Custom-FieldMap .addressfield').each(function () {
				if ($(this).val() != '--Please Choose--') {
					valid = true;
					return false;
				}
			});
			if (!valid) {
				showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'At least one address field is required');
				return;
			}
		
			//show the add another step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-Custom-AddAnother').slideDown(300);
		}
		function MATutorial_Steps_Custom_AddAnother_Yes()
		{
			//show loading
			showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Updating Configurations...');
			
			//save this configuration
			MATutorial_Steps_Custom_Save();
			
			//show the base object selection step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-Custom-BasicInfo').slideDown(300);
			
			//hide loading
			hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
		}
		function MATutorial_Steps_Custom_AddAnother_No()
		{
			//show loading
			showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Updating Configurations...');
			
			//save this configuration
			MATutorial_Steps_Custom_Save();
			
			//show the review step
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-Review').slideDown(300);
			
			//hide loading
			hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
		}
		function MATutorial_Steps_Review_Back()
		{
			//show loading
			showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Resetting...');
			
			//remove all selected configurations
			$('#MATutorial-Steps-Review-SelectedConfigurations .baseobject-row').remove();
			
			//return to step 1
			$('#MATutorial-Steps > div:visible').slideUp(300);
			$('#MATutorial-Steps-BaseObjectSelection').slideDown(300, function () {
				hideMessage($('#MATutorial-Content').find('.loadmask-wrapper'));
			});
		}
		
		function MATutorial_Steps_Review_Finish()
		{
			//these placeholders will get filled in by the callouts below
			var fieldRequests = [];
			var workflowRuleRequests = [];
			var baseObjectsInserted = [];
			var mapItButtonRequests = [];
			
			//create fields
       		showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Fields...');
       		MATutorial_CreateFields({
       			fieldRequests: fieldRequests,
       			complete: function (response) {
       				if (response.success) {
       				
       					//create base objects
       					showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Base Objects...');
       					MATutorial_CreateBaseObjects({
       						complete: function (response) {
       							if (response.success) {
       								
       								//keep track of the base objects that were inserted for use in later calls
       								baseObjectsInserted = response.baseObjectsInserted;
       							
       								//create field updates
       								showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Field Updates...');
       								MATutorial_CreateFieldUpdates({
       									baseObjectsInserted: baseObjectsInserted,
       									workflowRuleRequests: workflowRuleRequests,
       									complete: function (response) {
       										if (response.success) {
       										
       											//create workflow rules
       											showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Workflow Rules...');
       											MATutorial_CreateWorkflowRules({
       												workflowRuleRequests: workflowRuleRequests,
       												complete: function (response) {
       													if (response.success) {
       													
       														//create map it buttons
       														showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Map It Buttons...');
       														MATutorial_CreateMapItButtons({
       															baseObjectsInserted: baseObjectsInserted,
       															mapItButtonRequests: mapItButtonRequests,
       															complete: function (response) {
       																if (response.success) {
       																	
       																	//add map it buttons to layouts
       																	showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Adding Map It Buttons To Layouts...');
       																	MATutorial_AddMapItButtonsToLayouts({
       																		mapItButtonRequests: mapItButtonRequests,
       																		complete: function (response) {
       																			if (response.success) {
       																				
       																				//create sample data
						       														showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Sample Data...');
						       														MATutorial_CreateSampleData({
						       															complete: function (response) {
						       																if (response.success) {
						       																
						       																	//setup is complete (using timeout to allow the success checkbox to load because it was showing a missing image)
																								showSuccess($('#MATutorial-Content').find('.loadmask-wrapper'), 'Setup complete.  The map will now reload.', false);
																								setTimeout(function () {
																									window.location = window.location.href;
																								}, 100);
						       																
						       																}
						       																else {
						       																	showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
						       																}
						       															}
						       														});
       																					
       																			}
       																			else {
       																			
       																				//still create sample data, but show a message explaining that map it buttons couldn't be added to layouts (need to find out why this fails sometimes)
						       														showLoading($('#MATutorial-Content').find('.loadmask-wrapper'), 'Creating Sample Data...');
						       														MATutorial_CreateSampleData({
						       															complete: function (response) {
						       																if (response.success) {
						       																
						       																	//setup is complete (using timeout to allow the success checkbox to load because it was showing a missing image)
																								showWarning($('#MATutorial-Content').find('.loadmask-wrapper'), 'Setup complete, but Map It buttons could not be added to the layouts.  To use Map It buttons, please add them to the layouts manually.  The map will now reload.', false).find('.status').css('max-width', '90%');
																								setTimeout(function () {
																									window.location = window.location.href;
																								}, 2000);
						       																
						       																}
						       																else {
						       																	showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
						       																}
						       															}
						       														});
       																				
       																			}
       																		}
       																	});
       																	
       																}
       																else {
       																	showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
       																}
       															}
       														});
       													}
       													else {
       														showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
       													}
       												}
       											});
       										
       										}
       										else {
       											showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
       										}
       									}
       								});
       							
       							}
       							else {
       								showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Error creating base objects.  Please contact support.', false);
       							}
       						}
       					});
       					
       				}
       				else {
       					showError($('#MATutorial-Content').find('.loadmask-wrapper'), 'Unknown error.  Please contact support.', false);
       				}
       			}
       		});
		}
		
		/********************************************************
		*	Metadata Support Functions
		********************************************************/
		function MATutorial_CreateFields(options)
		{
			//send requests to create the needed fields
			var partnerURL = '{!$Api.Partner_Server_URL_280}';
       		var sessionId = '{!$Api.Session_ID}';
			var fieldRequests = options.fieldRequests;
			var uniqueFieldNames = [];
			$('#MATutorial-Steps-Review-SelectedConfigurations .baseobject-row').each(function () {
				var baseObjectDefinition = $(this).data('baseObjectDefinition');
				var addressLocationMetadata = $(this).data('addressLocationMetadata');
				$.each(baseObjectDefinition, function (key, value) {
					if (value == '--Create New--') {
						
						//create a field request so we can track it and determine completion
						var fieldRequest = {
			            	baseObjectDefinition: baseObjectDefinition,
			            	done: false,
			            	error: false
			            };
						fieldRequests.push(fieldRequest);
						
						//update the base object definition with the field name that we're going to use (this will be used later when creating the base object)
						baseObjectDefinition[key] = (addressLocationMetadata.relationshipName == '' ? 'MA' : addressLocationMetadata.relationshipName + '.MA') + key;
						
						//send a request to create this field if needed (currently assuming these are number fields because only lat/lng are supported in the tutorial)
						var uniqueFieldName = addressLocationMetadata.baseObject + '.MA' + key
						if ($.inArray(uniqueFieldName, uniqueFieldNames) == -1) {
							uniqueFieldNames.push(uniqueFieldName);
							$.getJSON(
								"https://product-api-prod.cloudbilt.com/createfield.php?callback=?",
								{ 
				                    sessionid: sessionId, 
				                    serverurl: partnerURL,
				                    type: 'number',
				                    object: addressLocationMetadata.baseObject,
				                    name: 'MA' + key,
				                    label: key.replace('__c', '') + ' (MapAnything)',
				                    precision: 18,
				                    scale: 15
				                },
				                function (response) {
				                	if (response.success) {
				                		fieldRequest.id = response.data.result.id;
				                	}
				                	else {
				                		fieldRequest.done = fieldRequest.error = true;
				                	}
				            	}
				            );
				        }
				        else {
				        	fieldRequest.done = true;
				        }
					}
				});
			});

			//start an interval to check for completion of field creation
			var fieldCreationInterval = setInterval(function () {
				
				//loop over each field request checking for completion
				var done = true;
				var error = false;
				$.each(fieldRequests, function (index, fieldRequest) {
					if (!fieldRequest.done) {
						
						//not done
						done = false;
					
						//send a request to check status if we have an id
						if (fieldRequest.id) {
							$.getJSON(
								"https://product-api-prod.cloudbilt.com/status.php?callback=?", 
				                { 
				                    sessionid: sessionId, 
				                    serverurl: partnerURL,
				                    id: fieldRequest.id
				                },
				                function(response) {
				                    if (response.success) {
				                    	if (response.data.result.done) {
				                    		if (response.data.result.state == 'Error') {
				                    			if (response.data.result.statusCode == 'DUPLICATE_DEVELOPER_NAME') {
				                    			
				                    				//the field already exists so we'll just use it
				                    				fieldRequest.done = true;
				                    			
				                    			}
				                    			else {
				                    				fieldRequest.done = fieldRequest.error = true;	//unknown error
				                    			}
				                    		}
				                    		else {
				                    			fieldRequest.done = true;	//success
				                    		}
				                    	}
				                    }
				                    else {
				                    	fieldRequest.done = fieldRequest.error = true;	//unknown error
				                    }
				            	}
				            );
				        }
					}
					else if (fieldRequest.error) {
						error = true;
					}
				});
				
				//done?
				if (done) {
					clearInterval(fieldCreationInterval);
					options.complete({ success: !error });
				}


			}, 2000);
		}
		function MATutorial_CreateBaseObjects(options)
		{
			//send request to create base objects
			$.ajax({
				url: MA.resources.Admin+'?core.apexpages.devmode.url=0',
				type: 'POST',
				dataType: 'JSON',
				data: {
					securityToken			: '{!securityToken}',
					action					: 'create_baseobjects',
					serializedBaseObjects	: JSON.stringify(
						$('#MATutorial-Steps-Review-SelectedConfigurations .baseobject-row').map(function () {
							return addNamespace('{!namespace}', $(this).data('baseObjectDefinition'));
						}).toArray()
					)
				},
				success: function (response) {
					if (response.success) {
						options.complete($.extend(response, { success: true }));
					}
					else {
						MALog(response);
						options.complete({ success: false });
					}
				},
				error: function (response) {
					MALog(response);
					options.complete({ success: false })
				}
			});
		}
		function MATutorial_CreateFieldUpdates(options)
		{
			var partnerURL = '{!$Api.Partner_Server_URL_280}';
       		var sessionId = '{!$Api.Session_ID}';
			var baseObjectsInserted = options.baseObjectsInserted;
			var workflowRuleRequests = options.workflowRuleRequests;
			var uniqueFieldUpdateRequests = [];
			$.each(baseObjectsInserted, function (index, baseObject) {
				removeNamespace('{!namespace}', baseObject);
				
				//create a new workflow rule request for this base object
				var workflowRuleRequest = { done: false, error: false, baseObject: baseObject, fieldUpdateRequests: [] };
				workflowRuleRequests.push(workflowRuleRequest);
			
				//create a field update request for the Lat field
				var latField = baseObject.Latitude__c.substring(baseObject.Latitude__c.indexOf('.') + 1).replace(/__c/, '_c');
				var fieldUpdateRequestLat = {
					fullName: addressLocationDefinitions[baseObject.Name][baseObject.AddressObject__c].baseObject+'.'+latField+'_Purge',
					done: false,
					error: false
				};
				workflowRuleRequest.fieldUpdateRequests.push(fieldUpdateRequestLat);
			
				//send the request (have to use address location definition and remove anything before a '.' in the field name in case this is referencing a parent address object)
				if ($.inArray(fieldUpdateRequestLat.fullName, uniqueFieldUpdateRequests) == -1) {
					uniqueFieldUpdateRequests.push(fieldUpdateRequestLat.fullName);
					$.getJSON("https://product-api-prod.cloudbilt.com/createworkflowfieldupdates.php?callback=?", 
		                { sessionid: sessionId, serverurl: partnerURL, fullName: fieldUpdateRequestLat.fullName, name: fieldUpdateRequestLat.fullName, field: baseObject.Latitude__c.substring(baseObject.Latitude__c.indexOf('.') + 1) },
		                function(response) {
		                	if (response.success) {
		                		var matches = response.data.match(/<id>(\w+)<\/id>/);
		                		if (matches) {
		                			fieldUpdateRequestLat.id = matches[1];
		                		}
		                		else {
		                			fieldUpdateReqestLat.done = fieldUpdateRequestLat.error = true;
		                		}
		                	}
		                	else {
		                		fieldUpdateReqestLat.done = fieldUpdateRequestLat.error = true;
		                	}
		            	}
		            );
	            }
	            else {
	            	fieldUpdateRequestLat.done = true;
	            }
	            
	            //create a field update request for the Lng field
	            var lngField = baseObject.Longitude__c.substring(baseObject.Longitude__c.indexOf('.') + 1).replace(/__c/, '_c');
				var fieldUpdateRequestLng = {
					fullName: addressLocationDefinitions[baseObject.Name][baseObject.AddressObject__c].baseObject+'.'+lngField+'_Purge',
					done: false,
					error: false
				};
				workflowRuleRequest.fieldUpdateRequests.push(fieldUpdateRequestLng);
	            
	            //send the request (have to use address location definition and remove anything before a '.' in the field name in case this is referencing a parent address object)
	            if ($.inArray(fieldUpdateRequestLng.fullName, uniqueFieldUpdateRequests) == -1) {
	            	uniqueFieldUpdateRequests.push(fieldUpdateRequestLng.fullName);
		            $.getJSON("https://product-api-prod.cloudbilt.com/createworkflowfieldupdates.php?callback=?", 
		                { sessionid: sessionId, serverurl: partnerURL, fullName: fieldUpdateRequestLng.fullName, name: fieldUpdateRequestLng.fullName, field: baseObject.Longitude__c.substring(baseObject.Longitude__c.indexOf('.') + 1) },
		                function(response) {
		                	if (response.success) {
		                		var matches = response.data.match(/<id>(\w+)<\/id>/);
		                		if (matches) {
		                			fieldUpdateRequestLng.id = matches[1];
		                		}
		                		else {
		                			fieldUpdateReqestLng.done = fieldUpdateRequestLng.error = true;
		                		}
		                	}
		                	else {
		                		fieldUpdateReqestLng.done = fieldUpdateRequestLng.error = true;
		                	}
		            	}
		            );
				}
				else {
					fieldUpdateRequestLng.done = true;
				}
			});

			//start an interval to check for completion of the field update requests
			var fieldUpdateInterval = setInterval(function () {
				
				var done = true;
				var error = false;
				$.each(workflowRuleRequests, function (workflowIndex, workflowReq) {
					$.each(workflowReq.fieldUpdateRequests, function (fieldUpdateIndex, req) {
						if (!req.done) {
						
							//not done
							done = false;
						
							if (req.id) {
								$.getJSON(
									"https://product-api-prod.cloudbilt.com/status.php?callback=?", 
					                { 
					                    sessionid: sessionId, 
					                    serverurl: partnerURL,
					                    id: req.id
					                },
					                function(response) {
					                    if (response.success) {
					                    	if (response.data.result.done) {
					                    		if (response.data.result.state == 'Error') {
					                    			if (response.data.result.statusCode == 'DUPLICATE_DEVELOPER_NAME') {
					                    				req.done = true;	//already exists so use it
					                    			}
					                    			else {
					                    				req.done = req.error = true;	//unknown error
					                    			}
					                    		}
					                    		else {
					                    			req.done = true;	//success
					                    		}
					                    	}
					                    }
					                    else {
					                    	req.done = req.error = true;	//unknown error
					                    }
					            	}
					            );
							}
						}
						else if (req.error) {
							error = true;
						}
					});
				});
				
				//done?
				if (done) {
					clearInterval(fieldUpdateInterval);
					options.complete({ success: !error });
				}
			}, 2000);
		}
		function MATutorial_CreateWorkflowRules(options)
		{
			var partnerURL = '{!$Api.Partner_Server_URL_280}';
       		var sessionId = '{!$Api.Session_ID}';
			var workflowRuleRequests = options.workflowRuleRequests;
			var uniqueWorkflowRequests = [];
			$.each(workflowRuleRequests, function (index, workflowReq) {
			
				//build the workflow rule formula based on the selected address fields
				var addressFields = [];
				if (workflowReq.baseObject.Street__c != '') { addressFields.push('ISCHANGED('+workflowReq.baseObject.Street__c.substring(workflowReq.baseObject.Street__c.indexOf('.') + 1)+')');  }
				if (workflowReq.baseObject.City__c != '') { addressFields.push('ISCHANGED('+workflowReq.baseObject.City__c.substring(workflowReq.baseObject.City__c.indexOf('.') + 1)+')');  }
				if (workflowReq.baseObject.State__c != '') { addressFields.push('ISCHANGED('+workflowReq.baseObject.State__c.substring(workflowReq.baseObject.State__c.indexOf('.') + 1)+')');  }
				if (workflowReq.baseObject.PostalCode__c != '') { addressFields.push('ISCHANGED('+workflowReq.baseObject.PostalCode__c.substring(workflowReq.baseObject.PostalCode__c.indexOf('.') + 1)+')');  }
				if (workflowReq.baseObject.Country__c != '') { addressFields.push('ISCHANGED('+workflowReq.baseObject.Country__c.substring(workflowReq.baseObject.Country__c.indexOf('.') + 1)+')');  }
				var formula = 'OR(' +addressFields.join(',')+ ')';
				
				//build the actions that this workflow will call
				var actions = $.map(workflowReq.fieldUpdateRequests, function (req, index) { return req.fullName.substring(req.fullName.indexOf('.') + 1); }).join(',');
			
				//figure out which base object the workflow rule is for
				var baseObjectName = addressLocationDefinitions[workflowReq.baseObject.Name][workflowReq.baseObject.AddressObject__c].baseObject;
			
				//determine if we need this workflow rule (it must be different than the rest)
				var shouldSend = true;
				$.each(uniqueWorkflowRequests, function (index, req) {
					if (req.baseObjectName == baseObjectName && req.formula == formula && req.actions == actions) {
						shouldSend = false;
						return false;
					}
				});
			
				//send request if needed
				if (shouldSend) {
					uniqueWorkflowRequests.push({ baseObjectName: baseObjectName, formula: formula, actions: actions });
					$.getJSON("https://product-api-prod.cloudbilt.com/createworkflow.php?callback=?", 
		                { 
		                    sessionid: sessionId, 
		                    serverurl: partnerURL,
		                    fullName: baseObjectName + '.' + workflowReq.baseObject.Id + '_Purge',
		                    description: baseObjectName + '.' + workflowReq.baseObject.Id + '_Purge',
		                    formula: formula,
		                    actions: actions
		                },
		                function(response) {
		                	if (response.success) {
		                		var matches = response.data.match(/<id>(\w+)<\/id>/);
		                		if (matches) {
		                			workflowReq.id = matches[1];
		                		}
		                		else {
		                			workflowReq.done = workflowReq.error = true;	//unknown error
		                		}
		                	}
		                	else {
		                		workflowReq.done = workflowReq.error = true;	//unknown error
		                	}
		            	}
		            ); 
	            }
	            else {
	            	workflowReq.done = true;
	            }
			
			});
			
			//start an interval to check for workflow rule completion
			var workflowRuleInterval = setInterval(function () {
				
				var done = true;
				var error = false;
				$.each(workflowRuleRequests, function (index, req) {
					if (!req.done) {
					
						//not done
						done = false;
					
						if (req.id) {
							$.getJSON(
								"https://product-api-prod.cloudbilt.com/status.php?callback=?", 
				                { 
				                    sessionid: sessionId, 
				                    serverurl: partnerURL,
				                    id: req.id
				                },
				                function(response) {
				                    if (response.success) {
				                    	if (response.data.result.done) {
				                    		if (response.data.result.state == 'Error') {
				                    			req.done = req.error = true;	//unknown error
				                    		}
				                    		else {
				                    			req.done = true;	//success
				                    		}
				                    	}
				                    }
				                    else {
				                    	req.done = req.error = true;	//unknown error
				                    }
				            	}
				            );
						}
					}
					else if (req.error) {
						error = true;
					}
				});
				
				//done?
				if (done) {
					clearInterval(workflowRuleInterval);
					options.complete({ success: !error });
				}

			}, 2000);
		}
		function MATutorial_CreateMapItButtons(options)
		{
			var mapItURLs = {
				'Account'		: '/apex/sma__mapanything?recordId={'+'!Account.Id}&baseObjectId=::baseObjectId::&tooltipField=Name&tooltipField2=Phone&tooltipField3=Type&tooltipField4=Rating&tooltipField5=Description&color=%2366FF00',
				'Contact'		: '/apex/sma__mapanything?recordId={'+'!Contact.Id}&baseObjectId=::baseObjectId::&tooltipField=Name&tooltipField2=Title&tooltipField3=Phone&tooltipField4=Email&color=%2366FF00',
				'Lead'			: '/apex/sma__mapanything?recordId={'+'!Lead.Id}&baseObjectId=::baseObjectId::&tooltipField=Name&tooltipField2=Title&tooltipField3=Status&tooltipField4=Rating&tooltipField5=LeadSource&tooltipField6=OwnerId&color=%2366FF00',
				'Opportunity'	: '/apex/sma__mapanything?recordId={'+'!Opportunity.Id}&baseObjectId=::baseObjectId::&tooltipField=Name&tooltipField2=Type&tooltipField3=StageName&tooltipField4=Amount&tooltipField5=CloseDate&tooltipField6=LeadSource&color=%2366FF00',
				'Case'			: '/apex/sma__mapanything?recordId={'+'!Case.Id}&baseObjectId=::baseObjectId::&tooltipField=Subject&tooltipField2=Status&tooltipField3=ContactId&tooltipField4=AccountId&tooltipField5=Origin&tooltipField6=Priority&color=%2366FF00',
				'Task'			: '/apex/sma__mapanything?recordId={'+'!Task.Id}&baseObjectId=::baseObjectId::&tooltipField=Status&tooltipField2=AccountId&tooltipField3=CallType&tooltipField4=CreatedDate&tooltipField5=Priority&color=%2366FF00'
			};
		
			var partnerURL = '{!$Api.Partner_Server_URL_280}';
       		var sessionId = '{!$Api.Session_ID}';
			var baseObjectsInserted = options.baseObjectsInserted;
			var mapItButtonRequests = options.mapItButtonRequests;
			$.each(baseObjectsInserted, function (index, baseObject) {
				removeNamespace('{!namespace}', baseObject);

				//create a new map it button request
				var mapItButtonRequest = {
					done			: false,
					fullName		: baseObject.Name + '.MA_MapIt_' + baseObject.Id,
					description		: 'Maps this ' + baseObject.Name + ' with selected tooltips',
					url				: (mapItURLs[baseObject.Name] || '').replace(/::baseObjectId::/, baseObject.Id)
				};
			
				//send request if needed
				if (mapItButtonRequest.url != '') {
					mapItButtonRequests.push(mapItButtonRequest);
					$.getJSON("https://product-api-prod.cloudbilt.com/createbutton.php?callback=?", 
		                { 
		                    sessionid: sessionId, 
		                    serverurl: partnerURL,
		                    masterLabel: 'Map It',
		                    fullName: mapItButtonRequest.fullName,
		                    description: mapItButtonRequest.description,
		                    url: mapItButtonRequest.url
		                },
		                function(response) {
		                	if (response.success) {
		                		var matches = response.data.match(/<id>(\w+)<\/id>/);
		                		if (matches) {
		                			mapItButtonRequest.id = matches[1];
		                		}
		                		else {
		                			mapItButtonRequest.done = mapItButtonRequest.error = true;	//unknown error
		                		}
		                	}
		                	else {
		                		mapItButtonRequest.done = mapItButtonRequest.error = true;	//unknown error
		                	}
		            	}
		            );
		        }
			
			});
			
			//start an interval to check for button completion
			var mapItButtonInterval = setInterval(function () {
				
				var done = true;
				var error = false;
				$.each(mapItButtonRequests, function (index, req) {
					if (!req.done) {
					
						//not done
						done = false;
					
						if (req.id) {
							$.getJSON(
								"https://product-api-prod.cloudbilt.com/status.php?callback=?", 
				                { 
				                    sessionid: sessionId, 
				                    serverurl: partnerURL,
				                    id: req.id
				                },
				                function(response) {
				                    if (response.success) {
				                    	if (response.data.result.done) {
				                    		if (response.data.result.state == 'Error') {
				                    			req.done = req.error = true;	//unknown error
				                    		}
				                    		else {
				                    			req.done = true;	//success
				                    		}
				                    	}
				                    }
				                    else {
				                    	req.done = req.error = true;	//unknown error
				                    }
				            	}
				            );
						}
					}
					else if (req.error) {
						error = true;
					}
				});
				
				//done?
				if (done) {
					clearInterval(mapItButtonInterval);
					options.complete({ success: !error });
				}

			}, 2000);

		}
		function MATutorial_AddMapItButtonsToLayouts(options)
		{
			//build a map of base objects to buttons that need to be added to each layout
			var baseObjectsMap = {};
			var baseObjectsCount = 0;
			$.each(options.mapItButtonRequests, function (index, req) {
				var baseObjectName = req.fullName.substring(0, req.fullName.indexOf('.'));
				var buttonName = req.fullName.substring(req.fullName.indexOf('.') + 1);
				baseObjectsMap[baseObjectName] = baseObjectsMap[baseObjectName] || {};
				baseObjectsMap[baseObjectName].buttons = baseObjectsMap[baseObjectName].buttons || [];
				baseObjectsMap[baseObjectName].buttons.push(buttonName);
				baseObjectsCount++;
			});
		
			//send request if needed
			if (baseObjectsCount > 0) {
				var partnerURL = '{!$Api.Partner_Server_URL_280}';
	       		var sessionId = '{!$Api.Session_ID}';
				$.getJSON("https://product-api-prod.cloudbilt.com/addbuttonstolayouts.php?callback=?", 
	                { 
	                    sessionid: sessionId,
	                    serverurl: partnerURL,
	                    baseObjectsMap: JSON.stringify(baseObjectsMap)
	                },
	                function(response) {
	                	if (response.success) {
	                		options.complete({ success: true });
	                	}
	                	else {
							options.complete({ success: false });
	                	}
	            	}
	            );
	        }
	        else {
	        	options.complete({ success: true });
	        }
		}
		function MATutorial_CreateSampleData(options)
		{
			//send request to create sample data
			$.ajax({
				url: MA.resources.Admin+'?core.apexpages.devmode.url=0',
				type: 'POST',
				dataType: 'JSON',
				data: {
					securityToken	: '{!securityToken}',
					action			: 'create_sampledata'
				},
				success: function (response) {
					if (response.success) {
						options.complete({ success: true });
					}
					else {
						options.complete({ success: false });
					}
				
				},
				error: function (response) {
					options.complete({ success: false });
				}
			});
		}
		
	</script>
	
	<!-- Tutorial Content -->
	<div id='MATutorial-Content' class='popup_block' style='max-height: 550px !important;'>
		<div class='loadmask-wrapper'>
		
			<!-- Close Button -->
			<a class='closebtn' onclick="ClosePopupWindow();">X</a>
    	
    		<!-- Steps -->
    		<div id='MATutorial-Steps'>
    		
    			<!-- Step: Base Object Selection -->
    			<div id='MATutorial-Steps-BaseObjectSelection'>
    			
			    	<!-- Header -->
			    	<h2>{!$Label.MATutorial_Welcome}</h2>
			    	
			    	<!-- Instructions -->
			    	<p class='popup-instructions'>{!$Label.MATutorial_Popup_Instructions}</p>
			    	
			    	<!-- Content -->
			        <table id='MATutorial-BaseObjects' class='grid-blue'>
			        	<tr>
			        		<th>{!$Label.MATutorial_Available_Base_Objects}</th>
			        		<th style='text-align: center;'><span style='font-size: 10px; cursor: pointer;' onclick='$("#MATutorial-BaseObjects .data").removeClass("unchecked").addClass("checked");'>All</span> | <span style='font-size: 10px; cursor: pointer;' onclick='$("#MATutorial-BaseObjects .data").removeClass("checked").addClass("unchecked");'>None</span></th>
			        	</tr>
			            <tr class='baseobject-row standard' data-baseobject='Account'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Account}</div>
			                	<div class='fields'>{!$Label.MA_Billing_Street}, {!$Label.MA_Billing_City}, {!$Label.MA_Billing_State}, {!$Label.MA_Billing_Postal_Code}, {!$Label.MA_Billing_Country}</div>
			                	<div class='fields'>{!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row standard' data-baseobject='Contact'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Contact}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Billing_Street}, {!$Label.MA_Billing_City}, {!$Label.MA_Billing_State}, {!$Label.MA_Billing_Postal_Code}, {!$Label.MA_Billing_Country}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row standard' data-baseobject='Lead'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Lead}</div>
			                	<div class='fields'>Street, City, State, Postal Code, Country</div>
			                	<div class='fields'>{!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row standard' data-baseobject='Opportunity'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Opportunity}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Billing_Street}, {!$Label.MA_Billing_City}, {!$Label.MA_Billing_State}, {!$Label.MA_Billing_Postal_Code}, {!$Label.MA_Billing_Country}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row standard' data-baseobject='Case'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Case}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Billing_Street}, {!$Label.MA_Billing_City}, {!$Label.MA_Billing_State}, {!$Label.MA_Billing_Postal_Code}, {!$Label.MA_Billing_Country}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row standard' data-baseobject='Task'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Task}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Billing_Street}, {!$Label.MA_Billing_City}, {!$Label.MA_Billing_State}, {!$Label.MA_Billing_Postal_Code}, {!$Label.MA_Billing_Country}</div>
			                	<div class='fields'>{!$Label.MA_Account}: {!$Label.MA_Latitude} (MapAnything), {!$Label.MA_Longitude} (MapAnything)</div>
			                </td>
			                <td class='data checked'><div></div></td>
			            </tr>
			            <tr class='baseobject-row custom' data-baseobject='Custom'>
			                <td class='label'>
			                	<div class='name'>{!$Label.MA_Custom}</div>
			                	<div class='fields'>{!$Label.MATutorial_Custom_Field_Instructions}</div>
			                </td>
			                <td class='data unchecked'><div></div></td>
			            </tr>
			        </table>
			        
			        <!-- Spacer -->
			        <div style="height: 15px;">&nbsp;</div>
			        
			        <!-- Buttons -->
			        <div class='buttons'>
				        <div class="bigbutton orange" onclick="MATutorial_Steps_BaseObjectSelection_Next();">{!$Label.MATutorial_Next}</div>
			        </div>
			        
			    </div>
			    
			    <!-- Step: Custom Configuration - Basic Info -->
			    <div id='MATutorial-Steps-Custom-BasicInfo' style='display: none;'>
			    
			    	<!-- Header -->
			    	<h2>{!$Label.MATutorial_Custom_Configuration}</h2>
			    	
			    	<!-- Instructions -->
			    	<p class='popup-instructions'>{!$Label.MATutorial_Custom_Popup_Instructions}</p>
			    	
			    	<!-- Content -->
			    	<table class='grid-blue'>
			    		<tr><th colspan='2'>{!$Label.MATutorial_Basic_Info}</th></tr>
			    		<tr><td>{!$Label.MA_Name}</td><td><input type='text' id='MATutorial-Steps-Custom-Name' /></td></tr>
			    		<tr><td>Base Object</td><td><select id='MATutorial-Steps-Custom-Object' class='combobox'></select></td></tr>
			    	</table>
			    	
			    	<!-- Character Limit Disclaimer -->
			    	<div style='font-size: 10px;color: #757575;font-style: italic;float: right;'>{!$Label.MATutorial_Character_Limit}</div>
			    	
			    	<!-- Spacer -->
			        <div style='height: 15px;'>&nbsp;</div>
			    	
			    	<!-- Buttons -->
			        <div class='buttons'>
			        	<div class="bigbutton gray" style='float: left;' onclick="MATutorial_Steps_Custom_BasicInfo_Back();">{!$Label.MATutorial_Start_Over}</div>
				        <div class="bigbutton orange" onclick="MATutorial_Steps_Custom_BasicInfo_Next();">{!$Label.MATutorial_Next}</div>
			        </div>
			    
			    </div>
			    
			    <!-- Step: Custom Configuration - Field Map -->
			    <div id='MATutorial-Steps-Custom-FieldMap' style='display: none;'>
			    
			    	<!-- Header -->
			    	<h2>{!$Label.MATutorial_Custom_Field_Map}</h2>
			    	
			    	<!-- Instructions -->
			    	<p class='popup-instructions'>{!$Label.MATutorial_Custom_Field_Map_Instructions}</p>
			    	
			    	<!-- Content -->
			    	<table class='grid-blue'>
			    		<tr>
			    			<th>{!$Label.MA_Field}</th>
			    			<th style='text-align: right;'><span style='font-size: 10px; cursor: pointer;' onclick='MATutorial_Steps_Custom_FieldMap_Suggest();'>Suggest</span></th>
			    		</tr>
			    		<tr><td>Address Location</td><td><select id='MATutorial-Steps-Custom-AddressLocation' class='combobox'></select></td></tr>
			    		<tr><td>Street</td><td><select id='MATutorial-Steps-Custom-Street' class='combobox addressfield'></select></td></tr>
			    		<tr><td>City</td><td><select id='MATutorial-Steps-Custom-City' class='combobox addressfield'></select></td></tr>
			    		<tr><td>State</td><td><select id='MATutorial-Steps-Custom-State' class='combobox addressfield'></select></td></tr>
			    		<tr><td>Postal Code</td><td><select id='MATutorial-Steps-Custom-PostalCode' class='combobox addressfield'></select></td></tr>
			    		<tr><td>Country</td><td><select id='MATutorial-Steps-Custom-Country' class='combobox addressfield'></select></td></tr>
			    		<tr><td>Latitude</td><td><select id='MATutorial-Steps-Custom-Latitude' class='combobox coordinatefield'></select></td></tr>
			    		<tr><td>Longitude</td><td><select id='MATutorial-Steps-Custom-Longitude' class='combobox coordinatefield'></select></td></tr>
			    	</table>
			    	
			    	<!-- Spacer -->
			        <div style='height: 15px;'>&nbsp;</div>
			    	
			    	<!-- Buttons -->
			        <div class='buttons'>
			        	<div class="bigbutton gray" style='float: left;' onclick="MATutorial_Steps_Custom_FieldMap_Back();">{!$Label.MA_Back}</div>
				        <div class="bigbutton orange" onclick="MATutorial_Steps_Custom_FieldMap_Next();">{!$Label.MATutorial_Next}</div>
			        </div>
			    
			    </div>
			    
			    <!-- Step: Custom Configuration - Add Another -->
			    <div id='MATutorial-Steps-Custom-AddAnother' style='display: none;'>
			    
			    	<!-- Header -->
			    	<h2>{!$Label.MATutorial_Custom_Field_Instructions}</h2>
			    	
			    	<!-- Instructions -->
			    	<p class='popup-instructions'>{!$Label.MATutorial_Custom_Configuration_Popup_Finish}</p>
			    	
			    	<!-- Content -->
			    	<div>
			    		<div class='bigbutton blue' style='width: 49%;' onclick='MATutorial_Steps_Custom_AddAnother_Yes();'>
			    			<div class='title'>{!$Label.MA_Yes}</div>
			    			<div class='subtitle'>{!$Label.MATutorial_Add_Custom_Config}</div>
			    		</div>
			    		<div class='bigbutton orange' style='width: 49%;' onclick='MATutorial_Steps_Custom_AddAnother_No();'>
			    			<div class='title'>{!$Label.MA_No}</div>
			    			<div class='subtitle'>{!$Label.MATutorial_Review_Custom_Config}</div>
						</div>			    			
			    	</div>
			    
			    </div>
			    
			    <!-- Step: Review -->
			    <div id='MATutorial-Steps-Review' style='display: none;'>
			    
			    	<!-- Header -->
			    	<h2>{!$Label.MATutorial_Review}</h2>
			    	
			    	<!-- Instructions -->
			    	<p class='popup-instructions'>{!$Label.MATutorial_Add_Custom_Config_Install}</p>
			    	
			    	<!-- Content -->
			    	<div style='max-height: 400px; overflow-y: auto;'>
			    	
			    		<!-- Selected Configurations -->
			    		<table id='MATutorial-Steps-Review-SelectedConfigurations' class='grid-blue'>
			    			<tr>
			    				<th>{!$Label.MATutorial_Selected_Configurations}</th>
			    			</tr>
			    		</table>

			    	</div>
			    	
			    	<!-- Spacer -->
			        <div style='height: 15px;'>&nbsp;</div>
			    	
			    	<!-- Buttons -->
			        <div class='buttons'>
			        	<div class="bigbutton gray" style='float: left;' onclick="MATutorial_Steps_Review_Back();">{!$Label.MATutorial_Start_Over}</div>
				        <div class="bigbutton orange" onclick="MATutorial_Steps_Review_Finish();">{!$Label.MA_Finish}</div>
			        </div>
			    
			    </div>
	        
	        </div>
	        
    	</div>
	</div>

</apex:component>