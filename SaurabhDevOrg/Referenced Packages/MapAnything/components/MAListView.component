<apex:component controller="sma.MAComponentCon">
	<style>
		#listview .listview-close {
			position: absolute;
			top: 8px;
			right: 4px;
			width: 18px;
			height: 18px;
			padding: 3px;
			cursor: pointer;
		}

		.listview-close > span {
			font-size: 17px;
			opacity: 0.6;
		}

		.listview-close:hover > span {
			opacity: 1;
		}

		div#sidebar {
			left: 0;
			top: 0;
			border-radius: 0 0 4px;
			box-shadow: 0 0 4px 1px rgba(0,0,0,0.45);
		}

		#SQTree {
			border-right-width:0;
		}

		#tabs-nav > ul > li:last-of-type {
			border-top-right-radius: 0 !important;
		}

		#tabs-nav > ul > li:first-of-type {
			border-top-left-radius: 0 !important;
			border-left-color: transparent !important; 
		}

		.nav-buttons-wrapper {
			top: 8px;
			left: 313px;
		}

		#search-wrapper {
			right: 11px;
			top: 13px;
		}

		.top-row-button:first-child {
			border-left-color: transparent;
		}

		#PlottedQueriesContainer .PlottedRowUnit {
			border:0 !important;
			border-top: 2px solid #3083C7 !important;
		}

		body #mapcontainer.listview-showing {
			overflow:auto;
			overflow-x:hidden;
		}

		#listview {
			bottom: 0;
			left: 0;
			border: 0;
			border-top-right-radius: 0;
			width: 100%;
			border-radius: 0;
			padding: 13px 10px 5px 10px;
			height: 100%;
			max-height: 0;
			position: relative;
			margin: 0;
			max-height: 0;
			transition: 0.2s max-height;
			overflow: hidden;
			padding: 0;
			z-index: 1010;
		}

		#listview .button-wrapper {
			float: left;
			padding: 8px 10px;
		}

		#listview .button-wrapper .btn {
			display: block;
			float: left;
			clear: none;
		}

		#listview .button-wrapper-right {
			float: right;
			padding: 8px 10px;
		}

		#listview .button-wrapper-right .btn {
			display:block;
			float:right;
			clear:none;
			border-color: transparent !important;
		}

		#listview .button-wrapper-right .MAbutton {
			display:block;
			float:right;
			clear:none;
			border-color: transparent !important;
		}

		#listview.listview-showing {
			max-height: 100%;
			box-shadow: 0 0 4px 1px rgba(0,0,0,0.45);
		}

		#mapdiv {
			max-height:100%;
			transition: 0.2s max-height;
		}

		#mapdiv.listview-showing {
			max-height:calc(100% - 192px);
		}

		table.listview-data-table {
			width: 100%;
			border-collapse: collapse;
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li a:hover {
			background-color: #eaeaea;
			border-radius: 4px 4px 0 0;
		}

		table.listview-data-table tbody > tr > td {
			border: 1px solid #dfdfdf;
			padding: 2px 4px;
			font-size: 12px;
			font-family: Helvetica, arial, sans-serif;
			text-align:left;
		}

		table.listview-data-table>tbody>tr:nth-of-type(odd) {
			background-color: #f9f9f9;
		}

		table.listview-data-table>tbody>tr:hover {
			background-color: #f5f5f5;
		}

		.listview-search {
			background-color: #3684C5;
		}

		#listview-tabs {
			border:0;
			display: block;
			float: left;
			position: relative;
			width: 100%;
			height: 100%;
			margin: 0px;
			padding: 0px;
			background: none;
		}

		.listview-data-table tbody > tr > th {
			background-color: #3684C5;
			border: 1px solid #2573b4;
			border-top: 0;
			color: #fff;
			padding: 5px 4px;
			font-weight: normal;
			font-family: helvetica, arial, sans-serif;
			font-size: 12px;
		}


		#listview-tabs .ui-widget-header {
			border: 0;
			border-bottom: 3px solid #3684C5;
			border-radius: 0;
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li a {
			font-family: helvetica, arial, sans-serif;
			font-size: 12px;
			color: #444;
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li {
			border: 1px solid rgba(0,0,0,0.2);
			background: #ffffff;
			background: -moz-linear-gradient(top,  #ffffff 24%, #eeeeee 100%);
			background: -webkit-gradient(linear, left top, left bottom, color-stop(24%,#ffffff), color-stop(100%,#eeeeee));
			background: -webkit-linear-gradient(top,  #ffffff 24%,#eeeeee 100%);
			background: -o-linear-gradient(top,  #ffffff 24%,#eeeeee 100%);
			background: -ms-linear-gradient(top,  #ffffff 24%,#eeeeee 100%);
			background: linear-gradient(to bottom,  #ffffff 24%,#eeeeee 100%);
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li.ui-state-active {
			background:#3684C5;
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li.ui-state-active a {
			color:#fff;
		}

		#listview-tabs.ui-tabs .ui-tabs-nav li.ui-state-active a:hover {
			background:transparent;
		}

		#listview h2.listview-header {
			display: none;
		}


		.inline.button-wrapper {
			padding: 0 0 10px 0;
		}

		#listview-tabs .ui-tabs-panel {
			display: block;
			border-width: 0;
			padding: 0px 0px 0px 0px;
			background: none;
			position: relative;
			height: 100%;
			overflow: auto;
			max-height: calc(100% - 40px);
		}

		div#listview-table-scrollwrap {
			position: relative;
			max-height: calc(100% - 86px);
			border-bottom: 1px solid #ddd;
			overflow: auto;
		}

		.caret {
			display: inline-block;
			width: 0;
			height: 0;
			margin-left: 2px;
			vertical-align: middle;
			border-top: 4px dashed;
			border-top: 4px solid\9;
			border-right: 4px solid transparent;
			border-left: 4px solid transparent;
		}

		#listview .button-hover-reveal {
			display: inline-block;
			overflow: visible;
			height: 30px;
			z-index: 10;
			padding: 0;
			position: relative;
			margin: 0;
		}

		#listview .button-hover-reveal-menu {
			display: none;
			position: absolute;
			top: 30px;
			left: 1px;
			text-align: left;
			background: #fff;
			border-radius: 4px;
			border: 1px solid rgba(0,0,0,0.2);
			border-radius: 4px;
			-webkit-box-shadow: 0 6px 12px rgba(0,0,0,.175);
			box-shadow: 0 6px 12px rgba(0,0,0,.175);
			padding: 10px 0;
		}

		#listview .button-hover-reveal:hover .button-hover-reveal-menu {
			display: block;
		}

		#listview .button-hover-reveal-menu a.text-disabled {
			color: #999;
			cursor: not-allowed;
		}

		#listview .button-hover-reveal-menu a {
			display: block;
			padding: 4px 20px 3px;
			clear: both;
			font-weight: 400;
			font-size: 13px;
			cursor: pointer;
			line-height: 1.42857143;
			color: #333;
			white-space: nowrap;
			text-decoration: none !important;
		}

		#settings-listview table td ul li > span {
			float: right;
		}

		#settings-listview table td ul li {
			background: #fff;
			border-bottom: 0;
			cursor: -webkit-grab;
			cursor: -moz-grab;
			padding: 2px 4px;
			font-size: 13px;
			font-family: helvetica, arial, sans-serif;
			margin-left:0;
		}

		#settings-listview table td ul li.ui-sortable-helper {
			box-shadow: 0 2px 2px rgba(0,0,0,0.25);
		}

		#settings-listview table td ul li.ui-state-highlight {
			height: 30px;
			width: 100%;
			padding: 0;
			background-color: rgba(0,0,0,0.05);
			border-radius: 4px;
			margin: 6px 0;
			border: 1px dashed rgba(0,0,0,0.1);
		}

		#settings-listview table td ul li:hover {
			color: #000;
			border: 1px solid #aaa;
		}

		#listview .button-hover-reveal-menu a:hover {
			background-color: #eee;
		}

		.listview-footer-actions-recordperpage {
			display: inline-block;
			padding: 10px 0 0 0;
		}

		.listview-pagination-control-group a.btn-sm.btn-default {
			margin: 0;
			float: left;
			border-radius: 0 !important;
			padding-bottom: 7px !important;
			border-left: 0;
		}

		.listview-pagination-control-group a.btn-sm.btn-default:first-child {
			border-radius: 4px 0 0 4px !important;
			border-left: 1px solid #adadad;
		}

		.listview-pagination-control-group a.btn-sm.btn-default:last-child {
			border-radius: 0 4px 4px 0 !important;
			border-right: 1px solid #adadad;
		}

		.listview-footer-actions {
			width: 100%;
			box-sizing:border-box;
			padding: 4px 10px;
		}

		.listview-footer-actions > table td {
			padding-right: 15px;
		}

		#listview .listview-pane {
			position: absolute;
			left: 11px;
			top: 46px;
			width: calc(100% - 18px);
			height: calc(100% - 43px);
		}

		#settings-listview-columns-div {
			max-height: 553px;
			overflow: auto;
			border: 1px solid #ccc;
			border-radius: 5px;
			background-color: #f5f5f7;
			max-width: 426px;
			padding: 15px;
			position:relative;
		}

		#settings-listview table td li input[type="checkbox"] {
			margin-right: 10px;
		}

		#settings-listview table td ul {
			margin: 0;
			padding: 0;
			list-style-type: none;
		}

		#settings-listview table td ul li:last-child {
			border-bottom: 1px solid #ddd;
			border-radius: 0 0 4px 4px;
		}

		#settings-listview table td ul li:first-child {
			border-radius: 4px 4px 0 0;
		}

		#settings-listview table td.lvs-drag-col {
			vertical-align: top;
			width: 200px;
			padding: 9px;
		}
		
		.lvs-overflow-wrap table {
    width: 100%;
}

.lvs-cols-wrap {
    max-width: 500px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f3f3f5;
}

#settings-listview table td.lvs-cols-wrap {
    padding: 0;
    border-radius: 8px;
    background-color: #f3f3f5;
    border: 1px solid #ddd;
}

.lv-select-clear > .glyphicon-remove-circle {
    font-size: 16px;
    line-height: 1;
    margin-top: -2px;
    float: right;
}

		span.lvs-label-leftmost {
			position: absolute;
			font-size: 13px;
			font-family: helvetica, arial, sans-serif;
			color: #555555;
			top: 15px;
			left: 15px;
		}

		span.lvs-label-rightmost {
			position: absolute;
			font-size: 13px;
			font-family: helvetica, arial, sans-serif;
			color: #555555;
			bottom: 15px;
			left: 15px;
		}

		.lvs-icon-col > span {
			-ms-transform: rotate(90deg);
			-webkit-transform: rotate(90deg);
			transform: rotate(90deg);
		}

		.lvs-overflow-wrap {
			max-height: 475px;
			width: auto;
			overflow-y: auto;
		}


		.listview-data-table tr th[colid="0"], .listview-data-table tr td[colid="0"] {
			text-align: center;
			width: 1em;
		}

		.listview-data-table tr th[colid="1"], .listview-data-table tr td[colid="1"] {
			text-align: center;
			width: 1em;
		}

		.listview-data-table tr th[colid="2"], .listview-data-table tr td[colid="2"] {
			text-align: center;
			width: 1em;
		}

		.listview-data-table tr th[colid="3"], .listview-data-table tr td[colid="3"] {
			text-align: center;
			width: 1em;
		}

		button#listview-accesstab {
			font-size: 14px;
			font-weight: normal;
			position: absolute;
			background: #fff;
			left: 350px;
			box-shadow: 0 0 5px rgba(0,0,0,0.4);
			z-index: 7;
			border: 0 !important;
			transition: 0.2s all;
			vertical-align: middle;
			padding: 11px 15px 18px;
			line-height: 20px;
			border-radius: 5px 5px 0 0;
			bottom: -53px;
			transition: 0.2s all;
		}

		button#listview-accesstab.show-lv-accesstab {
			bottom:-7px;
			transition-delay:0.25s;
			transition:0.2s all;
		}

		button#listview-accesstab:hover {
			padding-bottom: 24px;
			transition: 0.1s all;
			background:#eee !important;
		}

		#listview .button-wrapper-right .btn.listview-close-button {
			font-size: 17px !important;
			padding: 4px 6px !important;
		}

		th.listview-col-sortable {
			cursor: pointer;
		}

		th.listview-col-sortable:hover {
			background-color:#4795d6;
		}

		span[role="listview-sort-arrow"] {
			padding: 5px;
			cursor: pointer;
			margin-top: -3px;
			height: 9px;
			float: right;
		}


		th.listview-col-sortable.desc span[role="listview-sort-arrow"] {
			transform: rotate(180deg);
		}

		img.mapanything-map-logo {
			position: absolute; left: 50%; bottom: 10px; z-index: 2; margin-left: -64px; height: 20px;
			transition: all 0.2s;
		}

		.listview-showing img.mapanything-map-logo {
			bottom: 199px;
		}

		/*  Ruler Styling  */

		body .RulerRowUnit .extrainfo-wrapper {
			padding: 0 !important;
			border-top: 0;
		}

		#tabs-nav .ruler-drive-wrap {
			padding: 10px 5px 0 12px;
			border-top: 1px solid #e8e8e8;
			overflow:auto;
		}

		.ruler-drive-wrap p.info-drive {
			width: 253px;
			display: block;
			margin: 0;
			float: right;
			padding:0 !important;
		}

		.info-drive .info-drive-no-traffic {
			font-weight:normal;
			color:#666668;
		}

		#tabs-nav .ruler-straight-wrap {
			padding: 10px 5px 10px 12px;
			border-bottom: 1px solid #e8e8e8;
		}

		.ruler-straight-wrap p {
			margin: 0;
			font-weight: bold;
		}

		.ruler-straight-wrap p .info-distance {
			font-weight: normal;
		}

		#tabs-nav .RulerRowUnit .info-success {
			padding: 0;
		}

		#tabs-nav .RulerRowUnit .info-options {
			border-top: 1px solid #e8e8e8;
			padding-top: 0;
		}

		#tabs-nav .ruler-waypoint-row, #tabs-nav .ruler-start-waypoint-row {
			padding: 4px 5px 7px 40px;
			position:relative;
		}

		#tabs-nav .ruler-waypoint-start::before {
			height: 13px;
			width: 13px;
			display: block;
			position: absolute;
			top: 5px;
			left: 13px;
			background-color: #008000;
			border: 1px solid #000;
			border-radius: 50%;
			content: "";
		}

		#tabs-nav .ruler-waypoint-midpoint::before {
			height: 13px;
			width: 13px;
			display: block;
			position: absolute;
			top: 5px;
			left: 13px;
			background-color: #ffffff;
			border: 1px solid #000;
			border-radius: 50%;
			content: "";
		}

		#tabs-nav .ruler-waypoint-end::before {
			height: 13px;
			width: 13px;
			display: block;
			position: absolute;
			top: 5px;
			left: 13px;
			background-color: #ff0000;
			border: 1px solid #000;
			border-radius: 50%;
			content: "";
		}

		#tabs-nav .info-waypoints {
			position: relative;
			padding: 10px 0 8px 0;;
		}

		.info-waypoints:before {
			position: absolute;
			height: 100%;
			max-height: calc(100% - 61px);
			content: "";
			width: 3px;
			left: 19px;
			top: 20px;
			background-image: url("http://cloudbilt.com/docs/dotted_line.png");
			opacity: 0.2;
		}

		#tabs-nav .ruler-waypoint-end::after {
			width: 3px;
			height: calc(100% - 12px);
			position: absolute;
			left: 19px;
			content: "";
			background-color: #f8f8f7;
			top: 22px;
		}


		.RulerRowUnit .info-options input[type="text"] {
			height: 23px;
			min-width: 75px;
			border-radius: 3px 3px 3px 3px;
			border: 1px solid rgba(0,0,0,0.2);
			text-align: center;
			vertical-align: middle;
		}

		#tabs-nav .RulerRowUnit .color-wrapper {
			padding: 2px 10px 12px !important;
		}

		.RulerRowUnit .header {
			background-color: #fff;
		}

		.ruler-waypoint-row p, .ruler-start-waypoint-row p {
			margin: 0;
		}

		.RulerRowUnit .ruler-waypoint-row-drive-info {
			color: #99999b;
		}

		.RulerRowUnit .ruler-waypoint-row-straight-info {
			color: #99999b;
		}

		.ruler-straightline-icon, img.ruler-drive-icon {
			width: 17px;
			opacity: 0.5;
		}

		.ruler-straight-wrap p {
			width: 253px;
			display: block;
			margin: 0;
			float: right;
		}

		.ruler-waypoint-row-icon img {
			width: 12px;
			margin-top: 2px;
			opacity: 0.4;
		}

		.ruler-waypoint-row div.ruler-waypoint-row-icon p{
			width: 232px;
			display: block;
			margin: 0;
			float: right;
		}

		#tabs-nav .ruler-waypoint-row div, #tabs-nav .ruler-start-waypoint-row div {
			padding: 0 0 4px;
			width: 100%;
			overflow: auto;
		}

		.ruler-drive-wrap p {
			font-weight: bold;
		}
		
		.listview-data-table tbody > tr > th.listview-col-sortable {
			cursor: pointer;
			position:relative;
			padding-right:17px;
		}

		th.listview-col-sortable:hover {
			background-color:#4795d6;
		}

		#listview th.listview-col-sortable > span {
		    background-image: url("/resource/sma__MapAnything/images/white_arrows.png");
		    background-repeat: no-repeat;
		    background-position: 0 0;
		    width: 10px;
		    position: absolute;
		    top: 5px;
		    right: 3px;
		    height: 15px;
		    opacity:0.7;
		}

		#listview th.listview-col-sortable:hover > span {
		    opacity:1;
		}

		#listview th.listview-col-sortable.listview-col-sort-asc > span {
		    background-image: url("/resource/sma__MapAnything/images/white_arrows.png");
		    background-repeat: no-repeat;
		    background-position: 0px -26px;
		    width: 10px;
		    position: absolute;
		    top: 9px;
		    right: 3px;
		    height: 10px;
		    opacity:1;
		}

		#listview th.listview-col-sortable.listview-col-sort-desc > span {
		    background-image: url("/resource/sma__MapAnything/images/white_arrows.png");
		    background-repeat: no-repeat;
		    background-position: 0px -16px;
		    width: 10px;
		    position: absolute;
		    top: 8px;
		    right: 3px;
		    height: 10px;
		    opacity:1;
		}
		
		/*  Search styling   */


		.listview-search {
			padding: 6px 0 8px 12px;
			text-align: left;
			overflow: auto;
			border-bottom: 1px solid #2573b4;
		}


		.listview-search-wrap {
			width: 275px;
			float: left;
			position: relative;
		}

		input.listview-search-text {
			border-radius: 3px;
			border: 0;
			font-family: helvetica;
			font-size: 13px;
			padding: 5px 37px 5px 23px;
			width: 151px;
			position: relative;
		}

		.listview-search-wrap .glyphicon-search {
		    position: absolute;
		    opacity: 0.3;
		    top: 3px;
		    left: 4px;
		    font-size: 16px;
		    z-index: 3;
		}

		a.lv-search-clear {
		    position: absolute;
		    left: 181px;
		    top: 1px;
		    opacity: 0.4;
		    cursor: pointer;
		    font-size: 18px;
		    padding: 2px;
		    color: #000 !important;
		    line-height: 1;
		}

		a.lv-search-clear:hover {
			opacity:0.8;
		}

		.listview-search-wrap .btn-dark {
			margin: 0;
			background: #1d486c;
			border: 1px solid rgba(0,0,0,0.1);
			color: #fff;
			line-height: 1 !important;
			font-size: 13px !important;
			border-radius: 0 3px 3px 0 !important;
			position: absolute;
			padding: 5px 8px 5px !important;
			top: 0;
			left: 202px;
		}

		.listview-search-wrap .btn-dark:hover, .listview-search-wrap .btn-dark:active {
			color:#fff !important;
			background:#0c375b;
		}

		a.lv-search-advanced {
			color: #fff;
			opacity:0.9;
			text-decoration:none;
			font-size: 13px;
			font-family: helvetica, arial, sans-serif;
			margin-top: 5px;
			display: inline-block;
			font-weight: normal;
		}

		a.lv-search-advanced:hover {
			color:#fff;
			opacity:1;
			text-decoration:underline;
			cursor:pointer;
		}

		a.lv-select-clear {
			position: absolute;
			left: 52px;
			top: 0px;
			opacity: 0.7;
			cursor: pointer;
			color: inherit !important;
		}

		a.lv-select-clear:hover {
			background-color: transparent !important;
			opacity:1.0;
		}
	
		#listview a.MAbutton .icon:before, #listview a.MAbutton.icon:before, #listview a.MAbutton.icon-left:before, #listview a.MAbutton.icon-right:before {
	        margin-top: 3px;
    		font-size: 19px;
		}
		
		#listview .button-bar > .MAbutton {
   			padding: 2px 8px 1px;
		}

		.lvs-drag-col > .connectedListViewSortable.ui-sortable {
			min-height: 273px;
		}

		.lvs-instruction {

		}

		.lvs-footnotes {

		}
	</style>

	<script type='text/javascript'>
		//define MAListView
		var MAListView = (function (options) { return {
			//bools for telling if the listview has ever been shown or is currently being shown
			wasLoaded: false,
			isShown: false,

			//some vars up here go throughout the script so they're easier to change
			shapeClass: '.PlottedShapeLayer',
			queryClass: '.testing',
			proxiClass: '.layer',

			//some html we may want to change soon
			logCallHTML: '<a href="sma__MapActions?action=log_call&id=::id::" target="_blank"><span aria-hidden="true" class="MAIcon glyphicon-phone-alt"></span></a>',
			badMarkerHTML: '<span aria-hidden="true" class="MAIcon ion-alert-circled" style="color: red; font-size: 18px"></span>',

			visibleRowHTML: '<span aria-hidden="true" class="MAIcon glyphicon-eye-open"></span>',
			invisibleRowHTML: '<span aria-hidden="true" class="MAIcon glyphicon-eye-close"></span>',

			//current maximum number of tooltips allowed
			maxTooltips: 8,

			//Setup some vars we need for the IsSelectedTab
			recordsList: [],

			listViewSettings: {
				pageSize: 10,
				pageNumber: 1,
				startIndex: 0,
				lastIndex: 0,
				selectedIds: [],
				currentSort: { columnToSort: '', sort: '' },
				filterCount: 0,
				queryCount: 0,
				filters: [],
				selectedTooltips: 0,
				mainCheckboxChecked: false
			},

			columnCount: 25,

			ListViewColumns: {
				'0'		: { "label":"Visibility",	        "visible":"true", "id":"0", "deprecated" : true,	'sortColumn' : null, "isRecordProperty" : false },				
				'1'		: { "label":'Checkbox',             "visible":"true", "id":"1", "deprecated" : false,   'sortColumn' : null, "isRecordProperty" : false },
				'2'		: { "label":"{!$Label.MA_Marker}",	"visible":"true", "id":"2", "deprecated" : false,	'sortColumn' : null, "isRecordProperty" : false },
				
				'3'		: { "label":"{!$Label.MAActionFramework_Log_a_Call}",	"visible":"true", "id":"3", "deprecated" : false,	'sortColumn' : null, "isRecordProperty" : false },

				'24'	: { "label":"{!$Label.MA_Query}",		    "visible":"true", "id":"24", "deprecated" : false,	'sortColumn' : null, 					"isRecordProperty" : false },
				'23'	: { "label":"{!$Label.MA_Distance}",		"visible":"true", "id":"23", "deprecated" : false,	'sortColumn' : 'straightDistanceValue', "isRecordProperty" : false },
				'4'		: { "label":"{!$Label.MA_Drive_Distance}",	"visible":"true", "id":"4",  "deprecated" : false,	'sortColumn' : 'driveDistanceValue', 	"isRecordProperty" : false },
				'5'		: { "label":"{!$Label.MA_Drive_Time}",		"visible":"true", "id":"5",  "deprecated" : false,	'sortColumn' : 'driveDurationValue', 	"isRecordProperty" : false },
				
				'21'	: { "label":"{!$Label.MA_Address}",	"visible":"true", "id":"21", "deprecated" : false,	'sortColumn' : 'markerAddress', "isRecordProperty" : true },
				'22'	: { "label":"{!$Label.MA_Position}","visible":"true", "id":"22", "deprecated" : false,	'sortColumn' : 'latitude', 		"isRecordProperty" : true },
				
				'13'	: { "label":"{!$Label.MA_Tooltip} 1",	"visible":"true", "id":"13", "deprecated" : false,	'sortColumn' : 'tooltip1Value', "isRecordProperty" : true },
				'14'	: { "label":"{!$Label.MA_Tooltip} 2",	"visible":"true", "id":"14", "deprecated" : false,	'sortColumn' : 'tooltip2Value', "isRecordProperty" : true },
				'15'	: { "label":"{!$Label.MA_Tooltip} 3",	"visible":"true", "id":"15", "deprecated" : false,	'sortColumn' : 'tooltip3Value', "isRecordProperty" : true },
				'16'	: { "label":"{!$Label.MA_Tooltip} 4",	"visible":"true", "id":"16", "deprecated" : false,	'sortColumn' : 'tooltip4Value', "isRecordProperty" : true },
				'17'	: { "label":"{!$Label.MA_Tooltip} 5",	"visible":"true", "id":"17", "deprecated" : false,	'sortColumn' : 'tooltip5Value', "isRecordProperty" : true },
				'18'	: { "label":"{!$Label.MA_Tooltip} 6",	"visible":"true", "id":"18", "deprecated" : false,	'sortColumn' : 'tooltip6Value', "isRecordProperty" : true },
				'19'	: { "label":"{!$Label.MA_Tooltip} 7",	"visible":"true", "id":"19", "deprecated" : false,	'sortColumn' : 'tooltip7Value', "isRecordProperty" : true },
				'20'	: { "label":"{!$Label.MA_Tooltip} 8",	"visible":"true", "id":"20", "deprecated" : false,	'sortColumn' : 'tooltip8Value', "isRecordProperty" : true },
				
				'6'		: { "label":"{!$Label.MA_Street}",		"visible":"false", "id":"6",  "deprecated" : false,	'sortColumn' : 'street',    "isRecordProperty" : true },
				'7'		: { "label":"{!$Label.MA_City}",		"visible":"false", "id":"7",  "deprecated" : false,	'sortColumn' : 'city', 		"isRecordProperty" : true },
				'8'		: { "label":"{!$Label.MA_State}",		"visible":"false", "id":"8",  "deprecated" : false,	'sortColumn' : 'state',     "isRecordProperty" : true },
				'9'		: { "label":"{!$Label.MA_Postal_Code}",	"visible":"false", "id":"9",  "deprecated" : false,	'sortColumn' : 'zip', 		"isRecordProperty" : true },
				'10'	: { "label":"{!$Label.MA_Country}",		"visible":"false", "id":"10", "deprecated" : false,	'sortColumn' : 'country', 	"isRecordProperty" : true },
				'11'	: { "label":"{!$Label.MA_Longitude}",	"visible":"false", "id":"11", "deprecated" : false,	'sortColumn' : 'longitude', "isRecordProperty" : true },
				'12'	: { "label":"{!$Label.MA_Latitude}",	"visible":"false", "id":"12", "deprecated" : false,	'sortColumn' : 'latitude',  "isRecordProperty" : true }
			},

			operators: {
				none				: '<option value="none">{!$Label.MA_None}</option>',

				equals				: '<option value="equals">{!$Label.MA_Equals}</option>',
				notEqualTo			: '<option value="notEqualTo">{!$Label.MA_Not_Equal}</option>',
				startsWith			: '<option value="startsWith">{!$Label.MA_Starts_With}</option>',
				contains			: '<option value="contains">{!$Label.MA_Contains}</option>',
				doesNotContain		: '<option value="doesNotContain">{!$Label.MA_Does_Not_Contain}</option>',
				endsWith			: '<option value="endsWith">{!$Label.MA_Ends_With}</option>',

				lessThan			: '<option value="lessThan">{!$Label.MA_Less_Than}</option>',
				lessThanEqualTo		: '<option value="lessThanEqualTo">{!$Label.MA_Less_Than_Equal}</option>',
				greaterThan			: '<option value="greaterThan">{!$Label.MA_Greater_Than}</option>',
				greaterThanEqualTo	: '<option value="greaterThanEqualTo">{!$Label.MA_Greater_Than_Equal}</option>',
				range				: '<option value="range">{!$Label.MA_Range}</option>',
			},

			//distance matrix
			DistanceMatrixProcessing: false,
			DistanceMatrixRequest: [],


			//################################################## KEEPING ##################################################

			//========== DRAWING ==========
			// Draws the entire tab
			DrawTab: function(options) {
				/*
					var options = {
						layerId         : 'string',
						isSelectedTab   : true|false,
						isExport        : true|false 
				   }
				*/
				
				//first let's get the recordsList which should contain a list of record Ids in order for us to display.
				//and let's get the list view settings needed
				
				var recordsList = [];
				var listViewSettings = {
					pageSize: 10,
					pageNumber: 1,
					startIndex: 0,
					lastIndex: 0,
					selectedIds: [],
					currentSort: { columnToSort: '', sort: '' },
					filterCount: 0,
					queryCount: 0,
					filters: [],
					selectedTooltips: 0,
				    mainCheckboxChecked: false
				}
				
				//we make an object for the layerData in case we need to span mulitpule queries
				var layerData = {};
				var layerDataId = '';
				
				if (options.isSelectedTab)
				{
					//since this is the selected tab, let's pull from the "selected" object inside MAListView
					recordsList = MAListView.recordsList;
					listViewSettings = MAListView.listViewSettings;
					
					var queryCount = 0;
					var selectedTooltips = 0;
					
					$.each(MAListView.recordsList, function( index, value ) {
						if (!layerData.hasOwnProperty(value.layerId))
						{
							layerData[value.layerId] = $('[qid="' + value.layerId + '"]').data();
							layerDataId = value.layerId;
							queryCount++;
							var tooltipLength = $('[qid="' + value.layerId + '"]').data('tooltips').length
							selectedTooltips = tooltipLength > listViewSettings.selectedTooltips ? tooltipLength : listViewSettings.selectedTooltips
						}
					});
					
					MAListView.listViewSettings.queryCount = queryCount;
					MAListView.listViewSettings.selectedTooltips = selectedTooltips;
					
				}
				else
				{
					layerData[options.layerId] = $('[qid="' + options.layerId + '"]').data();
					
					//do we have any settings?
					if (layerData[options.layerId].listViewSettings)
					{
						listViewSettings = layerData[options.layerId].listViewSettings;
					}
					
					//we should have a recordList
					if (layerData[options.layerId].recordList)
					{
						recordsList = layerData[options.layerId].recordList;
					}
					else
					{
						MAListView.log('missing recordList!!!');
					}
				}
				
				//if this an export, let's modify the listViewSettings to show all of the rows
				if (options.isExport)
				{
					listViewSettings.pageSize = userSettings.maxExportSize === 0 ? 1000000 : userSettings.maxExportSize;
					listViewSettings.startIndex = 0;
				}

				//we have a search-all box that may or may not have the 'enter-keypress' class
				if(!$('#' + options.layerId).find('.listview-search').hasClass('enter-keypress')) {
					var isCreating = '';
					//add enter-keypress ability since it's not there
					$('#' + options.layerId).find('.listview-search-text').keypress( function(e) {
						if(e.keyCode == 13) { 
							$('#' + options.layerId).find('a[role="search"]').click();
						}
					});

					//add this class so we know we've been here already
					$('#' + options.layerId).find('.listview-search').addClass('enter-keypress');
				}

				//let's make the table and table header
				var tableHTML = '<table>';

				var layerDataToPass = options.isSelectedTab ? layerData[layerDataId] : layerData[options.layerId];

				//header, loop over the user selected perferences for the columns
				tableHTML += MAListView.DrawTabTableHeader({
					isSelectedTab   : options.isSelectedTab,
					layerData       : layerDataToPass,
					isExport        : options.isExport
				});
				
				//loop over the records until we've shown enough records or we've run out of the records to show. 
				//since records is an object it self with properties, we need to loop over the properties and keep track of where we're at
				var DrawTabTableDataRowsReturn = MAListView.DrawTabTableDataRows({
					
					layerId             : options.layerId,
					recordsList         : recordsList,
					listViewSettings    : listViewSettings,
					layerData           : layerData,
					isSelectedTab       : options.isSelectedTab,
					isExport            : options.isExport
				});
				
				tableHTML += DrawTabTableDataRowsReturn.dataRowsHTML;
				
				//Render Table Html
				if (options.isExport)
				{
					//if this is to be exported, let's add it to the hidden export table
					$('#HiddenExportTable').html(tableHTML + '</table>');
				}
				else
				{
					$('#' + options.layerId).find('table.listview-data-table').html(tableHTML + '</table>');
					MAListView.UpdatePageShowing(options);
				}
				
				if(userSettings.maxExportSize <= 0) {
				    $('div#' + options.layerId).find('a[role="ListView-Export-Button"]').hide();
				}

				//always redraw headers with correct sorts applied
				$('div#' + options.layerId + ' th[colid="' + listViewSettings.currentSort.columnToSort + '"]').removeClass('asc').removeClass('desc').addClass(listViewSettings.currentSort.sort);
				
				//add click to the main checkbox for this tab
				if($('div#' + options.layerId).find('input.listview-main-checkbox').length > 0 && options.layerId !== 'SelectedTab') {
    				$('div#' + options.layerId).find('input.listview-main-checkbox')[0].checked = layerData[options.layerId].listViewSettings.mainCheckboxChecked;
    				$('div#' + options.layerId).find('input.listview-main-checkbox').click( function() {
    				  
    				    if(this.checked) {
    				        layerData[options.layerId].listViewSettings.mainCheckboxChecked = true;
    				        MAListView.SelectAll(options.layerId);
    				    } else if(!this.checked) {
    				        layerData[options.layerId].listViewSettings.mainCheckboxChecked = false;
    				        MAListView.ClearSelected(options.layerId);
    				    }
    				    
    				});
				}
			},

			// Draws the table header for the table inside the tab
			DrawTabTableHeader: function(options) {
				/*
					//listViewSettings is returned with the update startIndex
				
					var options = {
						isSelectedTab   : true|false,
						layerData       : {}
				   }
				*/

				//are we in the selected tab or not?
				var layerId = options.isSelectedTab ? 'SelectedTab' : options.layerData.qid;
				var rowHTML = '<tr>';
					
				$.each(userSettings.ListViewColumns, function( index, colId ) {
					var col = MAListView.ListViewColumns[colId.id];

					if (col.deprecated == false)
					{
					
						var colTitle = 'Missing';
						var colVisible = true;
						
						//these are the special selected tab-only columns
						if ((options.isSelectedTab && col.id=='1') || (!options.isSelectedTab && (col.id=='4' || col.id=='5' || col.id=='23' || col.id=='24')))
						{
							colVisible = false;
						} else if((options.isSelectedTab && col.id=='24')) {
							colVisible = MAListView.listViewSettings.queryCount > 1 ? true : false;
							colTitle = 'Query Name';
						}
						
						//if we're building a selected tab, let's leave the heading names alone
						if (options.isSelectedTab)
						{
							var tooltipId = parseInt(col.id) - 13;

							if (MAListView.ListViewColumns.hasOwnProperty(col.id) && MAListView.listViewSettings.queryCount > 1)
							{
								if(jQuery.inArray(col.id,[ '13','14','15','16','17','18','19','20' ]) > -1 && tooltipId >= MAListView.listViewSettings.selectedTooltips) {
									colVisible = false;
								} else {
									colTitle = MAListView.ListViewColumns[col.id].label;
								}
								
							} else {
								if(jQuery.inArray(col.id,[ '13','14','15','16','17','18','19','20' ]) > -1 && tooltipId < options.layerData.tooltips.length) {
									colTitle = options.layerData.tooltips[tooltipId].FieldLabel;
								} else if(jQuery.inArray(col.id,[ '13','14','15','16','17','18','19','20' ]) > -1 && tooltipId >= options.layerData.tooltips.length) {
									colVisible = false;
								} else {
									colTitle = MAListView.ListViewColumns[col.id].label;
								}
							}
						}
						//otherwise we'll use more formal names, especially with tooltips
						else
						{
						    // is it a normal column or a tooltip or something else?
						    if(jQuery.inArray(col.id,[ '0','1','2','3','4','5','6','7','8','9','10','11','12','21','22','23','24' ]) > -1) {
						        
						        colTitle = MAListView.ListViewColumns[col.id].label;
						        
						    } else if(jQuery.inArray(col.id,[ '13','14','15','16','17','18','19','20' ]) > -1) {
						        
						        var tooltipId = parseInt(col.id) - 13;
                                if (options.layerData.tooltips[tooltipId]) {
                                    colTitle = options.layerData.tooltips[tooltipId].FieldLabel;
                                } else {
                                    colVisible = false;
                                }
                                
						    } else {
						        colTitle = 'Missing';
						    }
						}
						
						if(col.id == '1') {
						    colTitle = '<input type="checkbox" class="listview-main-checkbox">';
						}
						
						//is the column visible? is it deprecated?
						if (colVisible) {
							//visible and NOT deprecated columns get built here
							if((options.isSelectedTab && colTitle.indexOf('Tooltip') > -1 && MAListView.listViewSettings.queryCount > 1) || MAListView.ListViewColumns[col.id].sortColumn == null) {
								rowHTML += '<th colid="' + col.id + '">' + colTitle + '</th>';
							} else {
								rowHTML += '<th class="listview-col-sortable" colid="' + col.id + '" onclick="MAListView.SortFromDOM(this);">' + colTitle + '<span></span></th>';
							}
						}
						else if (!colVisible) {
							//invisible and NOT deprecated columns get built here
							if((options.isSelectedTab && colTitle.indexOf('Tooltip') > -1 && MAListView.listViewSettings.queryCount > 1) || MAListView.ListViewColumns[col.id].sortColumn == null) {
								rowHTML += '<th style="display: none;" colid="' + col.id + '">' + colTitle + '</th>';
							} else {
								rowHTML += '<th class="listview-col-sortable" style="display: none;"  colid="' + col.id + '" onclick="MAListView.SortFromDOM(this);">' + colTitle + '<span></span></th>';
							}
						}
					}
				});
				
				rowHTML += options.isExport ? '<th colid="100">Record ID</th>' : '' ;
				
				rowHTML += '</tr>';
				
				return rowHTML;
			},

			// Draws a single data row for the table inside the tab
			DrawTabTableDataRow: function(recordListItem, layerId, property, record, layerData, listViewSettings, isSelectedTab) {
	            if(record !== undefined) {
    				//get the lat and lng for the marker or leave as N/A if it's N/A
    				var lat = 'N/A';
    				var lng = 'N/A';
    				
    				if (record.marker === undefined) 
    				{
    					lat = 'N/A';
    					lng = 'N/A';
    				}
    				else
    				{
    					lat = record.marker.getPosition().lat();
    					lng = record.marker.getPosition().lng();
    				}
    				
    				var rowHTML = '<tr rowtype="data-row" lat="' + lat + '" lng="' + lng + '">';
    					
    				$.each(userSettings.ListViewColumns, function( index, colId ) {
    					var col = MAListView.ListViewColumns[colId.id];
    								
    					//if this isn't the IsSelectedTab let's not show columns 4 & 5 (Diriving Distance/Time) NOTE
    					if (col.deprecated == false)
    					{
    					
    						var colContents = 'Missing';
    						var colVisible = true;
    						
    						//these are the special selected tab-only columns
    						if ((isSelectedTab && col.id=='1') || (!isSelectedTab && (col.id=='4' || col.id=='5' || col.id=='23' || col.id=='24')))
    						{
    							colVisible = false;
    						} else if((isSelectedTab && col.id=='24')) {
    							colVisible = MAListView.listViewSettings.queryCount > 1 ? true : false;
    						}
    						switch(col.id)
    						{
    							case '0': 
    								if (record.isVisible || record.isClustered)
    								{
    									colContents = MAListView.visibleRowHTML;
    								}
    								else
    								{
    									colContents = MAListView.invisibleRowHTML;
    								}
    								break;
    							case '1':  
    								colContents = '';
    								if (record.record)
    								{
    									if (jQuery.inArray( property, listViewSettings.selectedIds) > -1   )
    									{
    										colContents = '<input type="checkbox" id="' + layerId + '-' + record.record.Id + '" checked="checked" onclick="MAListView.RowSelected(\'' + record.record.Id + '\',\'' + layerId + '\',this);"/>';
    									}
    									else
    									{
    										colContents = '<input type="checkbox" id="' + layerId + '-' + record.record.Id + '" onclick="MAListView.RowSelected(\'' + record.record.Id + '\',\'' + layerId + '\',this);"/>';
    									}
    								}
    								break;
    							case '2':  
    								//colContents = 'Marker';
    								
    								if(record.marker === undefined) 
    								{
    									colContents = MAListView.badMarkerHTML;
    								} 
    								else 
    								{
    									colContents = '<a onClick="MAListView.MarkerClick(\'' + layerData.qid + '\',\'' + record.record.Id + '\')">';
    									
    									switch(layerData.markerMetadata.ColorAssignmentType) 
    									{
    										case 'Static':
    											var brush = record.marker.brush.indexOf(':') >= 0 ? record.marker.brush.replace('#', '') : record.marker.brush.replace('#', '') + ':Marker';
    											if(brush.indexOf('image') >= 0) {
    												colContents += '<img src="' + MA.SitePrefix + '/servlet/servlet.FileDownload?file=' + brush.split(':')[1] + '" style="width:20px;" />';
    											} else {
    												colContents += '<img src="https://product-api-prod.cloudbilt.com/marker/marker.php?marker=' + brush + '" style="width:12px;" />';
    											}
    											
    											break;
    										case 'Dynamic, Field':
    											var brush = record.marker.brush.indexOf(':') >= 0 ? record.marker.brush.replace('#', '') : record.marker.brush.replace('#', '') + ':Marker';
    											if(brush.indexOf('image') >= 0) {
    												colContents += '<img src="' + MA.SitePrefix + '/servlet/servlet.FileDownload?file=' + brush.split(':')[1] + '" style="width:20px;" />';
    											} else {
    												colContents += '<img src="https://product-api-prod.cloudbilt.com/marker/marker.php?marker=' + brush + '" style="width:12px;" />';
    											}
    											break;
    										case 'Dynamic-Order':
    											colContents += record.index + 1;
    											break;
    										case 'Dynamic-Label':
    											colContents += 'Label';
    											break;
    										default:
    											colContents +=  '<img src="https://product-api-prod.cloudbilt.com/marker/marker.php?marker=00FF00:Marker" style="width:12px;" />';
    											break;
    									}
    
    									colContents += '</a>';
    								}
    								
    								
    								break;
    							case '3':  
    								colContents = MAListView.logCallHTML.replace('::id::', record.record.Id);
    								break;
    							case '23':  
    								colContents = 'Distance';
    								
    								if (recordListItem.straightDistanceText)
    								{
    									colContents = recordListItem.straightDistanceText;
    								}
    								else
    								{
    									colContents = '';
    								}
    								
    								break;
    							case '24':  
    								colContents = '';
    								
    								if (layerData.savedQueryName)
    								{
    									colContents = layerData.savedQueryName;
    								}
    								
    								break;
    							case '4':  
    								colContents = '';
    								
    								if (recordListItem.driveDistanceText)
    								{
    									colContents = recordListItem.driveDistanceText;
    								}
    								
    								break;
    							case '5':  
    								colContents = '';
    								
    								if (recordListItem.driveDurationText)
    								{
    									colContents = recordListItem.driveDurationText;
    								}
    								
    								
    								break;
    							case '21':  
    								colContents = '';
    								
    								colContents = MAListView.FormatAddress(record.markerAddress);
    								
    								
    								break;
    								
    							case '6':  
    								colContents = '';
    								
    								if (layerData.addressFields && layerData.addressFields.Street && record.record)
    								{
    									if (record.record[layerData.addressFields.Street])
    									{
    										colContents = record.record[layerData.addressFields.Street];
    									}
    									else if(record.hasOwnProperty(MAListView.ListViewColumns[col.id].sortColumn))
    									{
    										colContents = record[MAListView.ListViewColumns[col.id].sortColumn];
    									}
    								}
    								
    								break;
    							
    							case '7':  
    								colContents = '';
    								
    								if (layerData.addressFields && layerData.addressFields.City && record.record)
    								{
    									if (record.record[layerData.addressFields.City])
    									{
    										colContents = record.record[layerData.addressFields.City];
    									}
    									else if(record.hasOwnProperty(MAListView.ListViewColumns[col.id].sortColumn))
    									{
    										colContents = record[MAListView.ListViewColumns[col.id].sortColumn];
    									}
    								}
    								
    								break;  
    							case '8':  
    								colContents = '';
    								
    								if (layerData.addressFields && layerData.addressFields.State && record.record)
    								{
    									if (record.record[layerData.addressFields.State])
    									{
    										colContents = record.record[layerData.addressFields.State];
    									}
    									else if(record.hasOwnProperty(MAListView.ListViewColumns[col.id].sortColumn))
    									{
    										colContents = record[MAListView.ListViewColumns[col.id].sortColumn];
    									}
    								}
    								break;
    							case '9':  
    								colContents = '';
    								
    								if (layerData.addressFields && layerData.addressFields.Zip && record.record)
    								{
    									if (record.record[layerData.addressFields.Zip])
    									{
    										colContents = record.record[layerData.addressFields.Zip];
    									}
    									else if(record.hasOwnProperty(MAListView.ListViewColumns[col.id].sortColumn))
    									{
    										colContents = record[MAListView.ListViewColumns[col.id].sortColumn];
    									}
    								}
    								break;
    							case '10': 
    								colContents = '';
    								
    								if (layerData.addressFields && layerData.addressFields.Country && record.record)
    								{
    									if (record.record[layerData.addressFields.Country])
    									{
    										colContents = record.record[layerData.addressFields.Country];
    									}
    									else if(record.hasOwnProperty(MAListView.ListViewColumns[col.id].sortColumn))
    									{
    										colContents = record[MAListView.ListViewColumns[col.id].sortColumn];
    									}
    								}
    								break; 
    							case '22': 
    								if (lat != 'N/A')
    								{
    									colContents = parseFloat(lat).toFixed(4) + ',' + parseFloat(lng).toFixed(4);
    								}
    								else
    								{
    									colContents = 'N/A';
    								}
    								
    								break;
    							
    							case '11': 
    								
    								colContents = lat;
    								break; 
    							
    							case '12': 
    								
    								colContents = lng;
    								break; 
    							
    							case '13': //Tooltip1
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 0,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break; 
    							case '14': //Tooltip2
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 1,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break; 
    							case '15': //Tooltip3
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 2,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break;  
    							case '16':  //Tooltip4
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 3,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break; 
    							case '17': //Tooltip5
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 4,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break; 
    							case '18': //Tooltip6
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 5,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break; 
    							case '19':  //Tooltip7
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 6,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break;
    							case '20'://Tooltip8
    								
    								var ProcessToolTipColumnReturn = MAListView.ProcessToolTipColumn({
    									toolTipIndex: 7,
    									record: record,
    									layerData: layerData,
    									isSelectedTab: isSelectedTab
    								});
    								
    								colContents = ProcessToolTipColumnReturn.colContents;
    								colVisible = ProcessToolTipColumnReturn.colVisible;
    								
    								break;
    							default:
    								colContents = 'Missing';
    								break;
    						}
    							
    						
    						
    						if (colVisible)
    						{
    							rowHTML += '<td colid="' + col.id + '">' + colContents + '</td>';
    						}
    						else
    						{
    							rowHTML += '<td style="display: none;" colid="' + col.id + '">' + colContents + '</td>';
    						}
    						
    						
    					}
    			
    				});
    				
    				rowHTML += '</tr>';
    				
    				return rowHTML;
	            } else {
	                return '';
	            }
			},

			// Draws N table data rows calling on DrawTabTableDataRow()
			DrawTabTableDataRows: function(options) {
				
				/*
					//listViewSettings is returned with the update startIndex
				
					var options = {
						layerId			: 'string',
						recordsList		: [],
						listViewSettings: {
											pageSize: 10,
											pageNumber: 1,
											startIndex: 0,
											selectedIds: [],
											currentSort: { columnToSort: '', sortAscending: true },
											currentFilter: { columnToFilter: '', filterString: '', filterCount: 0; }
										},
						layerData		: {},
						isSelectedTab	: true|false,
						
						//return vars
						dataRowsHTML	: 'string'
				   }
				*/
				
				var dataRowsHTML = '';				
				var recordsListLength = options.recordsList.length;
				var recordsDisplayed = 0;
				var startIndex = options.listViewSettings.startIndex;
				
				for (; (recordsDisplayed < options.listViewSettings.pageSize) && (startIndex < recordsListLength); startIndex++)
				{
					//gets the actual record data

					var recordListItem = options.recordsList[startIndex];
					var recordId = recordListItem.recordId;
					var record = options.layerData[recordListItem.layerId].records[recordId];
				    
				    if(record != undefined) {
    					//is this record visible? if so, let's display it
    					if(recordListItem.isVisible && record !== undefined) {
    						dataRowsHTML += MAListView.DrawTabTableDataRow(recordListItem, options.layerId, recordId, record, options.layerData[recordListItem.layerId], options.listViewSettings, options.isSelectedTab, options.isExport);
    						recordsDisplayed++;
    					}
				    } else {
				        recordsDisplayed++;
				    }
				}
				
				options.dataRowsHTML = dataRowsHTML;
				
				return options;
			},



			//========== METHODS FOR MANIPULATING TABS ==========
			// Adds a tab to the list of tabs
			AddTab: function(layerId) {
				if(!MAListView.TabExists(layerId)) {
				
					var title = '';
					var data = '';
		
					var isQuery = MAListView.IsQuery(layerId);
					var isProxLayer = MAListView.IsProxLayer(layerId);
		
					//is this a query or a shape?
					if(isQuery) {
						title = $(MAListView.queryClass + '[qid="' + layerId + '"]').data('savedQueryName');
					} else if(isProxLayer) {
						title = $(MAListView.proxiClass + '[qid="' + layerId + '"]').data('title');
					} else {
						var t1 = $(MAListView.shapeClass + '[qid="' + layerId + '"]').data('dataLayer').style.proxType;
						var t2 = $(MAListView.shapeClass + '[qid="' + layerId + '"]').data('labels')[0].text;
		
						title = t1 === undefined || t1 === null ? t2 : t1;
					}
					
					var $tabContent = $('#templates #ListViewTabContents').clone().html()
						.replace(/::layerId::/g, layerId);
					
					//put the title and data in the tabs
					$('#listview-tabs ul').append('<li><a href="#' + layerId + '">' + title + '</a></li>');
					$('#listview-tabs').append('<div id="' + layerId + '">' + $tabContent + '</div>');
					$('#listview-tabs').tabs();
				}
			},

			// Removes a specific tab from the list of tabs
			RemoveTab: function(layerId) {
				if(MAListView.TabExists(layerId)) {
					//need to figure out if we should close the list view panel or not?
					if($('#listview-tabs li').length <= 1) {
						//if this is the last tab, hide the listview
						MAListView.CloseListViewNoLayers();
					}

					$('#listview-tabs').find('li a[href="#' + layerId + '"]').closest('li').remove();
					$('#listview-tabs').find('div#' + layerId).remove();

					//$('#listview-tabs').tabs("refresh");
				}
			},

			// Selects a tab from the list of tabs and makes it active/selected on screen
			SelectTab: function(layerId) {
				if(MAListView.TabExists(layerId)) {
					//this selects the tab
					if(MAListView.wasLoaded && MAListView.isShown) {
						var index = $('#listview-tabs a[href="#' + layerId + '"]').parent().index();
						$('#listview-tabs').tabs( 'option', 'active', index);
					}
				}
			},

			// Uses various methods to add, select, and show the correct tab
			ConstructTab: function(layerId) {
				MAListView.AddTab(layerId);
				MAListView.DrawTab({ layerId: layerId, isSelectedTab: false, isExport: false });

				if (MAListView.isShown) {
					MAListView.Show();
					MAListView.SelectTab(layerId);
				}

				$('#listview-accesstab').show();

				//default to the userSettings value for the first draw
				if(userSettings.PageSizeDefault) {
					$('div#' + layerId).find('select').val(userSettings.PageSizeDefault);
					MAListView.ChangePageSize(layerId, parseInt(userSettings.PageSizeDefault));
				}
			},

			// Uses ConstructTab to construct tabs from all currently plotted queries
			ConstructAllTabs: function() {
				if ($(MAListView.queryClass).length > 0) {
					var arr = $(MAListView.queryClass);

					for(var i=0; i<arr.length; i++) { 
						var qid = arr[i].getAttribute('qid'); 
						MAListView.ConstructTab(qid);
					}
				} else {
					alert('Please plot a query first!');
				}

				MAListView.Show();
			},

			// Removes all tabs
			RemoveAllTabs: function() {
				MAListView.Hide();

				var arr = $(MAListView.queryClass);
				for(var i=0; i<arr.length; i++) { 
					var qid = arr[i].getAttribute('qid'); 
					MAListView.RemoveTab(qid);
				}

				MAListView.RemoveTab('SelectedTab');
			},

			// Checks to see if the tab exists
			TabExists: function(layerId) {
				//is the tab undefined or not?
				if($('div[id="' + layerId + '"]')[0] !== undefined) {
					return true;
				}

				return false;
			},



			//========== EXPORTING ==========
			// Exports the data to a CSV file
			ExportTab: function(layerId, filename) {
				if(filename === undefined) {
					filename = 'export.csv';
				}

				var isSelectedTab = layerId == 'SelectedTab';
				//shoves the data in a hidden table
				MAListView.DrawTab({ layerId: layerId, isSelectedTab: isSelectedTab, isExport: true });

				//converts th tags to td tags
				$('#HiddenExportTable').find('th').wrapInner('<td />').contents().unwrap();

				//grabs the data in the hidden table
				var $rows = $('#HiddenExportTable').find('tr:has(td)');
				var tmpColDelim = String.fromCharCode(11);
				var tmpRowDelim = String.fromCharCode(0);

				var colDelim = '","';
				var rowDelim = '"\r\n"';

				var csv = '"' + $rows.map(function (i, row) {
					var $row = $(row);
					var $cols = $row.find('td');

					return $cols.map(function (j, col) {
						var $col = $(col);
						var text = $col.text();

						return text.replace(/"/g, '""');
					}).get().join(tmpColDelim);
				}).get().join(tmpRowDelim).split(tmpRowDelim).join(rowDelim).split(tmpColDelim).join(colDelim) + '"';

				var csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csv);
				
				if (window.navigator.msSaveOrOpenBlob) {
				  var blob = new Blob([decodeURIComponent(encodeURI(csv))], {
				    type: "text/csv;charset=utf-8;"
				  });
				  
				  navigator.msSaveBlob(blob, filename);
				} else {
				  $(this).attr({ 'download': filename, 'href': csvData, 'target': '_blank' });
				}

				//empties the hidden table
				$('#HiddenExportTable').html('');
			},



			//========== SEARCHING ==========
			// Searches ALL visible column data
			SearchAll: function($element) {
				//var layerId = $element.closest('div[id]').getAttribute('id');
				//workaround for IE
				var layerId = $element.parentElement.parentElement.parentElement.id;
				var searchTerm = $('#' + layerId).find('.listview-search-text').val();
				var settings = layerId !== 'SelectedTab' ? $(MAListView.queryClass + '[qid="' + layerId + '"]').data('listViewSettings') : MAListView.listViewSettings;

				//check to see if it exists
				var index = MAListView.FilterExists({ layerId: layerId, colId: '-1' });

				if(index > -1) {
					//the filter exists, modify it
					settings.filters[index].value = searchTerm;
				} else {
					//the filter doesn't exist, create it
					settings.filters.push({
						colId: '-1',
						operator: 'contains',
						value: searchTerm 
					});
				}
				
				//redraw tab
				MAListView.Search({ layerId: layerId });
			},

			// Complete search function
			Search: function(options) {
				/*
					options = {
						layerId: 'string'
					}
				*/
				
				var spot = -1;

				try {
					var count = 0;

                    spot = 0;
                    
                    
					//is this selected tab or not?
					if(options.layerId === 'SelectedTab') {
						MAListView.listViewSettings.pageNumber = 1;
						MAListView.listViewSettings.startIndex = 0;
						
						spot = 1;
						
						//for each record
						for (var ii = MAListView.recordsList.length - 1; ii >= 0; ii--) {
							//for each filter
							var layer = $(MAListView.queryClass + '[qid="' + MAListView.recordsList[ii].layerId + '"]').data();
							var record = layer.records[MAListView.recordsList[ii].recordId];

							var filterCount = MAListView.listViewSettings.filters.length;
							var allMatch = true;
							var jj = 0;
							
							spot = 2;

							while ((jj < filterCount) && allMatch) {
								//let's get our data
								var colId = MAListView.listViewSettings.filters[jj].colId;
								var columnValue = '';
								
								spot = 3;

								//is this a search all or a search column?
								if(colId > -1) {
									var column = MAListView.ListViewColumns[colId].sortColumn;
									var isRecordProperty = MAListView.ListViewColumns[colId].isRecordProperty;

									columnValue = isRecordProperty ? record[column] : MAListView.recordsList[ii][column];
									// console.log('column:',column);
									// console.log('columnValue:',columnValue);
								} else {
									for (var kk = 0; kk < MAListView.columnCount; kk++) {
										if(userSettings.ListViewColumns.hasOwnProperty(kk)) {
											var colProps = MAListView.ListViewColumns[userSettings.ListViewColumns[kk].id];

											if(!colProps.deprecated && colProps.visible === 'true' && colProps.sortColumn !== null) {
												//if this data is displayed, add it to the string version of the data
												columnValue += record[colProps.sortColumn];
											}
										}
									}
								}
								
								spot = 4;

								//check if they match
								allMatch = MAListView.IsMatch({
									searchTerm: MAListView.listViewSettings.filters[jj].value,
									operator: MAListView.listViewSettings.filters[jj].operator,
									value: columnValue
								});

								jj++;
							}
							
							spot = 5;

							//set the visibility
							MAListView.recordsList[ii].isVisible = allMatch;
							count = allMatch ? count+1 : count;
						}

						MAListView.listViewSettings.filterCount = count;
					} else {
						//for each record (not selected tab)
						var layer = $(MAListView.queryClass + '[qid="' + options.layerId + '"]').data();

						layer.listViewSettings.pageNumber = 1;
						layer.listViewSettings.startIndex = 0;

						for (var ii = layer.recordList.length - 1; ii >= 0; ii--) {
							//for each filter
							var record = layer.records[layer.recordList[ii].recordId];

							var filterCount = layer.listViewSettings.filters.length;
							var allMatch = true;
							var jj = 0;

							while ((jj < filterCount) && allMatch) {
								//let's get our data
								var colId = layer.listViewSettings.filters[jj].colId;
								var columnValue = '';

								//is this a search all or a search column?
								if(colId > -1) {
									var column = MAListView.ListViewColumns[colId].sortColumn;
									var isRecordProperty = MAListView.ListViewColumns[colId].isRecordProperty;

									columnValue = record[column];
								} else {
									for (var kk = 0; kk < MAListView.columnCount; kk++) {
										if(userSettings.ListViewColumns.hasOwnProperty(kk)) {
											var colProps = MAListView.ListViewColumns[userSettings.ListViewColumns[kk].id];

											if(!colProps.deprecated && colProps.visible === 'true' && colProps.sortColumn !== null) {
												//if this data is displayed, add it to the string version of the data
												if(record !== undefined) {
												    columnValue += record[colProps.sortColumn];
												}
											}
										}
									}
								}

								//check if they match
								allMatch = MAListView.IsMatch({
									searchTerm: layer.listViewSettings.filters[jj].value,
									operator: layer.listViewSettings.filters[jj].operator,
									value: columnValue
								});

								jj++;
							}

							//set the visibility
							layer.recordList[ii].isVisible = allMatch;
							count = allMatch ? count+1 : count;
						}

						layer.listViewSettings.filterCount = count;
					}

					MAListView.DrawTab({
						layerId: options.layerId,
						isSelectedTab: options.layerId === 'SelectedTab',
						isExport: false
					});

					//enable the select all button
					if(options.layerId !== 'SelectedTab' && count > 0) {
						$('div#' + options.layerId + ' a:contains("Select All")').show();
					}
				} catch (e) {
					//WE BROKE IT!
					MAListView.log(e);
					console.log(spot);
				}

				//what filters do we have on this thing?

				//set the current filter

				//colId, operator, value
			},

            // Is this a string, a number, or a boolean?
			IsMatch: function(options) {
				/*
					options = {
						searchTerm,
						operator,
						value
					}
				*/
				
				switch(typeof options.value) {
					case 'string':
						return MAListView.MatchString(options);
					case 'number':
						return MAListView.MatchNumber(options);
					case 'boolean':
						return MAListView.MatchBoolean(options);
					default:
						return false;
				}
			},

            // Matches strings
			MatchString: function(options) {
				var value = options.value.toLowerCase();
				var search = options.searchTerm.toLowerCase();

				if(options.operator === 'equals' && value === search) {	return true; }
				else if(options.operator === 'notEqualTo' && value !== search) { return true; }
				else if(options.operator === 'startsWith' && value.indexOf(search) === 0) { return true; }
				else if(options.operator === 'contains' && value.indexOf(search) > -1) { return true; }
				else if(options.operator === 'doesNotContain' && value.indexOf(search) === -1) { return true; }
				else { return false; }
			},

            // Matches numbers
			MatchNumber: function(options) {
				var value = options.value;
				var search = options.searchTerm;
				
				if(options.operator === 'equals' && value === search) {	return true; }
				else if(options.operator === 'notEqualTo' && value !== search) { return true; }
				else if(options.operator === 'lessThan' && value < search) { return true; }
				else if(options.operator === 'lessThanEqualTo' && value <= search) { return true; }
				else if(options.operator === 'greaterThan' && value > search) { return true; }
				else if(options.operator === 'greaterThanEqualTo' && value >= search) { return true; }
				else { return false; }
			},

            // Matches booleans
			MatchBoolean: function(options) {
				//is the search term a string?
				var search = true;
				if(typeof options.searchTerm === 'string') {
					search = options.searchTerm === 'true';
				} else {
					search = options.searchTerm;
				}

				// console.log('search:',search);
				// console.log('value:',options.value);

				return options.value === search;
			},

            // Checks to see if the filter exists already
			FilterExists: function(options) {
			  /*
					options = {
						layerId: 'string',
						colId: integer
					}
				*/
				var filters = [];

				if(options.layerId !== 'SelectedTab') {
					filters = $(MAListView.queryClass + '[qid="' + options.layerId + '"]').data().listViewSettings.filters;
				} else {
					filters = MAListView.listViewSettings.filters;
				}

				for(var ii=filters.length-1; ii>=0; ii--) {
					if(filters[ii].colId == options.colId) {
						return ii;
					}
				}

				return -1;
			},
			
		    // Gets the data for the specified filter
			GetFilterData: function(options) {
			  /*
					options = {
						layerId: 'string',
						colId: integer
					}
				*/
				var filters = [];
				
				var filterData = {
				  colId: null,
				  displayValue: '',
				  operator: '',
				  value: ''
				};
				
				var filterIndex = MAListView.FilterExists(options);

				if(options.layerId !== 'SelectedTab') {
					filters = $(MAListView.queryClass + '[qid="' + options.layerId + '"]').data().listViewSettings.filters;
				} else {
					filters = MAListView.listViewSettings.filters;
				}

				if(filterIndex !== -1) {
				  filterData = filters[filterIndex];
				}

				return filterData;
			},

			// Clears all filters
			ClearSearch: function(options) {
				/*
					options = {
						layerId = 'string'
					}
				*/

				if(options.layerId === 'SelectedTab') {
					//reset our filter data
					MAListView.listViewSettings.filterCount = 0;
					MAListView.listViewSettings.filters =[];

					//change visibility in recordsList to true for all
					for (var i = MAListView.recordsList.length - 1; i >= 0; i--) {
						MAListView.recordsList[i].isVisible = true;
					};
				} else {
					var $layerData = $(MAListView.queryClass + '[qid="' + options.layerId + '"]').data();

					//reset our filter data
					$layerData.listViewSettings.filterCount = 0;
					$layerData.listViewSettings.filters =[];

					//change visibility in recordsList to true for all
					for (var i = $layerData.recordList.length - 1; i >= 0; i--) {
						$layerData.recordList[i].isVisible = true;
					};
				}

				//empty the text box
				$('div[id="' + options.layerId + '"]').find('.listview-search-text').val('');

				//redraw tab
				var opt = {
					layerId			: options.layerId,
					isSelectedTab	: options.layerId == 'SelectedTab',
					isExport		: false,
					count			: 0
				};

				MAListView.UpdateAdvancedSearchLink(opt); 
				MAListView.DrawTab(opt);

				//disable the search all button
				$('div#' + options.layerId + ' a:contains("Select All")').hide();
			},

			// Clears all filters
			ClearSearchFromDOM: function($element) {
				//used when passing in by element
				MAListView.ClearSearch({ layerId: $element.closest('div[id]').getAttribute('id') });
			},

            // Updates the advanced search link with the number of active filters
			UpdateAdvancedSearchLink: function(options) {
				var countString = options.count > 0 ? ' (' + options.count + ')' : '...';
				$('div[id="' + options.layerId + '"]').find('.lv-search-advanced').html('{!$Label.MA_Advanced_Search}' + countString);
			},

            // Updates the page number and records in the pagination area
			UpdatePageShowing: function(options) {
				var countHTML = '';
				var layerData = null;
				var recordList = null;
				
				if(options.layerId === 'SelectedTab') {
				    layerData = MAListView;
				    recordList = layerData.recordsList;
				} else {
				    layerData = $(MAListView.queryClass + '[qid="' + options.layerId + '"]').data();
				    recordList = layerData.recordList;
				}
				
				var isFiltered = layerData.listViewSettings.filters.length > 0;
				var filterCount = layerData.listViewSettings.filterCount;
				var total = isFiltered ? filterCount : recordList.length;
				var pageNumber = layerData.listViewSettings.pageNumber;

				var start   = total == 0 ? 0 : ((pageNumber - 1) * parseInt(layerData.listViewSettings.pageSize)) + 1;
				var end     = ((pageNumber - 1) * parseInt(layerData.listViewSettings.pageSize)) + parseInt(layerData.listViewSettings.pageSize);

				var actualEnd = total < end ? total : end;
				var unfiltered = isFiltered ? '(' + recordList.length + ' markers created)' : '';

				countHTML = '{!$Label.MA_Showing} ' + start + '-' + actualEnd + ' {!$Label.MA_of} ' + total + ' ' + unfiltered;

				$('div#' + options.layerId).find('.listview-record-count').html(countHTML);
			},



			//========== SORTING ==========
			// Sorts the data based on the specified column
			SortFromDOM: function($element) {
				var colId = $element.getAttribute('colid');
				var layerId = $element.closest('div[role="tabpanel"]').getAttribute('id');

				MAListView.Sort(colId, layerId);
			},

			// Sorts the data based on the specified column
			Sort: function(colId, layerId) {
				var col = MAListView.ListViewColumns[colId];

				if(layerId === 'SelectedTab') {
				    
					var recList = MAListView.recordsList;
					var len = recList.length;
					var sortArray = [];

					for(var i=0; i<len; i++) {
						var sortBy = null;

						//is it a record property?
						if(col.isRecordProperty) {
							//if so it exists in the record
							var recs = $(MAListView.queryClass + '[qid="' + recList[i].layerId + '"]').data('records');
							
							if(recs[recList[i].recordId]) {
							    sortBy = typeof recs[recList[i].recordId][col.sortColumn] === 'string' ? recs[recList[i].recordId][col.sortColumn].toLowerCase() : recs[recList[i].recordId][col.sortColumn];
							} else {
							    sortBy = '';
							}
						} else {
							//if not it exists in the recordslist
							if(recList[i][col.sortColumn] != undefined) {
							    sortBy = typeof recList[i][col.sortColumn] === 'string' ? recList[i][col.sortColumn].toLowerCase() : recList[i][col.sortColumn];
							} else {
							    sortBy = '';
							}
						}
						
						sortArray.push({ sortBy: sortBy, id: i });
					}

					if(sortArray.length > 0) {
						var newRecordList = [];
						var tempList = null;

						var column = $('div[id="' + layerId + '"] th[colid="' + col.id + '"]');

						if (column.hasClass('listview-col-sort-asc')) {
							//change to desc
							MAListView.listViewSettings.currentSort = { columnToSort: col.id, sort: 'listview-col-sort-desc' };
							column.removeClass('listview-col-sort-asc').addClass('listview-col-sort-desc');
							tempList = MAListView.MergeSortDesc(sortArray);
						}
						else {
							//change to asc
							MAListView.listViewSettings.currentSort = { columnToSort: col.id, sort: 'listview-col-sort-asc' };
							column.removeClass('listview-col-sort-desc').addClass('listview-col-sort-asc');
							tempList = MAListView.MergeSortAsc(sortArray);
						}

						var tempLen = tempList.length;

						for(var i=0; i<tempLen; i++) {  
							newRecordList.push(recList[tempList[i].id]);
						}

						MAListView.recordsList = newRecordList;
					} else {
						MAListView.log('Nothing to sort!');
					}
				} else {
					var $layer = $(MAListView.queryClass + '[qid="' + layerId + '"]');

					var recList = $layer.data('recordList');
					var recs = $layer.data('records');

					var sortArray = [];
					var len = recList.length;

					for(var i=0; i<len; i++) {
					    var sortBy = null;
					    
					    if(recs[recList[i].recordId] != undefined) {
						    sortBy = typeof recs[recList[i].recordId][col.sortColumn] === 'string' ? recs[recList[i].recordId][col.sortColumn].toLowerCase() : recs[recList[i].recordId][col.sortColumn];
					    } else {
						    sortBy = '';
						}

						sortArray.push({ sortBy: sortBy, id: i });
					}

					if(sortArray.length > 0) {
						var newRecordList = [];
						var tempList = null;

						var column = $('div[id="' + layerId + '"] th[colid="' + col.id + '"]');
						//console.log(column);

						if (column.hasClass('listview-col-sort-asc')) {
							//change to desc
							$layer.data('listViewSettings').currentSort = { columnToSort: col.id, sort: 'listview-col-sort-desc' };
							column.removeClass('listview-col-sort-asc').addClass('listview-col-sort-desc');
							tempList = MAListView.MergeSortDesc(sortArray);
						}
						else {
							//change to asc
							$layer.data('listViewSettings').currentSort = { columnToSort: col.id, sort: 'listview-col-sort-asc' };
							column.removeClass('listview-col-sort-desc').addClass('listview-col-sort-asc');
							tempList = MAListView.MergeSortAsc(sortArray);
						}

						var tempLen = tempList.length;

						for(var i=0; i<tempLen; i++) {  
							newRecordList.push(recList[tempList[i].id]);
						}

						$layer.data().recordList = newRecordList;
					} else {
						MAListView.log('Nothing to sort!');
					}
				}

				var drawOpt = {
					layerId         : layerId,
					isSelectedTab   : layerId == 'SelectedTab',
					isExport        : false 
				};

				MAListView.DrawTab(drawOpt);

				//console.log(Date.now().getTime() - start);
			},
			
			// Calls the sort function on the first sortable column
			SortFirstColumn: function(layerId) {
			    var sortableColumns = ['6','7','8','9','10','11','12','21','22'];
			    var availableColumns = $('div#' + layerId).find('table.listview-data-table').find('th');
			    var firstColId = null;
			    
			    for(var ii=0; ii<availableColumns.length; ii++) {
			        var colId = availableColumns[ii].getAttribute('colid');
			        
			        if(availableColumns[ii].style.display != 'none' && jQuery.inArray(colId, sortableColumns) > -1) {
			            firstColId = colId;
			            ii = availableColumns.length;
			        }
			    }
			    
			    if(firstColId != null) {
			        MAListView.Sort(firstColId, layerId);
			    }
			},

			// Does a merge sort in ascending fashion
			MergeSortAsc: function(array) {
				var len = array.length;

				if(len < 2) 
				{ 
					return array;
				}
				else
				{
					var pivot = Math.ceil(len/2);
					return MAListView.MergeAsc(MAListView.MergeSortAsc(array.slice(0,pivot)), MAListView.MergeSortAsc(array.slice(pivot)));
				}
			},

			// Does a merge sort in descending fashion
			MergeSortDesc: function(array) {
				var len = array.length;

				if(len < 2) 
				{ 
					return array;
				}
				else
				{
					var pivot = Math.ceil(len/2);
					return MAListView.MergeDesc(MAListView.MergeSortDesc(array.slice(0,pivot)), MAListView.MergeSortDesc(array.slice(pivot)));
				}
			},

			// Merges two objects in ascending fashion
			MergeAsc: function(left, right) {
				var result = [];

				while((left.length > 0) && (right.length > 0))
				{
					if(left[0].sortBy < right[0].sortBy && left[0].sortBy !== '' && left[0].sortBy !== null && left[0].sortBy !== undefined) {
						result.push(left.shift());
					}
					else if(right[0].sortBy === '' || right[0].sortBy === null || right[0].sortBy === undefined) {
						result.push(left.shift());
					}
					else {
						result.push(right.shift());
					}
				}
		
				result = result.concat(left, right);
				return result;
			},

			// Merges two objects in descending fashion
			MergeDesc: function(left, right) {
				var result = [];

				while((left.length > 0) && (right.length > 0))
				{
					if(left[0].sortBy > right[0].sortBy && left[0].sortBy !== '' && left[0].sortBy !== null && left[0].sortBy !== undefined) {
						result.push(left.shift());
					}
					else if(right[0].sortBy === '' || right[0].sortBy === null || right[0].sortBy === undefined) {
						result.push(left.shift());
					}
					else {
						result.push(right.shift());
					}
				}
		
				result = result.concat(left, right);
				return result;
			},



			//========== HIDING AND SHOWING ==========
			// Shows the entire workspace with all of the tabs
			Show: function(options) {
				MAListView.isShown = true;

				//default options
				options = $.extend({
					title: 'ListView',
					pane: 'tabs'
				}, options);

				//show the workspace
				$('#listview .listview-header').text(options.title);
				$('#listview').addClass('loading').slideDown(1, function () {
					try { options.success(); } catch (err) { }
				});

				//we can skip this if it has been done once already
				if(!MAListView.wasLoaded) {
					// $('#listview').resizable({
					// 	handles: "n"
					// });

					$('#listview-tabs').tabs();

					//assert that this has been done once so we can skip it
					MAListView.wasLoaded = true;
				}
				
				//load the workspace content
				$('#listview .listview-pane').hide().filter('[data-pane="'+options.pane+'"]').show();

				//refresh all of the tabs in the workspace
				$('#listview-tabs').tabs("refresh");

				$('#listview-accesstab').hide();
			},

			// Hides the entire workspace and all of the tabs inside of it
			Hide: function(options) {
				MAListView.isShown = false;

				$('#listview').slideUp(350, function () {
					try { options.success(); } catch (err) { }
				});

				$('#listview-accesstab').show();
			},
			
			// Displays the listview
			DisplayListView: function() {
				$("#listview-accesstab").removeClass("show-lv-accesstab");
				$("#listview").addClass("listview-showing");
				$("#mapcontainer").addClass("listview-showing");
				$("#mapdiv").addClass("listview-showing");
			},

			// Hides the specified column in the specified query
			HideColumns: function(columns) {
				for (var i = 0; i < columns.length; i++) {
					$('th[colName=' + columns[i].toString() + ']').hide();
					$('td[colName=' + columns[i].toString() + ']').hide();
				}
			},

			// Shows the specified column in the specified query
			ShowColumns: function(columns) {
				for (var i = 0; i < columns.length; i++) {
					$('th[colName="' + columns[i].toString() + '"]').show();
					$('td[colName="' + columns[i].toString() + '"]').show();
				}
			},

            // Closes the listview
			CloseListView: function() {
				$('#mapcontainer').animate({ scrollTop: 0 }, 200);
				$('#mapdiv').removeClass('listview-showing');
				$('#mapcontainer').removeClass('listview-showing');
				$('#listview').removeClass('listview-showing');
				$('#listview-accesstab').addClass('show-lv-accesstab');
			},	

            // Closes the listview when no tabs exist
			CloseListViewNoLayers: function() {
				$('#mapcontainer').animate({ scrollTop: 0 }, 200);
				$('#mapdiv').removeClass('listview-showing');
				$('#mapcontainer').removeClass('listview-showing');
				$('#listview').removeClass('listview-showing');
				$('#listview-accesstab').removeClass('show-lv-accesstab');
			},



			//========== FORMATTING AND PROCESSING ==========
            // Formats the address nicely
			FormatAddress: function(address) {
				if (address == '')
				{
					
				}
				else if (address.indexOf(', ,') > -1)
				{
					address = address.replace(', ,','');
				}
				
				//remove line breaks
				address = address.replace(/\<br [\/]*\>/g, ', ').trim();
				
				//if it starts with a comma, remove it
				if (address.indexOf(',') == 0)
				{
					address = address.substring(1);
				}
				
				
				return address;
			},
			
            // Processes the tooltip columns
			ProcessToolTipColumn: function(options) {
			
				/*
					Input: {
							toolTipIndex : int,
							record : {},
							layerData : {},
							isSelectedTab: boolean
						}
					
					Output: {
						colContents: 'string',
						colVisible : true|false
					}
				*/
				
				var colContents = '';
				var colVisible = true;

				//'<a href="{!$Site.CurrentSiteUrl}/' + record.record.Id + '" target="_blank">' +  + '</a>'

				
				if (options.layerData.tooltips[options.toolTipIndex] && options.record.record)
				{
					if (options.record.record.hasOwnProperty(options.layerData.tooltips[options.toolTipIndex].FieldName))
					{
						if(options.layerData.tooltips[options.toolTipIndex].DisplayType == 'CURRENCY') {
							colContents = formatCurrency(options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName]);

						} else if(options.layerData.tooltips[options.toolTipIndex].DisplayType == 'URL') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="' + tooltipData + '" target="_blank">' + tooltipData + '</a>';

						} else if(options.layerData.tooltips[options.toolTipIndex].DisplayType == 'LOCATION') {
							var tooltipData = JSON.stringify(options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName]);
							colContents = tooltipData != 'null' ? tooltipData.replace(/{/g, '').replace(/}/g, '').replace(/"/g, '').replace(/,/g, ',<br>') : '';

						} else if(options.layerData.tooltips[options.toolTipIndex].FieldLabel == 'Account Name') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="{!$Site.CurrentSiteUrl}/' + options.record.record.Id + '" target="_blank">' + tooltipData + '</a>';

						} else if(options.layerData.tooltips[options.toolTipIndex].BaseObject == 'Contact' && options.layerData.tooltips[options.toolTipIndex].FieldLabel == 'Full Name') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="{!$Site.CurrentSiteUrl}/' + options.record.record.Id + '" target="_blank">' + tooltipData + '</a>';

						} else if(options.layerData.tooltips[options.toolTipIndex].BaseObject == 'Lead' && options.layerData.tooltips[options.toolTipIndex].FieldLabel == 'Full Name') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="{!$Site.CurrentSiteUrl}/' + options.record.record.Id + '" target="_blank">' + tooltipData + '</a>';

						} else if(options.layerData.tooltips[options.toolTipIndex].BaseObject == 'Contract__c' && options.layerData.tooltips[options.toolTipIndex].FieldLabel == 'Contract ID') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="/' + options.record.record.Id + '" target="_blank">' + tooltipData + '</a>';

						} else if(options.layerData.tooltips[options.toolTipIndex].BaseObject == 'Opportunity' && options.layerData.tooltips[options.toolTipIndex].FieldLabel == 'Name') {
							var tooltipData = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
							colContents = '<a href="{!$Site.CurrentSiteUrl}/' + options.record.record.Id + '" target="_blank">' + tooltipData + '</a>';

						} else {
							colContents = options.record.record[options.layerData.tooltips[options.toolTipIndex].FieldName];
						}

						colVisible = true;
					}
					else
					{
						if(options.layerData.tooltips[options.toolTipIndex].DisplayType == 'REFERENCE') {
							var relationId = options.layerData.tooltips[options.toolTipIndex].RefFieldName.split('.');
							var relationName = options.layerData.tooltips[options.toolTipIndex].FieldName.split('.');

							if(options.record.record[relationId[0]] != undefined && options.record.record[relationName[0]] != undefined) {
								var linkData = options.record.record[relationId[0]][relationId[1]];
								var labelData = options.record.record[relationName[0]][relationName[1]];
								
								// console.log('linkData:',linkData);
								// console.log('labelData:',labelData);

								colContents = '<a href="/' + linkData + '" target="_blank">' + labelData + '</a>';
							} else {
								colContents = '';
							}

							colVisible = true;

						} else {
							colContents = '';
							// colVisible = false;
						}
					}
				}
				else
				{
					colVisible = false;
				}

				if (options.isSelectedTab && options.toolTipIndex < MAListView.listViewSettings.selectedTooltips)
				{
					colVisible = true;
				}
				
				return {
					colContents : colContents,
					colVisible : colVisible
				};
			},



			//========== SELECTED MARKER TAB ==========
			// Clears all of the selected arrays
			ClearAllSelected: function() {
				$(MAListView.queryClass).each(function( index ) {
					$(this).data('listViewSettings').selectedIds = [];
				});
	
				//uncheck all the checkboxes
				$('.listview-data-table').find('input[type="checkbox"]').attr('checked', false);

				//remove the selected tab
				MAListView.RemoveTab('SelectedTab');
				
				if($('div#listview').find('li[role="tab"]').length >= 1) {
				  $('#listview-tabs').tabs( 'option', 'active', 1);
				}
			},

			// Clears the specific layer's selected list
			ClearSelected: function(layerId) {
				$('[qid="' + layerId + '"]').data('listViewSettings').selectedIds = [];
	
				//uncheck all the checkboxes
				$('div#' + layerId).find('input[type="checkbox"]').attr('checked', false);

                //does the selected tab exist?
                if(MAListView.TabExists('SelectedTab')) {
				    MAListView.AddSelectedTab(false);
                }
			},

			// Adds the selected tab to the front of the tab list
			AddSelectedTab: function(selectTab) {

				//reset the selected tooltips number
				MAListView.listViewSettings.selectedTooltips = 0;

				//clear the recordsList array
				MAListView.recordsList = [];
				
				//let's build the  MAListView.recordsList
				$(MAListView.queryClass).each(function( index ) {
					
					var layerId = $(this).attr('qid');
					var layerData = $(this).data();
					
					for (var property in layerData.records) 
					{
						if (layerData.records.hasOwnProperty(property)) {
							
							var record = layerData.records[property];
							
							if (jQuery.inArray( record.record.Id, layerData.listViewSettings.selectedIds) > -1   )
							{
								MAListView.recordsList.push({ 
									recordId: record.record.Id, 
									layerId: layerId,
									straightDistanceText : '',
									straightDistanceValue : null,
									driveDistanceText : '',
									driveDistanceValue : null,
									driveDurationText : '',
									driveDurationValue : null,
									latLng: (record.marker) ? record.marker.getPosition() : null,
									isVisible: true
								});
							}

						}
					}

					if(!MAListView.isShown) {
						MAListView.ConstructAllTabs();
						MAListView.DisplayListView();
					}
				});

				if(MAListView.recordsList.length > 0) {

					//do we have all of the tabs loaded?
					if ($(MAListView.queryClass).length > $('#listview-tabs li').length) {
						MAListView.ConstructAllTabs();
					}
					
					var $tabContent = $('#templates #ListViewTabContents').clone().html()
							.replace(/::layerId::/g, 'SelectedTab');
					
					//Check if exists
					if (MAListView.TabExists('SelectedTab'))
					{
						//clear the contents
						$('#SelectedTab').html($tabContent);
					}
					else
					{
						//build the tab
						
						//put the title and data in the tabs
						$('#listview-tabs ul').prepend('<li><a href="#' + 'SelectedTab' + '">' + '{!$Label.MA_selected}' + ' &nbsp;&nbsp;</a><a class="lv-select-clear" onclick="MAListView.ClearAllSelected()" role="clear"><span class="MAIcon glyphicon-remove-circle"></span></a></li>');
						$('#listview-tabs').append('<div id="' + 'SelectedTab' + '">' + $tabContent + '</div>');

						//refresh the tabs, just in case
						$('#listview-tabs').tabs("refresh");
					}

					//let's draw the selected tab now
					MAListView.DrawTab({
						
						layerId        : 'SelectedTab',
						isSelectedTab  : true,
						isExport       : false
						
					});

					//hide the select all and clear selected buttons
					$('#SelectedTab a:contains("Select All")').hide();
					$('#SelectedTab a:contains("Clear Selected")').hide();

					//select the tab on screen
					MAListView.SelectTab('SelectedTab');
					MAListView.SortFirstColumn('SelectedTab');
				} else {
					if(selectTab) {
						alert('{!$Label.MA_Please_Select_Records}');
					}
				}
			},

            // Selects all of the rows that are visible
			SelectAll: function(layerId) {
				var layerData = $(MAListView.queryClass + '[qid=' + layerId + ']').data();
				var recordListLength = layerData.recordList.length;

				for(var ii=0; ii<recordListLength; ii++) {
					var recordId = layerData.recordList[ii].recordId;
					if(layerData.recordList[ii].isVisible && jQuery.inArray( recordId, layerData.listViewSettings.selectedIds) === -1) {
						layerData.listViewSettings.selectedIds.push(recordId);
					}
				}

				var options = { 
					layerId: layerId,
					isSelectedTab: layerId === 'SelectedTab', 
					isExport: false 
				};

				MAListView.DrawTab(options);
			},

            // Selects all of the rows on the current page
			SelectAllOnPage: function(layerId) {
			    var checkboxes = $('div#' + layerId).find('input[type="checkbox"]');
			    var cbLength = checkboxes.length;
			    for(var ii=0; ii<cbLength; ii++) {
			        checkboxes[ii].click();
			    }
			},



			//========== DISTANCE MATRIX ==========
			MakeDistanceMatrixRequest: function() {
				//clear the request array
				MAListView.DistanceMatrixRequest = [];
				
				DestinationBatchArray = [];
				
				
				$.each(MAListView.recordsList, function (index, value) {
					DestinationBatchArray.push(value);
					
					
					
					if (DestinationBatchArray.length == 25) {
						//buildMatrixRequest(DestinationBatchArray);
						//DestinationBatchArray = [];
			
						MAListView.DistanceMatrixRequest.push({
							attempt: 0,
							lastStatus: '',
							complete: false,
							destinations: DestinationBatchArray,
							results: {}
						});
			
						DestinationBatchArray = []
					}
			
				});
			
				//send left overs
				//buildMatrixRequest(DestinationBatchArray);
			
				MAListView.DistanceMatrixRequest.push({
					attempt: 0,
					lastStatus: '',
					complete: false,
					destinations: DestinationBatchArray,
					results: {}
				});
			
				DestinationBatchArray = [];
				
				$('#SelectedTab').find('#listview-tab-status-container').html('{!$Label.MA_Calculating_Drive_Dist_Time}(0/' + MAListView.DistanceMatrixRequest.length +')');
			
				$.each(MAListView.DistanceMatrixRequest, function (index, value) {
					MAListView.SendDistanceMatrixRequest(index)
				});
			},

			SendDistanceMatrixRequest: function(index) {
				// console.log('sending batch');
				var destinations = [];
			
				MAListView.DistanceMatrixRequest[index].attempt++;
			
				$.each(MAListView.DistanceMatrixRequest[index].destinations, function (index, value) {
					destinations.push(value.latLng);
			
				});
			
				//console.log(destinations);
			
			
				
				var service = new google.maps.DistanceMatrixService();
				service.getDistanceMatrix({
					origins: [MAListView.referencePoint.latLng],
					destinations: destinations,
					travelMode: google.maps.TravelMode.DRIVING,
					unitSystem: google.maps.UnitSystem.IMPERIAL,
					avoidHighways: false,
					avoidTolls: false,
					durationInTraffic: userSettings.RouteDefaults.displayTrafficTime == false ? false : true,
				}, function (response, status) {
					MAListView.DistanceMatrixRequestCallback(response, status, index);
				});
			},

			DistanceMatrixRequestCallback: function(response, status, index) {
				// console.log(response);
				// console.log(status);
				// console.log(index);
			
				MAListView.DistanceMatrixRequest[index].lastStatus = status;
			
				if (status == google.maps.DistanceMatrixStatus.OK) 
				{
					MAListView.DistanceMatrixRequest[index].complete = true;
					MAListView.DistanceMatrixRequest[index].results = response;
				} 
				else if (status == google.maps.DistanceMatrixStatus.UNKNOWN_ERROR) 
				{
					//normally caused b/c of the 2000 character URL limit, try sending less data, or change to latlngs
				} 
				else if (status == google.maps.DistanceMatrixStatus.OVER_QUERY_LIMIT) 
				{
					//wait a little while and then try again
			
			
					setTimeout(function () {
						MAListView.SendDistanceMatrixRequest(index);
					}, 2000);
			
				} 
				else if (status == google.maps.DistanceMatrixStatus.REQUEST_DENIED) 
				{
					MAListView.DistanceMatrixRequest[index].complete = true;
				} 
				else if (status == google.maps.DistanceMatrixStatus.INVALID_REQUEST) 
				{
					MAListView.DistanceMatrixRequest[index].complete = true;
				} 
				else 
				{
					MAListView.log('unknown status!');
				}
			
				var AllDone = true;
				var completedRequest = 0;
				$.each(MAListView.DistanceMatrixRequest, function (index, value) {
					if (value.complete == false) {
						AllDone = false;
					}
					else
					{
						completedRequest++;
					}
				});
				
				$('#SelectedTab').find('#listview-tab-status-container').html('{!$Label.MA_Calculating_Drive_Dist_Time}(' + completedRequest + '/' + MAListView.DistanceMatrixRequest.length +')');
			
				if (AllDone) 
				{
					$('#SelectedTab').find('#listview-tab-status-container').html('{!$Label.MA_Calculated_Drive_Dist_Time}');
					
					// console.log('all done!');
					// console.log(MAListView.DistanceMatrixRequest);
			
					//let's process the results now
					$.each(MAListView.DistanceMatrixRequest, function (dRequestIndex, dRequest) {
			
						//console.log(dRequest);
			
						$.each(dRequest.results.rows[0].elements, function (rowIndex, row) {
							//console.log(dRequest.destinations[rowIndex]);
							dRequest.destinations[rowIndex].result = row;
							
							if (row.status == google.maps.DistanceMatrixStatus.OK) 
							{
								

								   
									
								if (row.duration_in_traffic)
								{
									dRequest.destinations[rowIndex].driveDurationText = row.duration_in_traffic.text
									dRequest.destinations[rowIndex].driveDurationValue = row.duration_in_traffic.value
								}
								else if (row.duration)
								{
									dRequest.destinations[rowIndex].driveDurationText = row.duration.text
									dRequest.destinations[rowIndex].driveDurationValue = row.duration.value
								}
								else
								{
									dRequest.destinations[rowIndex].driveDriveDurationText = '';
									dRequest.destinations[rowIndex].driveDriveDurationValue = null;
								}
								
								if (row.distance)
								{
									dRequest.destinations[rowIndex].driveDistanceText = row.distance.text
									dRequest.destinations[rowIndex].driveDistanceValue = row.distance.value
								}
								else
								{
									dRequest.destinations[rowIndex].driveDistanceText = '';
									dRequest.destinations[rowIndex].driveDistanceValue = null;
								}
									
								
								
								
							}
							
							
							
			
						});
			
			
					});    
					
					MAListView.DrawTab({
					
						layerId        : 'SelectedTab',
						isSelectedTab  : true,
						isExport       : false
						
					});
					
				}
			},

			ProcessListViewButtonFromShapeLayerPopup: function(records) {
				// console.log(records);
				
				//clear the currently selected rows.
				MAListView.ClearAllSelected();
				
				
				//let's use an array so we don't keep using selectors
				listViewSettingsByLayerId = {};
				
				$.each(records, function (index, record) {
					
					//let's add this marker's Id to the SelectedIds of the plotted query
				   
					var layerId = record.marker.qid;
					var recordId = record.record.Id;
					
					//check if the layerId already exists in our array, if it does add the recordId; if not create the holding object.
					if (listViewSettingsByLayerId[layerId])
					{
						listViewSettingsByLayerId[layerId].selectedIds.push(recordId);
					}
					else
					{
						listViewSettingsByLayerId[layerId] = {
							layerId: layerId,
							selectedIds: [recordId]
						}
					}
				});
				
				//now let's store the selected Ids against the correct layer's DOM data
				$.each(listViewSettingsByLayerId, function (index, layerIdData) {
					
					var layerData = $('[qid="' + layerIdData.layerId + '"]').data();
				
				
				
					if (layerData.listViewSettings)
					{
						layerData.listViewSettings.selectedIds = layerData.listViewSettings.selectedIds.concat(layerIdData.selectedIds);
					}
					else
					{
						layerData.listViewSettings = {
							pageSize: 10,
							pageNumber: 1,
							startIndex: 0,
							selectedIds: layerIdData.selectedIds
						};
					}

					$('[qid="' + layerIdData.layerId + '"]').data('listViewSettings', layerData.listViewSettings);
				});
				
				
				
				//Check if the selected tab exists, then build the tab and populate the data
				MAListView.AddSelectedTab(true);
				//MAListView.DrawSelectedTab();
				
				//move the user to the selected tab
				
				//refresh the other tabs because there could be checkboxes that are checked.        
			},

			ProcessSelectedTabDrivingDistance: function(layerId) {
				/*
				MAListView.referencePoint = {
					formattedMarkerAddress: "string",
					latLng : google.position
				}
				*/
				
				if (MAListView.recordsList.length == 0)
				{
					alert("Please Select One or More Records");
				}
				else if (MAListView.referencePoint === undefined)
				{
					alert("Please Set a Reference Point");
				}
				else 
				{
					$('#SelectedTab').find('#listview-tab-status-container').html('Calculating Drive Distance/Time, Please Wait....');
					MAListView.MakeDistanceMatrixRequest();
				}
			},

			ProcessSelectedTabStraightLineDistance: function(layerId) {
				/*
				MAListView.referencePoint = {
					formattedMarkerAddress: "string",
					latLng : google.position
				}
				*/
				
				//need to check if the "selected" tab is set and if there is a reference point, for now let's just assume it's true
				if (MAListView.recordsList.length == 0)
				{
					alert("Please Select One or More Records");
				}
				else if (MAListView.referencePoint === undefined)
				{
					alert("Please Set a Reference Point");
				}
				else 
				{
					$.each(MAListView.recordsList, function( index, value ) {
						
						var distanceInMeters = google.maps.geometry.spherical.computeDistanceBetween(
							MAListView.referencePoint.latLng,
							value.latLng
						);
						
						
						
						
						value.straightDistanceText = MA.Util.formatDistance(distanceInMeters);
						value.straightDistanceValue = distanceInMeters;
						
					});
					
					MAListView.DrawTab({
					
						layerId        : 'SelectedTab',
						isSelectedTab  : true,
						isExport       : false
						
					});
					
					/*
					$('#' + 'SelectedTab').find('table').find('tr').each(function( index ) {
						var lat = $(this).attr('lat');
						var lng = $(this).attr('lng');
						
						$(this).find('td[colid="4"]').html(
							MA.Util.formatDistance(
								google.maps.geometry.spherical.computeDistanceBetween(
									MAListView.referencePoint.latLng,
									new google.maps.LatLng(parseFloat(lat), parseFloat(lng))
								)
							)
						);
						
					});
					*/
					
				 
				 
					// MA.Util.formatDistance(google.maps.geometry.spherical.computeDistanceBetween(this.marker1.getPosition(), this.marker2.getPosition()));
					
					
					
				}
			},

			SetReferencePoint: function(options) {
				/*
					options: {
							formattedMarkerAddress : string,
							latLng : latLng
						}
				*/
				
				MAListView.referencePoint = {
					formattedMarkerAddress : options.formattedMarkerAddress,
					latLng : options.latLng
				};
				
				
				$('div[role="ReferencePointSet"]').find('.MAbutton').html(
					MAListView.FormatAddress(options.formattedMarkerAddress) +
					' <span class="caret"></span>'
				);
				 
				//make sure the "disabled" button is hidden
				$('div[role="NoReferencePoint"]').hide();
				
				//make sure the "not disabled" button isn't hidden
				$('div[role="ReferencePointSet"]').show();
			},

			ClearReferencePoint: function() {
				//not good to set things to undefined, but for now we will
				MAListView.referencePoint = undefined;
				
				//make sure the "not disabled" button is hidden
				$('div[role="ReferencePointSet"]').hide();

				//make sure the "disabled" button isn't hidden
				$('div[role="NoReferencePoint"]').show();
			},



			//========== HELPER METHODS ==========
            // Selects a row
			RowSelected: function(oid, layerId, checkbox) {
				var layerData = $(MAListView.queryClass + '[qid="' + layerId + '"]').data();
				
				if (layerData.listViewSettings) {
					if ($(checkbox).prop('checked')) {
					    //checked
						layerData.listViewSettings.selectedIds.push(oid);
						
					    //figure out how the main checkbox should look
					    if(layerData.listViewSettings.selectedIds.length == layerData.recordList.length) {
					        
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].indeterminate = false;
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].checked = true;
					        
					    } else if(layerData.listViewSettings.selectedIds.length > 0) {
					        
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].checked = false;
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].indeterminate = true;
					        
					    }
						
					} else {
					    //unchecked and id is already in list, remove it
						if ( jQuery.inArray( oid, layerData.listViewSettings.selectedIds) > -1 ) {
							layerData.listViewSettings.selectedIds = jQuery.grep(layerData.listViewSettings.selectedIds, function(value) {
								return value != oid;
							});
						}
						
						//figure out how the main checkbox should look
					    if(layerData.listViewSettings.selectedIds.length == 0) {
					        
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].checked = false;
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].indeterminate = false;
					        
					    } else {
					        
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].checked = false;
					        $('div#' + layerId).find('input.listview-main-checkbox')[0].indeterminate = true;
					        
					    }
					}
					
					//store the information back to the array
					$(MAListView.queryClass + '[qid="' + layerId + '"]').data('listViewSettings', layerData.listViewSettings);
				}
			},

            // Handles marker clicks
			MarkerClick: function(layerId, markerId) {
				
				try
				{
					var layerData = $(MAListView.queryClass + '[qid="' + layerId + '"]').data();
					//google.maps.event.trigger(layerData.records[markerId].marker, 'click');
					
					marker_Click.call(layerData.records[markerId].marker); 
					e.stopPropagation();
				}
				catch(e)
				{
					
				}
			},

			//Determines if the unique id is a query id or something else (prox/shape layer)
			IsQuery: function(id) {
				try {
					var isQuery = true;

					if(id.toString() !== 'NaN') {
						isQuery = id.search('prox') < 0 ? true : false;
					}

					return isQuery;
				}
				catch (err) {
					MAListView.log(err);
				}
			},

			//Determines if the unique id is a proximity layer or a shape layer
			IsProxLayer: function(id) {
				try {
					var isProxLayer = true;
					if(id.toString() !== 'NaN') {
						isProxLayer = id.search('shapeprox') < 0 ? true : false;
					}

					return isProxLayer;
				}
				catch (err) {
					MAListView.log(err);
				}
			},
			
            // Scrolls to the top of the page
			ScrollToListViewTop: function() {
				$('#mapcontainer').animate({ scrollTop: 0 }, 200);
			},

            // Scrolls to the listview
			ScrollToListView: function() {
				// the element inside of which we want to scroll
				var $elem = $('#mapcontainer');
				$('#mapcontainer').animate({scrollTop: $elem.height()}, 200);
			},

			// Returns a deep copy of the original
			// TESTED: FASTER THAN jQUERY EXTEND BY FACTOR OF 3
			// TESTED: SLIGHTLY FASTER THAN COPYING THE ENTIRE OBJECT AND LESS CODE
			DeepCopy: function(original) {
				return JSON.parse(JSON.stringify(original));
			},



			//========== PAGINATION METHODS ==========
            // Moves to the next page
			PageForward: function(layerId) {
				var currentSettings = null;
				var isSelectedTab = layerId == 'SelectedTab';

				var totalRecords = 0;
				var records = null;

				//is this the selected tab or a normal tab?
				if(isSelectedTab) {
					currentSettings = MAListView.listViewSettings;
					records = MAListView.recordsList;

					if(currentSettings.filterCount > 0) {
						totalRecords = currentSettings.filterCount;
					} else {
						totalRecords = MAListView.recordsList.length;
					}
				} else {
					currentSettings = $('[qid="' + layerId + '"]').data('listViewSettings');
					records = $('[qid="' + layerId + '"]').data('recordList');

					if(currentSettings.filterCount > 0) {
						totalRecords = currentSettings.filterCount;
					} else {
						totalRecords = $('[qid="' + layerId + '"]').data('recordList').length;
					}
				}

				var remainder = totalRecords % currentSettings.pageSize;
				var maxPage = remainder <= 0 ? Math.floor(totalRecords / currentSettings.pageSize) : Math.floor(totalRecords / currentSettings.pageSize) + 1;

				//are we already at the last page?
				if(currentSettings.pageNumber < maxPage) {
					//manipulate the settings
					currentSettings.pageNumber++;

					var i = currentSettings.startIndex;
					var max = records.length;
					var c = 0;

					while(i < max && c <= currentSettings.pageSize) {
						if(records[i].isVisible === true) {
							currentSettings.startIndex = i;
							c++;
						}
						i++;
					}

					//redraw
					MAListView.DrawTab({ layerId: layerId, isSelectedTab: isSelectedTab, isExport: false });
				}
			},

            // Moves to the previous page
			PageBackward: function(layerId) {
				var currentSettings = null;
				var isSelectedTab = layerId == 'SelectedTab';

				var records = null;

				//is this the selected tab or a normal tab?
				if(isSelectedTab) {
					currentSettings = MAListView.listViewSettings;
					records = MAListView.recordsList;
				} else {
					currentSettings = $('[qid="' + layerId + '"]').data('listViewSettings');
					records = $('[qid="' + layerId + '"]').data('recordList');
				}

				//are we already at the first page?
				if(currentSettings.pageNumber > 1) {
					//manipulate the settings
					currentSettings.pageNumber--;
					
					var i = currentSettings.startIndex-1;
					var c = 0;

					while(i >= 0 && c < currentSettings.pageSize) {
						if(records[i].isVisible === true) {
							currentSettings.startIndex = i;
							c++;
						}
						i--;
					}

					//redraw
					MAListView.DrawTab({ layerId: layerId, isSelectedTab: isSelectedTab, isExport: false });
				}					
			},

            // Changes the size of the page
			ChangePageSize: function(layerId, value) {

				var currentSettings = null;
				var isSelectedTab = layerId == 'SelectedTab';

				//is this the selected tab or a normal tab?
				if(isSelectedTab) {
					currentSettings = MAListView.listViewSettings;
				} else {
					currentSettings = $('[qid="' + layerId + '"]').data('listViewSettings');
				}

				//manipulate the settings
				currentSettings.pageSize = value;
				currentSettings.pageNumber = 1;
				currentSettings.startIndex = 0;

				var newOpt = { layerId: layerId, isSelectedTab: isSelectedTab, isExport: false };

				//redraw
				MAListView.DrawTab(newOpt);
			},

            // Moves to the last page
			MoveToLastPage: function(layerId) {
				var currentSettings = null;
				var isSelectedTab = layerId == 'SelectedTab';

				var totalRecords = 0;
				var records = null;
				
				//is this the selected tab or a normal tab?
				if(isSelectedTab) {
					currentSettings = MAListView.listViewSettings;
					records = MAListView.recordsList;

					if(currentSettings.filterCount > 0) {
						totalRecords = currentSettings.filterCount;
					} else {
						totalRecords = MAListView.recordsList.length;
					}
				} else {
					currentSettings = $('[qid="' + layerId + '"]').data('listViewSettings');
					records = $('[qid="' + layerId + '"]').data('recordList');

					if(currentSettings.filterCount > 0) {
						totalRecords = currentSettings.filterCount;
					} else {
						totalRecords = $('[qid="' + layerId + '"]').data('recordList').length;
					}
				}

				var remainder = totalRecords % currentSettings.pageSize;
				var maxPage = remainder <= 0 ? Math.floor(totalRecords / currentSettings.pageSize) : Math.floor(totalRecords / currentSettings.pageSize) + 1;

				//are we already at the last page?
				if(currentSettings.pageNumber < maxPage) {
					//manipulate the settings
					currentSettings.pageNumber = maxPage;
					
					var r = remainder === 0 ? currentSettings.pageSize : remainder;
					var i = records.length-1;
					var c = 0;

					while(i >= 0 && c < r) {
						if(records[i].isVisible === true) {
							currentSettings.startIndex = i;
							c++;
						}
						i--;
					}

					//redraw
					MAListView.DrawTab({ layerId: layerId, isSelectedTab: isSelectedTab, isExport: false });
				}
			},

            // Moves to the first page
			MoveToFirstPage: function(layerId) {
				var currentSettings = null;
				var isSelectedTab = layerId == 'SelectedTab';

				var records = null;

				//is this the selected tab or a normal tab?
				if(isSelectedTab) {
					currentSettings = MAListView.listViewSettings;
					records = MAListView.recordsList;
				} else {
					currentSettings = $('[qid="' + layerId + '"]').data('listViewSettings');
					records = $('[qid="' + layerId + '"]').data('recordList');
				}

				//are we already at the first page?
				if(currentSettings.pageNumber > 1) {
					//manipulate the settings
					currentSettings.pageNumber = 1;

					var i = 0;
					var max = records.length;
					var c = 0;

					while(i < max && c < 1) {
						if(records[i].isVisible === true) {
							currentSettings.startIndex = i;
							c++;
						}
						i++;
					}

					//redraw
					MAListView.DrawTab({ layerId: layerId, isSelectedTab: isSelectedTab, isExport: false });
				}
			},



			//========== POPUP METHODS ==========
			// Opens the filter popup
			ShowFilterPopupFromDOM: function(obj) {
				
				
				//this is will reference the link
				var layerId = $(obj).closest('div[role="tabpanel"]').attr('id')
				
				MAListView.ShowFilterPopup({layerId : layerId});
			},

			// Opens the filter popup
			ShowFilterPopup: function(options) {
				
				/*
				  options = {
					  layerId : 'string',
					  layerData: { obj }
				  }
				*/
				
				
				if (options.layerId == 'SelectedTab')
				{
					options.layerData = {
						listViewSettings : MAListView.listViewSettings
					}
					
					if (MAListView.listViewSettings.queryCount == 1)
					{
						options.layerData.tooltips = $(MAListView.queryClass).data().tooltips;
					}
				}
				else
				{
					options.layerData = $('[qid="' + options.layerId + '"]').data();
				}
				
				
				
				//clear existing filter rows
				$('#listview-filters-table').html('');
				
				//store the layerId being filtered
				$('#listview-filter-popup').attr('layerId', options.layerId);

				//var searchAllText = $('#' + options.layerId).find('.listview-search-text').val() === undefined ? '' : $('#' + options.layerId).find('.listview-search-text').val();
				var searchAllText = MAListView.GetFilterData({ layerId: options.layerId, colId: -1 }).displayValue || MAListView.GetFilterData({ layerId: options.layerId, colId: -1 }).value;
				
				//put in the "all columns" search row
				var rowHTML = '';
				rowHTML = '<tr>';
				//	rowHTML += '<td></td>';
				rowHTML += '<td>' + 'All Columns' + '</td>';
				rowHTML += '<td>' + 'Contains' + '</td>';
				rowHTML += '<td>' + '<input type="text" class="search-all-value-input" value="' +  searchAllText  + '"/>' + '</td>';
				rowHTML += '</tr><tr><td class="lvs-row-spacer" colspan="3">&nbsp;</td></tr>';
				$('#listview-filters-table').append(rowHTML);

				
				//first get the columns that we need to display
				$.each(userSettings.ListViewColumns, function( index, colId ) {
					var col = MAListView.ListViewColumns[colId.id];
					
					var currentValue = MAListView.GetFilterData({ layerId: options.layerId, colId: colId.id }).displayValue;
					
				   if (col.visible == 'true')
				   {
					   
					   var rowHTML = '';
				   
					   //Get the column name - need to replace with the tooltip column label if not "IsSelected Tab"
					   
					   
					   
					   //operator and field informatoin
					   if ($.inArray( col.id, [ '0','1','2','3' ] ) > -1)
					   {
						   /*
						   rowHTML = '<tr>';
						   rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + 'Missing' + '</td>';
						   rowHTML += '<td>' + 'Missing' + '</td>';
						   rowHTML += '</tr>';
						   */
					   }
					   else if ($.inArray( col.id, [ '6','7','8','9','10' ] ) > -1)
					   {
						   rowHTML += '<tr class="listViewFilterRow" colId="' + col.id + '">';
						 //  rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('')  +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
					   }
					   else if ($.inArray( col.id, [ '21' ] ) > -1)
					   {
						   //combined address field, let's break it apart
						   rowHTML = '<tr class="combined-address-field-row">';
						  // rowHTML += '<td></td>'; //show hide additional address fields
						   rowHTML += '<td><b>' + MAListView.ListViewColumns[col.id].label + '</b></td>';
						   rowHTML += '<td></td>'; //rowHTML += '<td>' + '<select>' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td></td>'; //rowHTML += '<td>' + '<input type="text"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '6' + '">';
						 //  rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'Street' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '7' + '">';
						   //rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'City' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '8' + '">';
						  // rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'State' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '9' + '">';
						  // rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'Postal Code' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '10' + '">';
						   //rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'Country' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
					   }
					   else if ($.inArray( col.id, [ '22' ] ) > -1)
					   {
						   //combined position field, let's break it apart
						   rowHTML = '<tr>';
						   rowHTML += '<tr class="combined-address-field-row">'; //show hide additional fields
						   rowHTML += '<td><b>' + MAListView.ListViewColumns[col.id].label + '</b></td>';
						   rowHTML += '<td>' + '</td>';
						   rowHTML += '<td>' + '</td>';
						   rowHTML += '</tr>';
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '11' + '">';
						   //rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'Longitude' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';
						   
						   
						   rowHTML += '<tr class="listViewFilterRow" colId="' + '12' + '">';
						   //rowHTML += '<td></td>';
						   rowHTML += '<td>' + 'Latitude' + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
						   rowHTML += '</tr>';

					   }
					   else if ($.inArray( col.id, [ '13' ] ) > -1 ) //tooltip 1
					   {
							rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 0, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '14' ] ) > -1 ) //tooltip 2
					   {    
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 1, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '15' ] ) > -1 ) //tooltip 3
					   {
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 2, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '16' ] ) > -1 ) //tooltip 4
					   {    
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 3, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '17' ] ) > -1 ) //tooltip 5
					   {
							rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 4, colId: col.id}, options ));   
					   }
					   else if ($.inArray( col.id, [ '18' ] ) > -1 ) //tooltip 6
					   {
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 5, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '19' ] ) > -1 ) //tooltip 7
					   {
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 6, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '20' ] ) > -1 ) //tooltip 8
					   {
						   rowHTML += MAListView.PopupFilterTooltipRow($.extend( {tooltipIndex: 7, colId: col.id}, options ));
					   }
					   else if ($.inArray( col.id, [ '23' ] ) > -1 )
					   {
						   rowHTML += '<tr class="listViewFilterRow" colId="' + col.id + '">';
						  // rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '<select class="unit-input"><option value="miles">miles</option>' + '<option value="meters">meters</option>' + '<option value="kilometers">km</option>' + '</select>'+ '</td>';
						   rowHTML += '</tr>';
					   }
					   else if ($.inArray( col.id, [ '4' ] ) > -1 && options.layerId == 'SelectedTab')
					   {
						   rowHTML += '<tr class="listViewFilterRow" colId="' + col.id + '">';
						  // rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '<select class="unit-input"><option value="miles">miles</option>' + '<option value="meters">meters</option>' + '<option value="kilometers">km</option>' + '</select>'+ '</td>';
						   rowHTML += '</tr>';
					   }
					   else if ($.inArray( col.id, [ '5' ] ) > -1 && options.layerId == 'SelectedTab')
					   {
						   rowHTML += '<tr class="listViewFilterRow" colId="' + col.id + '">';
						 //  rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
						   rowHTML += '<td>' + '<input type="text" class="days" value="' + currentValue + '"/> days <input type="text" class="hours"/> hours <input type="text" class="minutes"/> minutes  ' + '</td>';
						   rowHTML += '</td>';
						   rowHTML += '</tr>';
					   }
					   else
					   {
						   /*
						   rowHTML = '<tr>';
						   rowHTML += '<td></td>';
						   rowHTML += '<td>' + MAListView.ListViewColumns[col.id].label + '</td>';
						   rowHTML += '<td>' + 'Missing - Else' + '</td>';
						   rowHTML += '<td>' + 'Missing - Else' + '</td>';
						   rowHTML += '</tr>';
						   */
					   }
					   
					   
					   
					   
					   
					   
						
						$('#listview-filters-table').append(rowHTML);
						
						/*
						//need to put this in place later so we can do ranges (swap inputs for two inputs) and display select list for picklist values, maybe do some type ahead stuff for lookups
						$('#listview-filters-table').find('select.listViewOperator').change(function(e) {
							console.log(e);
						});
						*/
						
						//now that we've put all the HTML elements out there, let's put back the settings
						
						$.each(options.layerData.listViewSettings.filters, function( index, filter ) {
							
							/*
								possible properties for a filter are:
									colId - string
									displayValue - string | object ; value to display in the input field, this is important because some filters are converted such as the drive distance
									operator - string
									value - string | decimal ; value used in the filter process (this is the value that has been converted, for example in the case of drive distance or drive time)
									unit - string ; unit of measure
							*/
							
							$filterRow = $('tr.listViewFilterRow[colId="' + filter.colId + '"]');
							$filterRow.find('select.listViewOperator').val(filter.operator);
							
							
							if (filter.colId == '5') //drive time
							{
								$filterRow.find('input.days').val(filter.displayValue.days);
								$filterRow.find('input.hours').val(filter.displayValue.hours);
								$filterRow.find('input.minutes').val(filter.displayValue.minutes);
							}
							else if (filter.colId == '23' || filter.colId == '4' ) //straight line distance or drive distance
							{
								$filterRow.find('input.value-input').val(filter.displayValue);
								$filterRow.find('select.unit-input').val(filter.unit);
								
								
								
							}
							else
							{

								$filterRow.find('input.value-input').val(filter.displayValue);
									
							}
							
							
						});
					   
					   
				   }
				   
				   
				   
					
				});
				
				LaunchPopupWindow($('#listview-filter-popup'), 600);
			},

            // Handles the tooltip rows for the filter popup
			PopupFilterTooltipRow: function(options) {
				/*
					layerId : 'string',
					tooltipIndex: 'integer',
					layerData : object
					colId: 'string'
				*/
				
				
				
				var rowHTML = '';
				var currentValue = MAListView.GetFilterData({ layerId: options.layerId, colId: options.colId }).displayValue;
				
				if (options.layerId == 'SelectedTab' && MAListView.listViewSettings.queryCount > 1)
				{
					//we aren't going to show the filters if there is more than one query because they could contain different columns.
				}
				else
				{

					if (options.layerData.tooltips[options.tooltipIndex])
					{
					
					
						if ($.inArray( options.layerData.tooltips[options.tooltipIndex].DisplayType.toUpperCase(), [ 'STRING','PHONE','ID','Email','Combobox','MULTIPICKLIST','PHONE','TEXTAREA','URL' ] ) > -1)
						{
							rowHTML += '<tr class="listViewFilterRow" colId="' + options.colId + '">';
							rowHTML += '<td>' + options.layerData.tooltips[options.tooltipIndex].FieldLabel + '</td>';
							rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
							rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
							rowHTML += '</tr>';
						}
						else if ($.inArray( options.layerData.tooltips[options.tooltipIndex].DisplayType.toUpperCase(), [ 'CURRENCY','PERCENT' ] ) > -1)
						{
							rowHTML += '<tr class="listViewFilterRow" colId="' + options.colId + '">';
							rowHTML += '<td>' + options.layerData.tooltips[options.tooltipIndex].FieldLabel + '</td>';
							rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
							rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
							rowHTML += '</tr>';
						}
						else if ($.inArray( options.layerData.tooltips[options.tooltipIndex].DisplayType.toUpperCase(), [ 'DATE','DATETIME' ] ) > -1)
						{
							rowHTML += '<tr class="listViewFilterRow" colId="' + options.colId + '">';
							rowHTML += '<td>' + options.layerData.tooltips[options.tooltipIndex].FieldLabel + '</td>';
							rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeDecimal.join('') +   '</select>' + '</td>';
							rowHTML += '<td>' + '<input type="text" class="value-input" value="' + currentValue + '"/>' + '</td>';
							rowHTML += '</tr>';
						}
						else if ($.inArray( options.layerData.tooltips[options.tooltipIndex].DisplayType.toUpperCase(), [ 'BOOLEAN' ] ) > -1)
						{
							var fieldLabel = options.layerData.tooltips[options.tooltipIndex].FieldLabel;
							var trueSelected = '';
							var falseSelected = '';
							
							if(currentValue === true) {
							  trueSelected = 'checked';
							} else if(currentValue === false) {
							  falseSelected = 'checked';
							}

							rowHTML += '<tr class="listViewFilterRow" colId="' + options.colId + '">';
							rowHTML += '<td>' + fieldLabel + '</td>';
							rowHTML += '<td>' + '<select class="listViewOperator"><option value="none">none</option><option value="equals">equals</option></select></td>';
							rowHTML += '<td>' + '<input type="radio" class="value-input" fieldValue="true" name="'+fieldLabel+'" ' + trueSelected + ' />True';
							rowHTML += '<input type="radio" class="value-input" fieldValue="false" name="'+fieldLabel+'" ' + falseSelected + ' />False' + '</td>';
							rowHTML += '</tr>';
						}
						else if ($.inArray( options.layerData.tooltips[options.tooltipIndex].DisplayType.toUpperCase(), [ 'PICKLIST' ] ) > -1)
						{
							//if this is a picklist, let's get all of the options and store them
							var picklistOptions = options.layerData.tooltips[options.tooltipIndex].PicklistOptions === undefined ? [] : options.layerData.tooltips[options.tooltipIndex].PicklistOptions;
							var optionSelect = [];

							if(picklistOptions.length > 0) {
								var len = picklistOptions.length;
								for (var i=0; i<len; i++) {
									var newOption = '<option value="' + picklistOptions[i].value + '">' + picklistOptions[i].label + '</option>';
									optionSelect.push(newOption);
								}
							}

							rowHTML += '<tr class="listViewFilterRow" colId="' + options.colId + '">';
							rowHTML += '<td>' + options.layerData.tooltips[options.tooltipIndex].FieldLabel + '</td>';
							rowHTML += '<td>' + '<select class="listViewOperator">' +  MAListView.operators.typeString.join('') +   '</select>' + '</td>';
							rowHTML += '<td>' + '<select class="value-input">' + optionSelect.join('') + '</select>' + '</td>';
							rowHTML += '</tr>';
						}
					
					
					}
				}
				return rowHTML;
			},

            // Closes the popup and clears the filters
			closeAndClearFilterPopup: function() {
				var options = {
					layerId : $('#listview-filter-popup').attr('layerId')
				}
				
				MAListView.ClearSearch({
					layerId : options.layerId
				});
				
				//redraw tab
				MAListView.DrawTab({
					layerId         : options.layerId,
					isSelectedTab   : options.layerId == 'SelectedTab',
					isExport        : false 
				});
				
				//close the popup
				ClosePopupWindow();
			},

            // Closes the popup
			closeFilterPopup: function() {
				/*
					layerId : 'string',
					doSave: boolean
				*/
				
				var options = {
					layerId : $('#listview-filter-popup').attr('layerId'),
					doSave : true
				}
				
				
				 //MAListView.closeFilterPopup({layerId : $('.testing').data().qid,doSave: true });
				
				/****************************
				 * To Do:
				 *  Put error checking in, for example if they have selected an operator, make sure there is a value (operator dependent of course), right now the script always assumes there is a value.
				 * 
				 * *************************/
				
				if (options.doSave)
				{
					var filtersArray = [];
					
					$( "tr.listViewFilterRow" ).each(function( index ) {
						
						var colId = $(this).attr('colid');
						var operator = $(this).find('select.listViewOperator').val();
						
						if (operator != 'none')
						{
							if (colId == '5') //drive time
							{
								var days    = $('input.days').val();
								var hours   = $('input.hours').val();
								var minutes = $('input.minutes').val();
								
								//check for blanks and conver to Float
								days    = (days == "")      ? 0 : parseFloat(days);
								hours   = (hours == "")     ? 0 : parseFloat(hours);
								minutes = (minutes == "")   ? 0 : parseFloat(minutes);
								
								//convert to seconds
								var seconds = (days * 86400.00) + (hours * 3600.00) + (minutes * 60.00);
								
								filtersArray.push({
									colId        : colId,
									operator     : operator,
									value        : seconds,
									displayValue : {
										days : days,
										hours : hours,
										minutes : minutes
									}
								});
								
							}
							else if (colId == '23' || colId == '4' ) //straight line distance or drive distance
							{
								var displayValue = $(this).find('input.value-input').val();
								var unitOfMeasure = $(this).find('select.unit-input').val();
								
								//need to conver to meters
								var meters = displayValue;

								if (unitOfMeasure == 'kilometers')
								{
									meters = 1000.00 * displayValue;
								}
								else if (unitOfMeasure == 'miles')
								{
									meters = 1609.344 * displayValue;
								}
								
								filtersArray.push({
									colId        : colId,
									operator     : operator,
									value        : meters,
									displayValue : displayValue,
									unit         : unitOfMeasure
								});
							}
							else
							{
								var fields = $(this).find('.value-input');
								var displayValue = null;

								if(fields.length > 1) {
									for(var i=0; i<fields.length; i++) {
										if(fields[i].checked) {
											var fieldValue = fields[i].getAttribute('fieldValue') === "true";
											//console.log('fieldValue', fieldValue);
											displayValue = fieldValue;
										}
									}
								} else {
									displayValue = $(this).find('.value-input').val();
								}

								//console.log('displayValue:', displayValue);
								
								filtersArray.push({
									colId        : colId,
									operator     : operator,
									value        : displayValue,
									displayValue : displayValue
								});
							}
						}
						
					});
					
					//console.log(filtersArray);
					
					if (options.layerId === 'SelectedTab')
					{
						if($('.search-all-value-input').val() !== '') {
							filtersArray.push({
								colId        : '-1',
								operator     : 'contains',
								value        : $('.search-all-value-input').val(),
								displayValue : $('.search-all-value-input').val()
							});
						}

						MAListView.listViewSettings.filters = filtersArray;

						var opt = { layerId: options.layerId, count: MAListView.listViewSettings.filters.length };

						MAListView.UpdateAdvancedSearchLink(opt); 
						MAListView.Search(opt);
					}
					else
					{
						if($('.search-all-value-input').val() !== '') {
							filtersArray.push({
								colId        : '-1',
								operator     : 'contains',
								value        : $('.search-all-value-input').val(),
								displayValue : $('.search-all-value-input').val()
							});
						}

						$layerData = $('[qid="' + options.layerId + '"]').data();
						$layerData.listViewSettings.filters = filtersArray;
						
						var opt = { layerId: options.layerId, count: $layerData.listViewSettings.filters.length };

						MAListView.UpdateAdvancedSearchLink(opt); 
						MAListView.Search(opt);
					}
					
					//close the popup
					ClosePopupWindow();
					
					
				}
				
				
				//ClosePopupWindow();
			},



			//################################################## MAYBE KEEPING ##################################################

			//==========EVENT HANDLING==========
			//used to attach handlers to framework events
			on: function(event, method, options) {
				options = options || {};

				try
				{
					//add this handler to the events map
					this.events[event].push(method);

					//handle special events
					switch(event)
					{
						case 'nextclick':
							$('#map-status').empty().append(options.message || 'Click the map to proceed...').show();
							break;
					}
				}
				catch (err) {
					MALog('Invalid Event: ' + event, err);
				}
			},

			//used to remove handlers to framework events (currently removes all handlers for an event, may add support for specific handlers later)
			off: function(event) {
				this.events[event] = [];

				//handle special events
				switch(event)
				{
					case 'nextclick':
						$('#map-status').hide();
						break;
				}
			}, 

			//used to fire an event programatically
			fire: function(event) {
				try {
					var args = Array.prototype.slice.apply(arguments).slice(1);
					$.each(this.events[event], function (index, method) {
						method.apply(this, args);
					});
				}
				catch (err) {
					MALog('Invalid Event: ' + event, err);
				}
			},

			//used for logging to the console
			log: function() {
				try { 
					console.log('ListView errors:');
					$.each(arguments, function (index, arg) {
						console.log(arg);
						if (arg instanceof Error) {
							console.log(arg.stack);
						}
					}); 
				} catch (err) { }
			},


			//limits used throughout the application.  even if a user enters a larger value, this value should be used
			limits: {
				maxQuerySize: 30000,
				maxClusterSize: 30000
			},

			//enabled features
			enabledFeatures: {
				autoCheckOut: {!AutoCheckOutEnabled},
				nearbyCheckin: {!nearbyCheckinEnabled}
			},

			//resources that are called by MA
			resources: {
				'Admin'					: options.sitePrefix + '/apex/'+options.namespace+'MAAdminAJAXResources',
				'Analytics'				: options.sitePrefix + '/apex/'+options.namespace+'MAAnalyticsAJAXResources',
				'BaseObjects'			: options.sitePrefix + '/apex/'+options.namespace+'MapAnythingBaseObjects',
				'ChatterFeed'			: options.sitePrefix + '/apex/'+options.namespace+'ChatterFeed',
				'DownloadRoute'			: options.sitePrefix + '/apex/'+options.namespace+'DownloadRoute',
				'Email'					: options.sitePrefix + '/apex/'+options.namespace+'MAEmailAJAXResources',
				'Export'				: options.sitePrefix + '/apex/'+options.namespace+'MAExportAJAXResources',
				'FavoriteLocations'		: options.sitePrefix + '/apex/'+options.namespace+'MAFavoriteLocationsAJAXResources',
				'Click2Create'			: options.sitePrefix + '/apex/'+options.namespace+'ClickToCreateForm',
				'Geocode'				: options.sitePrefix + '/apex/'+options.namespace+'MAGeoCodeAJAXResources',
				'GeocoderFrame'			: options.sitePrefix + '/apex/'+options.namespace+'GeocoderFrame',
				'MA'					: options.sitePrefix + '/apex/'+options.namespace+'MA',
				'MapActions'			: options.sitePrefix + '/apex/'+options.namespace+'MapActions',
				'MapAnything'			: options.sitePrefix + '/apex/'+options.namespace+'MapAnything',
				'MissingAddressExport'	: options.sitePrefix + '/apex/'+options.namespace+'MapAnythingExportMissingAddresses',
				'Nearby'				: options.sitePrefix + '/apex/'+options.namespace+'MANearbyAJAXResources',
				'PrintEmailRoute'		: options.sitePrefix + '/apex/'+options.namespace+'PrintEmailRoute',
				'Query'					: options.sitePrefix + '/apex/'+options.namespace+'MASavedQueryAJAXResources',
				'QueryBuilder'			: options.sitePrefix + '/apex/'+options.namespace+'EditQuery',
				'QueryBuilderAPI'		: options.sitePrefix + '/apex/'+options.namespace+'QueryBuilderAPI',
				'RelatedLists'			: options.sitePrefix + '/apex/'+options.namespace+'MAPopupRelatedListInformation',
				'RouteCalendar'			: options.sitePrefix + '/apex/'+options.namespace+'RouteCalendar',
				'RouteCalendarAPI'		: options.sitePrefix + '/apex/'+options.namespace+'RouteCalendarAJAXResources',
				'Settings'				: options.sitePrefix + '/apex/'+options.namespace+'MapAnythingSettings',
				'SFDCHome'				: options.sitePrefix + '/home/home.jsp',
				'Territory'				: options.sitePrefix + '/apex/'+options.namespace+'MATerritoryAJAXResources',
				'Tooltip'				: options.sitePrefix + '/apex/'+options.namespace+'MATooltipAJAXResources',
				'Tree'					: options.sitePrefix + '/apex/'+options.namespace+'MATreeAJAXResources',
				'TreeXML'				: options.sitePrefix + '/apex/'+options.namespace+'MapAnythingTree2',
				'TreeFolders'			: options.sitePrefix + '/apex/'+options.namespace+'MapAnythingTreeFolders',
				'User'					: options.sitePrefix + '/apex/'+options.namespace+'MAUserAJAXResources',
				'VFPageProxy'			: options.sitePrefix + '/apex/'+options.namespace+'VFPageProxy',
				'Waypoint'				: options.sitePrefix + '/apex/'+options.namespace+'MAWaypointAJAXResources',
				'Weather'				: options.sitePrefix + '/apex/'+options.namespace+'WeatherAJAXResource',
				'XMLDoc'				: options.sitePrefix + '/apex/'+options.namespace+'XMLDocumentAJAXResources'
			},

			//static resources
			staticResources: {
				'MapAnything'			: options.sitePrefix + '/resource/'+options.namespace+'MapAnything'
			},

			//external resources
			externalResources: {
				'ProductAPI'			: 'https://product-api-prod.cloudbilt.com',
				'Queue'					: 'https://product-api-prod.cloudbilt.com/queue/',
				'Queue-Staging'			: 'http://product-api-staging.elasticbeanstalk.com/queue/'
			},

			//events that will be fired by this framework.  developers can hook onto these events using the on method
			events: {
				'ready': [],
				'mapready': [],
				'nextclick': []
			}
		}})({ sitePrefix: '{!$Site.CurrentSiteUrl}'.substring(0, '{!$Site.CurrentSiteUrl}'.length - 1), namespace: '{!namespace}' == '' ? '' : '{!namespace}__' });

		MAListView.operators.typeString = [
			MAListView.operators.none, 
			MAListView.operators.equals, 
			MAListView.operators.notEqualTo, 
			MAListView.operators.startsWith, 
			MAListView.operators.contains, 
			MAListView.operators.doesNotContain 
			/*MAListView.operators.endsWith*/
		];

		MAListView.operators.typeDecimal = [
			MAListView.operators.none, 
			MAListView.operators.equals, 
			MAListView.operators.notEqualTo, 
			MAListView.operators.lessThan, 
			MAListView.operators.lessThanEqualTo, 
			MAListView.operators.greaterThan, 
			MAListView.operators.greaterThanEqualTo 
			/*, MAListView.operators.range*/
		];

	</script>
</apex:component>